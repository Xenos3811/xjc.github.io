<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>css笔记</title>
    <link href="/posts/7151/"/>
    <url>/posts/7151/</url>
    
    <content type="html"><![CDATA[<p>CSS学习笔记</p><span id="more"></span><h1 id="CSS单位"><a href="#CSS单位" class="headerlink" title="CSS单位"></a>CSS单位</h1><h2 id="绝对单位"><a href="#绝对单位" class="headerlink" title="绝对单位"></a>绝对单位</h2><table><thead><tr><th>单位</th><th>名称</th><th>等价换算</th></tr></thead><tbody><tr><td>cm</td><td>厘米</td><td>1cm &#x3D; 37.8px &#x3D; 25.2&#x2F;64in</td></tr><tr><td>mm</td><td>毫米</td><td>1mm &#x3D; 1&#x2F;10th of 1cm</td></tr><tr><td>Q</td><td>四分之一毫米</td><td>1Q &#x3D; 1&#x2F;40th of 1cm</td></tr><tr><td>in</td><td>英寸</td><td>1in &#x3D; 2.54cm &#x3D; 96px</td></tr><tr><td>pc</td><td>派卡</td><td>1pc &#x3D; 1&#x2F;6th of 1in</td></tr><tr><td>pt</td><td>点</td><td>1pt &#x3D; 1&#x2F;72th of 1in</td></tr><tr><td>px</td><td>像素</td><td>1px &#x3D; 1&#x2F;96th of 1in</td></tr><tr><td>px</td><td>像素</td><td>1px &#x3D; 1&#x2F;96th of 1in</td></tr></tbody></table><h2 id="相对长度单位"><a href="#相对长度单位" class="headerlink" title="相对长度单位"></a>相对长度单位</h2><ul><li>em 和 rem 分别相对于父元素和根元素的字体大小。</li><li>vh 和 vw 分别相对于视口的高度和宽度。</li><li>% 百分比</li></ul><h2 id="角度单位"><a href="#角度单位" class="headerlink" title="角度单位"></a>角度单位</h2><ul><li>deg：度数。</li><li>rad：弧度。</li><li>grad：梯度。</li><li>turn：圈数。</li></ul><h1 id="伪类和伪元素"><a href="#伪类和伪元素" class="headerlink" title="伪类和伪元素"></a>伪类和伪元素</h1><h2 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h2><p>什么是伪类?伪类可以理解为默认的css方法选择器<br>伪类以:开头</p><p>举例:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* first-child 表示article标签下第一个p标签的元素 */</span><br><span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:first-child</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">120%</span>;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>:active</td><td>在用户激活（例如点击）元素的时候匹配。</td></tr><tr><td>:any-link</td><td>匹配一个链接的:link和:visited状态。</td></tr><tr><td>:blank</td><td>匹配空输入值的<code>&lt;input&gt;</code>元素。</td></tr><tr><td>:checked</td><td>匹配处于选中状态的单选或者复选框。</td></tr><tr><td>:current</td><td>匹配正在展示的元素，或者其上级元素。</td></tr><tr><td>:default</td><td>匹配一组相似的元素中默认的一个或者更多的 UI 元素。</td></tr><tr><td>:dir</td><td>基于其方向性（HTMLdir属性或者 CSSdirection属性的值）匹配一个元素。</td></tr><tr><td>:disabled</td><td>匹配处于关闭状态的用户界面元素</td></tr><tr><td>:empty</td><td>匹配除了可能存在的空格外，没有子元素的元素。</td></tr><tr><td>:enabled</td><td>匹配处于开启状态的用户界面元素。</td></tr><tr><td>:first</td><td>匹配分页媒体的第一页。</td></tr><tr><td>:first-child</td><td>匹配兄弟元素中的第一个元素。</td></tr><tr><td>:first-of-type</td><td>匹配兄弟元素中第一个某种类型的元素。</td></tr><tr><td>:focus</td><td>当一个元素有焦点的时候匹配。</td></tr><tr><td>:focus-visible</td><td>当元素有焦点，且焦点对用户可见的时候匹配。</td></tr><tr><td>:focus-within</td><td>匹配有焦点的元素，以及子代元素有焦点的元素。</td></tr><tr><td>:future</td><td>匹配当前元素之后的元素。</td></tr><tr><td>:hover</td><td>当用户悬浮到一个元素之上的时候匹配。</td></tr><tr><td>:indeterminate</td><td>匹配未定态值的 UI 元素，通常为复选框。</td></tr><tr><td>:in-range</td><td>用一个区间匹配元素，当值处于区间之内时匹配。</td></tr><tr><td>:invalid</td><td>匹配诸如<code>&lt;input&gt;</code>的位于不可用状态的元素。</td></tr><tr><td>:lang</td><td>基于语言（HTMLlang属性的值）匹配元素。</td></tr><tr><td>:last-child</td><td>匹配兄弟元素中最末的那个元素。</td></tr><tr><td>:last-of-type</td><td>匹配兄弟元素中最后一个某种类型的元素。</td></tr><tr><td>:left</td><td>在分页媒体中，匹配左手边的页。</td></tr><tr><td>:link</td><td>匹配未曾访问的链接。</td></tr><tr><td>:local-link</td><td>匹配指向和当前文档同一网站页面的链接。</td></tr><tr><td>:is()</td><td>匹配传入的选择器列表中的任何选择器。</td></tr><tr><td>:not</td><td>匹配作为值传入自身的选择器未匹配的物件。</td></tr><tr><td>:nth-child</td><td>匹配一列兄弟元素中的元素——兄弟元素按照an+b形式的式子进行匹配（比如 2n+1 匹配元素 1、3、5、7 等。即所有的奇数个）。</td></tr><tr><td>:nth-of-type</td><td>匹配某种类型的一列兄弟元素（比如，<p>元素）——兄弟元素按照an+b形式的式子进行匹配（比如 2n+1 匹配元素 1、3、5、7 等。即所有的奇数个）。</td></tr><tr><td>:nth-last-child</td><td>匹配一列兄弟元素，从后往前倒数。兄弟元素按照an+b形式的式子进行匹配（比如 2n+1 匹配按照顺序来的最后一个元素，然后往前两个，再往前两个，诸如此类。从后往前数的所有奇数个）。</td></tr><tr><td>:nth-last-of-type</td><td>匹配某种类型的一列兄弟元素（比如，<p>元素），从后往前倒数。兄弟元素按照an+b形式的式子进行匹配（比如 2n+1 匹配按照顺序来的最后一个元素，然后往前两个，再往前两个，诸如此类。从后往前数的所有奇数个）。</td></tr><tr><td>:only-child</td><td>匹配没有兄弟元素的元素。</td></tr><tr><td>:only-of-type</td><td>匹配兄弟元素中某类型仅有的元素。</td></tr><tr><td>:optional</td><td>匹配不是必填的 form 元素。</td></tr><tr><td>:out-of-range</td><td>按区间匹配元素，当值不在区间内的时候匹配。</td></tr><tr><td>:past</td><td>匹配当前元素之前的元素。</td></tr><tr><td>:placeholder-shown</td><td>匹配显示占位文字的 input 元素。</td></tr><tr><td>:playing</td><td>匹配代表音频、视频或者相似的能“播放”或者“暂停”的资源的，且正在“播放”的元素。</td></tr><tr><td>:paused</td><td>匹配代表音频、视频或者相似的能“播放”或者“暂停”的资源的，且正在“暂停”的元素。</td></tr><tr><td>:read-only</td><td>匹配用户不可更改的元素。</td></tr><tr><td>:read-write</td><td>匹配用户可更改的元素。</td></tr><tr><td>:required</td><td>匹配必填的 form 元素。</td></tr><tr><td>:right</td><td>在分页媒体中，匹配右手边的页。</td></tr><tr><td>:root</td><td>匹配文档的根元素。</td></tr><tr><td>:scope</td><td>匹配任何为参考点元素的元素。</td></tr><tr><td>:valid</td><td>匹配诸如元素的处于可用状态的元素。</td></tr><tr><td>:target</td><td>匹配当前 URL 目标的元素（例如如果它有一个匹配当前URL 分段的元素）。</td></tr><tr><td>:visited</td><td>匹配已访问链接。</td></tr></tbody></table><h2 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h2><p>伪元素用于创建文档中不存在的虚拟元素，并且允许通过 CSS 来渲染这些虚拟元素的样式。,伪元素以::两个冒号开头<br>如:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 在p元素后新增一个content元素1 */</span><br><span class="hljs-selector-class">.p</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;1&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>::after</td><td>匹配出现在原有元素的实际内容之后的一个可样式化元素。</td></tr><tr><td>::before</td><td>匹配出现在原有元素的实际内容之前的一个可样式化元素。</td></tr><tr><td>::first-letter</td><td>匹配元素的第一个字母。</td></tr><tr><td>::first-line</td><td>匹配包含此伪元素的元素的第一行。</td></tr><tr><td>::grammar-error</td><td>匹配文档中包含了浏览器标记的语法错误的那部分。</td></tr><tr><td>::selection</td><td>匹配文档中被选择的那部分。</td></tr><tr><td>::spelling-error</td><td>匹配文档中包含了浏览器标记的拼写错误的那部分。</td></tr></tbody></table><h1 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h1><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p>在网页设计中，”盒模型” 是指在 CSS 中用来布局元素的基本概念。每个 HTML 元素都被视为一个矩形的盒子，这个盒子包括内容区域、内边距、边框和外边距。这些部分一起构成了元素的盒模型。</p><ul><li><p>内容区域（Content）：这是元素实际显示内容的区域，可以包含文本、图片、其他嵌套元素等。</p></li><li><p>内边距（Padding）：内边距是内容区域与边框之间的空间，用来控制内容与边框之间的距离。</p></li><li><p>边框（Border）：边框是围绕内容和内边距的线，用来界定元素的边界。</p></li><li><p>外边距（Margin）：外边距是元素边框与相邻元素之间的空间，用来控制元素与其他元素之间的距离。</p></li></ul><h1 id="冷门标签"><a href="#冷门标签" class="headerlink" title="冷门标签"></a>冷门标签</h1><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter">filter</a></h2><p>CSS filter 属性将模糊或颜色偏移等图形效果应用于元素。滤镜通常用于调整图像、背景和边框的渲染。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* &lt;filter-function&gt; 值 */</span><br><span class="hljs-comment">/* 模糊 */</span><br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">blur</span>(<span class="hljs-number">5px</span>);<br><span class="hljs-comment">/* 亮度 */</span><br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">brightness</span>(<span class="hljs-number">0.4</span>);<br><span class="hljs-comment">/* 对比度 */</span><br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">contrast</span>(<span class="hljs-number">200%</span>);<br><span class="hljs-comment">/* 阴影!! */</span><br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">drop-shadow</span>(<span class="hljs-number">16px</span> <span class="hljs-number">16px</span> <span class="hljs-number">20px</span> blue);<br><span class="hljs-comment">/* 灰度 */</span><br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">grayscale</span>(<span class="hljs-number">50%</span>);<br><span class="hljs-comment">/* 颜色反转 */</span><br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">hue-rotate</span>(<span class="hljs-number">90deg</span>);<br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">invert</span>(<span class="hljs-number">75%</span>);<br><span class="hljs-comment">/* 不透明度 */</span><br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">opacity</span>(<span class="hljs-number">25%</span>);<br><span class="hljs-comment">/* 饱和度 */</span><br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">saturate</span>(<span class="hljs-number">30%</span>);<br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">sepia</span>(<span class="hljs-number">60%</span>);<br><br><span class="hljs-comment">/* URL */</span><br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;filters.svg#filter-id&#x27;</span>);<br><br><span class="hljs-comment">/* 多个滤镜 */</span><br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">contrast</span>(<span class="hljs-number">175%</span>) <span class="hljs-built_in">brightness</span>(<span class="hljs-number">3%</span>);<br><span class="hljs-attribute">filter</span>: <span class="hljs-built_in">drop-shadow</span>(<span class="hljs-number">3px</span> <span class="hljs-number">3px</span> red) <span class="hljs-built_in">sepia</span>(<span class="hljs-number">100%</span>) <span class="hljs-built_in">drop-shadow</span>(-<span class="hljs-number">3px</span> -<span class="hljs-number">3px</span> blue);<br><br><span class="hljs-comment">/* 不使用滤镜 */</span><br><span class="hljs-attribute">filter</span>: none;<br><br><span class="hljs-comment">/* 全局值 */</span><br><span class="hljs-attribute">filter</span>: inherit;<br><span class="hljs-attribute">filter</span>: initial;<br><span class="hljs-attribute">filter</span>: revert;<br><span class="hljs-attribute">filter</span>: revert-layer;<br><span class="hljs-attribute">filter</span>: unset;<br></code></pre></td></tr></table></figure><h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform">transform</a></h2><p>transform 属性是 CSS3 中用来对元素进行变换的属性，可以实现旋转、缩放、移动、倾斜等效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 关键字值 */</span><br><span class="hljs-attribute">transform</span>: none;<br><br><span class="hljs-comment">/* 函数值 */</span><br><span class="hljs-comment">/* matrix:变换:通过一个 2x3 的矩阵来实现任意的仿射变换。这个函数的参数是一个包含六个值的数学矩阵，可以实现复杂的变换效果 */</span><br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">matrix</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">matrix3d</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">perspective</span>(<span class="hljs-number">17px</span>);<br><span class="hljs-comment">/* rotate : 旋转角度 */</span><br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0.5turn</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate3d</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10deg</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateX</span>(<span class="hljs-number">10deg</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">10deg</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotateZ</span>(<span class="hljs-number">10deg</span>);<br><span class="hljs-comment">/* translate: 偏移  */</span><br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">12px</span>, <span class="hljs-number">50%</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate3d</span>(<span class="hljs-number">12px</span>, <span class="hljs-number">50%</span>, <span class="hljs-number">3em</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">2em</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">3in</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">2px</span>);<br><span class="hljs-comment">/* scale: 缩放 */</span><br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">2</span>, <span class="hljs-number">0.5</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale3d</span>(<span class="hljs-number">2.5</span>, <span class="hljs-number">1.2</span>, <span class="hljs-number">0.3</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleX</span>(<span class="hljs-number">2</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleY</span>(<span class="hljs-number">0.5</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scaleZ</span>(<span class="hljs-number">0.3</span>);<br><span class="hljs-comment">/* skew:倾斜 */</span><br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skew</span>(<span class="hljs-number">30deg</span>, <span class="hljs-number">20deg</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skewX</span>(<span class="hljs-number">30deg</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skewY</span>(<span class="hljs-number">1.07rad</span>);<br><br><span class="hljs-comment">/* 多个函数值 */</span><br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">10px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">10deg</span>) <span class="hljs-built_in">translateY</span>(<span class="hljs-number">5px</span>);<br><span class="hljs-attribute">transform</span>: <span class="hljs-built_in">perspective</span>(<span class="hljs-number">500px</span>) <span class="hljs-built_in">translate</span>(<span class="hljs-number">10px</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20px</span>) <span class="hljs-built_in">rotateY</span>(<span class="hljs-number">3deg</span>);<br><br><span class="hljs-comment">/* 全局值 */</span><br><span class="hljs-attribute">transform</span>: inherit;<br><span class="hljs-attribute">transform</span>: initial;<br><span class="hljs-attribute">transform</span>: revert;<br><span class="hljs-attribute">transform</span>: revert-layer;<br><span class="hljs-attribute">transform</span>: unset;<br></code></pre></td></tr></table></figure><h2 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Overflowing_content">overflow</a></h2><p>overflow 控制盒模型溢出后的处理方式</p><ul><li>visible:内容不能被裁减并且可能渲染到边距盒（padding）的外部。</li><li>hidden:内容将被裁减以适应边距（padding）盒</li><li>clip:类似于 hidden，内容将以元素的边距（padding）盒进行裁剪</li><li>scroll</li><li>auto:如果内容溢出，则浏览器提供滚动条</li></ul><h2 id="object-fit"><a href="#object-fit" class="headerlink" title="object-fit"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/object-fit">object-fit</a></h2><p>object-fit 可以控制被替换元素的内容对象在元素框内的对齐方式,如图片自适应,自动拉伸</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* contain : 被替换的内容将被缩放，以在填充元素的内容框时保持其宽高比。整个对象在填充盒子的同时保留其长宽比，因此如果宽高比与框的宽高比不匹配，该对象将被添加“黑边 */</span><br><span class="hljs-attribute">object-fit</span>: contain;<br><span class="hljs-comment">/* cover: 被替换的内容在保持其宽高比的同时填充元素的整个内容框。如果对象的宽高比与内容框不相匹配，该对象将被剪裁以适应内容框。 */</span><br><span class="hljs-attribute">object-fit</span>: cover;<br><span class="hljs-comment">/* 被替换的内容正好填充元素的内容框。整个对象将完全填充此框。如果对象的宽高比与内容框不相匹配，那么该对象将被拉伸以适应内容框。 */</span><br><span class="hljs-attribute">object-fit</span>: fill;<br><span class="hljs-attribute">object-fit</span>: none;<br><span class="hljs-attribute">object-fit</span>: scale-down;<br><span class="hljs-comment">/* Global values */</span><br><span class="hljs-attribute">object-fit</span>: inherit;<br><span class="hljs-attribute">object-fit</span>: initial;<br><span class="hljs-attribute">object-fit</span>: revert;<br><span class="hljs-attribute">object-fit</span>: revert-layer;<br><span class="hljs-attribute">object-fit</span>: unset;<br></code></pre></td></tr></table></figure><h1 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h1><h2 id="流布局-默认布局"><a href="#流布局-默认布局" class="headerlink" title="流布局(默认布局)"></a>流布局(默认布局)</h2><p>流布局是默认布局,默认布局根据html标签来,如<code>&lt;div&gt;</code>,<code>&lt;span&gt;</code>,<code>&lt;h&gt;</code>等<br>默认的<code>div</code>相当于<code>display:block</code>. <code>&lt;span&gt;</code>相当于 <code>display: inline</code><br><code>block</code>:块状布局,元素会自动换行<br><code>inline</code>: 行内布局,元素会在行内</p><h2 id="浮动Float"><a href="#浮动Float" class="headerlink" title="浮动Float"></a><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Floats">浮动Float</a></h2><p>float样式.可以让元素浮动起来.</p><h3 id="什么是浮动起来"><a href="#什么是浮动起来" class="headerlink" title="什么是浮动起来?"></a>什么是浮动起来?</h3><p>首先要理解我们的初始布局,在默认的浏览器页面上,平面是一个二维的:即水平和纵深.<br>那么,在默认的流布局中,标签元素会自动换行的上下依次排列(布局).这实际上是一个<code>一维</code>的布局方式.<br>也就是只对纵深做了默认从上往下.然而水平方向上,实际上是被标签占满的,哪怕指定了元素的weigh很小,水平上空余的空间也不会被利用,即为空白</p><p>那么此时如果想要将其水平空白的空间也被利用,这时候就要给该元素的设置一下布局了.Float就是一个布局属性<br>如果给定一个标签浮动,那么此标签的未使用到的水平空间(空白水平空间)就可以被其它的标签所占用.<br>在这个<a href="https://developer.mozilla.org/zh-CN/play">例子🌰</a>中可以看到: 当给了box一个浮动属性,那么其水平上的空间就可以被其他的标签所填充了<br>再给box添加一个外边距,就可以将文件向右推开部分距离</p><h3 id="如何擦除元素的浮动"><a href="#如何擦除元素的浮动" class="headerlink" title="如何擦除元素的浮动?"></a>如何擦除元素的浮动?</h3><p>为什么要擦除浮动?<br>元素声明了<code>float</code>之后,其它元素会自动浮动到此元素未使用的水平空间来.<br>若其他某个元素不想要浮动过来呢?这时候就需要擦除</p><ol><li><p><code>clear</code>:对不需要浮动的元素声明<code>clear</code></p><p>clear 属性接受下列值：<br>left：停止任何活动的左浮动<br>right：停止任何活动的右浮动<br>both：停止任何活动的左右浮动</p></li><li><p><code>overflow: auto;</code>:将需要浮动处理的元素用一个<code>div</code>包裹并声明<code>overflow: auto;</code></p></li><li><p><code>display: flow-root;</code>:(推荐)将需要浮动处理的元素用一个<code>div</code>包裹并声明<code>display: flow-root;</code></p></li></ol><h2 id="定位Position"><a href="#定位Position" class="headerlink" title="定位Position"></a><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Positioning">定位Position</a></h2><p>定位允许你从正常的文档流布局中取出元素，并使它们具有不同的行为，例如放在另一个元素的上面，或者始终保持在浏览器视窗内的同一位置</p><h3 id="定位类型"><a href="#定位类型" class="headerlink" title="定位类型"></a>定位类型</h3><ul><li>相对定位(<code>relative</code>): 相对于当前元素的偏移,</li><li>绝对定位(<code>absolute</code>): 绝对于当前视窗的位置</li><li>固定定位(<code>fixed</code>): 固定当前视窗的位置</li><li>黏性定位(<code>sticky</code>): 它基本上是相对位置和固定位置的混合体，它允许被定位的元素表现得像相对定位一样，直到它滚动到某个阈值点（例如，从视口顶部起 10 像素）为止，此后它就变得固定了</li></ul><h3 id="top、bottom、left-和-right"><a href="#top、bottom、left-和-right" class="headerlink" title="top、bottom、left 和 right"></a>top、bottom、left 和 right</h3><p>top, bottom, left, 和 right 来精确指定要将定位元素移动到的位置。</p><h2 id="Flex布局-弹性盒子"><a href="#Flex布局-弹性盒子" class="headerlink" title="Flex布局.弹性盒子"></a><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Flexbox">Flex布局</a>.弹性盒子</h2><p>弹性盒子是一种用于按行或按列布局元素的<code>一维布局</code>方法。元素可以膨胀以填充额外的空间，收缩以适应更小的空间。本文将解释所有的基本原理</p><p><img src="http://img.restart.vip/photo/2024/06/16oFshbl.png"></p><h3 id="flex-direction-属性"><a href="#flex-direction-属性" class="headerlink" title="flex-direction 属性"></a>flex-direction 属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 文本排成行的方向 */</span><br><span class="hljs-attribute">flex-direction</span>: row;<br><br><span class="hljs-comment">/* 类似于 &lt;row&gt;，但方向相反 */</span><br><span class="hljs-attribute">flex-direction</span>: row-reverse;<br><br><span class="hljs-comment">/* 文本行堆叠的方向 */</span><br><span class="hljs-attribute">flex-direction</span>: column;<br><br><span class="hljs-comment">/* 类似于 &lt;column&gt;，但方向相反 */</span><br><span class="hljs-attribute">flex-direction</span>: column-reverse;<br><br><span class="hljs-comment">/* 全局值 */</span><br><span class="hljs-attribute">flex-direction</span>: inherit;<br><span class="hljs-attribute">flex-direction</span>: initial;<br><span class="hljs-attribute">flex-direction</span>: revert;<br><span class="hljs-attribute">flex-direction</span>: revert-layer;<br><span class="hljs-attribute">flex-direction</span>: unset;<br><br><br><br></code></pre></td></tr></table></figure><h1 id="Z-index"><a href="#Z-index" class="headerlink" title="Z-index"></a>Z-index</h1><p>z-index 是 CSS 属性，用于控制元素在堆叠顺序（层叠顺序）中的位置。具体来说，z-index 属性可以指定一个元素在层叠上下文中的堆叠顺序，即确定哪个元素位于其他元素的上方或下方。</p><p>通常情况下，具有更高 z-index 值的元素会显示在具有更低 z-index 值的元素的上方。如果两个元素具有相同的 z-index 值，则它们的堆叠顺序将根据它们在 HTML 结构中的位置来决定。</p><p>如下图所示,1的z-index为1,2的z-index为2</p><p><img src="http://img.restart.vip/photo/2024/07/05NQ9WqY.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>VsCode 插件</title>
    <link href="/posts/31768/"/>
    <url>/posts/31768/</url>
    
    <content type="html"><![CDATA[<p>VsCode Plugins</p><p>2024 最新 VsCode 插件推荐</p><p>其实 VsCode 已经可以完全平替 Sublime 了.</p><span id="more"></span><h1 id="必装"><a href="#必装" class="headerlink" title="必装"></a>必装</h1><ul><li>Github Copilot : AI 代码提示</li><li>Prettier - Code formatter : 代码自动格式美化(支持 js,ts,html,css,vue,json,md…)</li><li>Vue - Official : vue 插件仅安装这一个(其余的早过时,会有兼容性问题导致正确的代码报错等)</li><li>Vue VSCode Snippets : (vue 模板)</li><li>别名路径跳转 : 可以通过 command+鼠标左键直接点进源码</li><li>path-alias : 配合别名路径跳转一起使用</li><li>Error Lens : 智能提示错误行,配合其他校验插件一起用效果很好</li><li>IntelliCode : 💡 智能一键修复</li><li>Color Highlight : 代码高亮</li><li>Highlight Matching Tag : Tag 标签高亮</li><li>Auto Rename Tag : 同步更改标签名</li><li>Auto Close Tag : TAG 自动关</li><li>Auto Import: 自动导入</li><li>Auto Import -ES: 自动导入</li><li>ESLint : 风格校验</li><li>Code Spell Checker : 英语单词&#x2F;命名等规则检查</li><li>i18n-ally : 国际化实时显示</li><li>GitGraph : git 历史记录图表查看</li><li>GitLins: 在代码中实时显示提交人</li><li>Todo Tree : TODO list</li><li>Bookmarks : 书签管理(看源码用)</li><li>Markdown All in One : markdown</li><li>Path Intellisense: 写路径时的智能提示</li></ul><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><ul><li>Angular 17 : Angular 插件</li><li>React Style Helper: React 插件</li><li>any-rule : 正则模板.编码时键入@zz 触发</li><li>BracketPair Color DLW : 彩虹括号(vscode 已自带)</li><li>BetterComments: 代码注释颜色高亮</li><li>StyleLint : css 校验</li><li>Tailwind Css IntelliSense : Tailwind Css 框架插件</li><li>Todo Highlight : TODO 高亮</li><li>CSS Peek : css 文件跳转</li><li>Echarts Enhanced Completion : Echarts 图表智能提示</li></ul><h1 id="i18n-ally-配置"><a href="#i18n-ally-配置" class="headerlink" title="i18n-ally 配置"></a>i18n-ally 配置</h1><p class="note note-primary">i18n国际化实时预览</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// settings.json</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;i18n-ally.enabledParsers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;ts&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;js&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;i18n-ally.enabledFrameworks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;vue&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;i18n-ally.displayLanguage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zh-CN&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 启用自动检测功能</span><br>  <span class="hljs-attr">&quot;i18n-ally.extract.autoDetect&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;i18n-ally.extract.targetPickingStrategy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;most-similar&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;i18n-ally.fullReloadOnChanged&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 重要!指定了i18n入口</span><br>  <span class="hljs-attr">&quot;i18n-ally.localesPaths&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;src/locale&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;src/locales&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 重要! 可以递归查询出所有i18n</span><br>  <span class="hljs-attr">&quot;i18n-ally.dirStructure&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;file&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 在哪些文件中显示翻译</span><br>  <span class="hljs-attr">&quot;i18n-ally.frameworks.ruby-rails.scopeRoot&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;src/views&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// flat(&#123;&quot;a.b.c&quot;: &quot;...&quot;&#125;) or nested(&#123;&quot;a&quot;: &#123;&quot;b&quot;: &#123;&quot;c&quot;: &quot;...&quot;&#125;&#125;&#125;)</span><br>  <span class="hljs-attr">&quot;i18n-ally.keystyle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-comment">// 是否启用 DeepL 翻译引擎的日志记录功能</span><br>  <span class="hljs-attr">&quot;i18n-ally.translate.deepl.enableLog&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="prettier-配置"><a href="#prettier-配置" class="headerlink" title="prettier 配置"></a>prettier 配置</h1><p class="note note-primary">保存自动格式化(美化)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 文件名称.prettierrc.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">tabWidth</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">printWidth</span>: <span class="hljs-number">80</span>,<br>  <span class="hljs-attr">quoteProps</span>: <span class="hljs-string">&#x27;consistent&#x27;</span>,<br>  <span class="hljs-attr">htmlWhitespaceSensitivity</span>: <span class="hljs-string">&#x27;strict&#x27;</span>,<br>  <span class="hljs-attr">vueIndentScriptAndStyle</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">// 单引号</span><br>  <span class="hljs-attr">singleQuote</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-comment">// 不要有;</span><br>  <span class="hljs-attr">semi</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-comment">// json 最后一行不要有,</span><br>  <span class="hljs-attr">trailingComma</span>: <span class="hljs-string">&#x27;none&#x27;</span>,<br>&#125;;<br><br><span class="hljs-comment">// 或者 .prettierrc.json</span><br>&#123;<br>  <span class="hljs-string">&quot;$schema&quot;</span>: <span class="hljs-string">&quot;https://json.schemastore.org/prettierrc&quot;</span>,<br>  <span class="hljs-string">&quot;semi&quot;</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-string">&quot;tabWidth&quot;</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-string">&quot;singleQuote&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-string">&quot;printWidth&quot;</span>: <span class="hljs-number">100</span>,<br>  <span class="hljs-string">&quot;trailingComma&quot;</span>: <span class="hljs-string">&quot;none&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>过滤配置:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 文件名 .prettierignore   (过滤文件)</span><br>/dist<span class="hljs-comment">/*</span><br><span class="hljs-comment">.local</span><br><span class="hljs-comment">.output.js</span><br><span class="hljs-comment">/node_modules/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">**/</span>*.<span class="hljs-property">svg</span><br>**<span class="hljs-comment">/*.sh</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">declare</span> module <span class="hljs-string">&#x27;*.vue&#x27;</span> &#123;<br>  <span class="hljs-keyword">import</span> <span class="hljs-keyword">type</span> &#123; DefineComponent &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br>  // eslint-<span class="hljs-keyword">disable</span>-next-<span class="hljs-type">line</span> @typescript-eslint/<span class="hljs-keyword">no</span>-explicit-<span class="hljs-keyword">any</span>, @typescript-eslint/ban-<span class="hljs-keyword">types</span><br>  const component: DefineComponent&lt;&#123;&#125;, &#123;&#125;, <span class="hljs-keyword">any</span>&gt;<br>  export <span class="hljs-keyword">default</span> component<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue-study</title>
    <link href="/posts/49502/"/>
    <url>/posts/49502/</url>
    
    <content type="html"><![CDATA[<p>Vue3 学习笔记</p><span id="more"></span><h1 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h1><p class="note note-primary">`vue` 中的响应式可以理解为 `html` 模板会随着 `js` 中属性的动态变更而动态渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button @click=<span class="hljs-string">&quot;x++&quot;</span>&gt;<br>    &#123;&#123; x &#125;&#125;<br>&lt;/button&gt;<br><br><span class="hljs-keyword">const</span> x = <span class="hljs-number">0</span><br><span class="hljs-comment">// 这时候点击 button,html 中渲染的 x 并不会变更.</span><br><span class="hljs-comment">// 如果修改为</span><br>x = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br><span class="hljs-comment">// 再点击 button,可以看到随着 js 属性的变更,html 也跟着渲染了.</span><br><br></code></pre></td></tr></table></figure><h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><p class="note note-primary">在 vue 文件中,对于 script 可以定义为 setup 视为导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">import</span> &#123;ref&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span> <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="hljs-comment">// 这样就不用在script里 显示的写导出</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> &#123;<br>      count,<br>      increment<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ref"><a href="#ref" class="headerlink" title="ref()"></a>ref()</h2><h3 id="使用-ref-定义属性"><a href="#使用-ref-定义属性" class="headerlink" title="使用 ref()定义属性"></a>使用 ref()定义属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>);<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;count++&quot;</span>&gt;</span></span><br><span class="language-xml">  &#123;&#123; count &#125;&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><br><span class="hljs-comment">// 或者这样使用在func中使用.value</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">increment</span>(<span class="hljs-params"></span>) &#123;<br>  num.<span class="hljs-property">value</span>++<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="为-ref-标注类型"><a href="#为-ref-标注类型" class="headerlink" title="为 ref()标注类型"></a>为 ref()标注类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> type &#123; <span class="hljs-title class_">Ref</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">year</span>: <span class="hljs-title class_">Ref</span>&lt;string | number&gt; = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;2020&#x27;</span>)<br><br>year.<span class="hljs-property">value</span> = <span class="hljs-number">2020</span> <span class="hljs-comment">// 成功！</span><br><br><span class="hljs-comment">// 或者这样, 在创建的时候便指定类型</span><br><span class="hljs-comment">// 得到的类型：Ref&lt;string | number&gt;</span><br><span class="hljs-comment">// const year = ref&lt;string | number&gt;(&#x27;2020&#x27;)</span><br></code></pre></td></tr></table></figure><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive()"></a>reactive()</h2><p class="note note-primary">与 ref 创建一个响应式属性一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; reactive &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">0</span> &#125;)<br><br><span class="hljs-comment">// 下面这种方式会报错,reactive并不支持基本数据类型</span><br><span class="hljs-keyword">const</span> state = <span class="hljs-title function_">reactive</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><h2 id="ref-与-reactive-区别"><a href="#ref-与-reactive-区别" class="headerlink" title="ref()与 reactive()区别"></a>ref()与 reactive()区别</h2><blockquote><p>ref()一般用与单一的基本类型对象<br>reactive()一般用于复杂的结构体<br>reactive 标注的类型获取其值的时候不用额外的使用.value,而 ref()需要.如果层级结构特别深且复杂的对象类型,使用 ref()会一直.value.value,而 reactive 不用</p></blockquote><h2 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>Q: 为什么 vue3 中一般用 const &#x3D; ref()这样创建对象,而不用 let &#x3D;ref() 这样创建对象, 而且响应式对象本身其值就是不断变化的</p><p>A: 在 Vue 3 中，通常使用 const 来创建响应式对象，如 const someVar &#x3D; ref()，而不是使用 let。这是因为在 Vue 3 中，ref() 函数返回的是一个包含响应式数据的对象，这个对象的引用是不会变化的，但对象内部的值是可以变化的。<br>当您使用 const someVar &#x3D; ref() 创建一个响应式对象时，someVar 这个变量本身的引用是不会改变的，但是您可以通过 someVar.value 来访问和修改对象内部的值。这种方式可以确保您始终操作的是同一个响应式对象。<br>如果您使用 let 来创建响应式对象，那么每次重新赋值给这个变量时，实际上是在改变这个变量的引用，而不是在修改对象内部的值。这可能会导致一些意外的行为，因为重新赋值会破坏 Vue 的响应式系统的追踪和更新机制。<br>因此，为了避免潜在的问题并确保正确的响应式行为，通常建议在 Vue 3 中使用 const 来创建响应式对象。这样可以保持对象的引用不变，同时可以通过 .value 访问和修改对象的值。</p><h2 id="computed-计算属性"><a href="#computed-计算属性" class="headerlink" title="computed() 计算属性"></a>computed() 计算属性</h2><blockquote><p>为什么要使用 computed?<br>因为 computed 具有响应式.若不这样只能使用<code>对象.属性</code>的形式,在 html 中太啰唆,<br>故使用一个函数将其属性包装起来简化 html 代码,但这个函数不具有响应式,所以需要再用 computed 将这个函数包装,<br>还有一点是 computed 有缓存,不用每一次都重新计算.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script setup&gt;<br><span class="hljs-keyword">import</span> &#123; reactive, computed &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><br><span class="hljs-keyword">const</span> author = <span class="hljs-title function_">reactive</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John Doe&#x27;</span>,<br>  <span class="hljs-attr">books</span>: [<br>    <span class="hljs-string">&#x27;Vue 2 - Advanced Guide&#x27;</span>,<br>    <span class="hljs-string">&#x27;Vue 3 - Basic Guide&#x27;</span>,<br>    <span class="hljs-string">&#x27;Vue 4 - The Mystery&#x27;</span>,<br>  ],<br>&#125;);<br><br><span class="hljs-comment">// 一个计算属性 ref</span><br><span class="hljs-keyword">const</span> publishedBooksMessage = <span class="hljs-title function_">computed</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> author.<span class="hljs-property">books</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span> ? <span class="hljs-string">&#x27;Yes&#x27;</span> : <span class="hljs-string">&#x27;No&#x27;</span>;<br>&#125;);<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Has published books:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123; publishedBooksMessage &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="hooks-生命周期钩子"><a href="#hooks-生命周期钩子" class="headerlink" title="hooks 生命周期钩子"></a>hooks 生命周期钩子</h2><p class="note note-primary">vue中有一些生命周期钩子函数,在该vue组件触发动作时,触发响应的钩子函数,如下所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; onMounted &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-title function_">onMounted</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`the component is now mounted.`</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://img.restart.vip/uPic/2024-06-11/NjtrWX.png"></p><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><h2 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h2><ul><li>全局注册</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(&#123;&#125;)<br><br>app.<span class="hljs-title function_">component</span>(<br>  <span class="hljs-comment">// 注册的名字</span><br>  <span class="hljs-string">&#x27;MyComponent&#x27;</span>,<br>  <span class="hljs-comment">// 组件的实现</span><br>  &#123;<br>    <span class="hljs-comment">/* ... */</span><br>  &#125;<br>)<br><br><span class="hljs-comment">// 或者如下</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">MyComponent</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App.vue&#x27;</span><br><br>app.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;MyComponent&#x27;</span>, <span class="hljs-title class_">MyComponent</span>)<br></code></pre></td></tr></table></figure><ul><li>局部注册</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在其他组件中,直接引入</span><br>&lt;script setup&gt;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ComponentA</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ComponentA.vue&#x27;</span><br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">ComponentA</span> /&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><blockquote><p>使用<code>&lt;component&gt;</code>标签插入一个组件,指定 is 值(<code>组件实例</code> | <code>组件名称</code>)</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> <span class="hljs-title class_">CompB</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./CompB.vue&#x27;</span></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> <span class="hljs-title class_">CompA</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./CompA.vue&#x27;</span></span><br><span class="language-javascript">  <span class="hljs-comment">// shallowRef:创建了一个CompA的浅引用</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 浅引用: 和ref不同.(ref内部会遍历下面所有的值进行刷新)</span></span><br><span class="language-javascript">  <span class="hljs-comment">// 浅引用只会响应第一层的属性,  CompA是一个vue的组件,内部层级是很深的</span></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> current = <span class="hljs-title function_">shallowRef</span>(<span class="hljs-title class_">CompA</span>)</span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> <span class="hljs-title function_">upComp</span> = (<span class="hljs-params"></span>) =&gt; (current.<span class="hljs-property">value</span> = current.<span class="hljs-property">value</span> === <span class="hljs-title class_">CompA</span> ? <span class="hljs-title class_">CompB</span> : <span class="hljs-title class_">CompA</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- current --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">component</span> <span class="hljs-attr">:is</span>=<span class="hljs-string">&quot;current&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">component</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;upComp&quot;</span>&gt;</span>切换组件<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="props-组件参数"><a href="#props-组件参数" class="headerlink" title="props 组件参数"></a>props 组件参数</h2><p class="note note-primary">props 定义了组件需要的参数,参数可以由引用该组件时,通过标签属性传递过来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>([<span class="hljs-string">&#x27;foo&#x27;</span>])<br><br><span class="hljs-comment">// 或者.在不是setup的script中</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;foo&#x27;</span>],<br><span class="hljs-title function_">setup</span>(<span class="hljs-params">props</span>) &#123;<br><span class="hljs-comment">// setup() 接收 props 作为第一个参数</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(props.<span class="hljs-property">foo</span>)<br>&#125;,<br>&#125;<br><br><span class="hljs-comment">// 父组件传入子组件参数</span><br>&lt;<span class="hljs-title class_">MyComponent</span> foo=<span class="hljs-string">&#x27;🦶&#x27;</span> /&gt;<br><br><span class="hljs-comment">// 子组件使用传入的父组件的props</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; foo &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h2 id="emit-事件"><a href="#emit-事件" class="headerlink" title="$emit 事件"></a>$emit 事件</h2><p class="note note-primary">$emit 定义了组件的事件函数,引用该组件时,可以将事件传递进组件,在组件内部调用事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在子组件中 声明暴露事件</span><br><span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&#x27;someEvent&#x27;</span>])<br><span class="hljs-comment">// 在父组件中注入事件函数</span><br>&lt;<span class="hljs-title class_">MyComponent</span> @some-event=<span class="hljs-string">&quot;callback&quot;</span> /&gt;<br><br><span class="hljs-comment">// 子组件中使用事件:</span><br><span class="hljs-comment">// 1. 在html中的@click中使用$emit标签</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;$emit(&#x27;someEvent&#x27;)&quot;</span>&gt;</span>Click Me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="hljs-comment">// 2. 可以声明式使用事件</span><br><span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&#x27;someEvent&#x27;</span>])<br><span class="hljs-comment">// 调用事件</span><br><span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;someEvent&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="v-model-组件-v-model"><a href="#v-model-组件-v-model" class="headerlink" title="v-model 组件 v-model"></a>v-model 组件 v-model</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在子组件中,可以生命一个defineModel()一个响应式属性</span><br><span class="hljs-keyword">const</span> model = <span class="hljs-title function_">defineModel</span>()<br><span class="hljs-comment">// 在父组建中,使用v-model 传入一个属性到子组件中去</span><br>&lt;<span class="hljs-title class_">Child</span> v-model=<span class="hljs-string">&quot;countModel&quot;</span> /&gt;<br><span class="hljs-keyword">const</span> countModel = <span class="hljs-title function_">ref</span>(<span class="hljs-number">1</span>)<br><br></code></pre></td></tr></table></figure><p class="note note-primary">有了props和emit为什么还要有一个v-model</p><blockquote><p>想象一个场景:子组件要修改父组件的值,并通知父组件<br>那么每当子组件将其值变更时,都要额外调一次父组件的函数. (这种操作是逆向的.)<br>如果使用 v-model.就可以解决这个问题(转逆向反调用为正向监听)</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 不使用v-model 需要在子组件这样写 --&gt;</span><br><span class="hljs-comment">&lt;!-- Child.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>([<span class="hljs-string">&#x27;modelValue&#x27;</span>])</span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&#x27;update:modelValue&#x27;</span>])</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">    <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;props.modelValue&quot;</span></span><br><span class="hljs-tag">    @<span class="hljs-attr">input</span>=<span class="hljs-string">&quot;emit(&#x27;update:modelValue&#x27;, $event.target.value)&quot;</span></span><br><span class="hljs-tag">  /&gt;</span><br>  <span class="hljs-comment">&lt;!-- ↑ 当modelValue变更,触发 update:modelValue 事件--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 使用v-model 就直接可以在父组件中这样写. --&gt;</span><br><span class="hljs-comment">&lt;!-- Parent.vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">:modelValue</span>=<span class="hljs-string">&quot;foo&quot;</span> @<span class="hljs-attr">update:modelValue</span>=<span class="hljs-string">&quot;(newValue) =&gt; (foo = newValue)&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Q-A-1"><a href="#Q-A-1" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p><img src="http://img.restart.vip/photo/2024/06/12INGcd3.png"></p><h2 id="多个v-model的绑定"><a href="#多个v-model的绑定" class="headerlink" title="多个v-model的绑定"></a>多个<code>v-model</code>的绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">UserName</span> <span class="hljs-attr">v-model:first-name</span>=<span class="hljs-string">&quot;first&quot;</span> <span class="hljs-attr">v-model:last-name</span>=<span class="hljs-string">&quot;last&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> firstName = <span class="hljs-title function_">defineModel</span>(<span class="hljs-string">&#x27;firstName&#x27;</span>)</span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> lastName = <span class="hljs-title function_">defineModel</span>(<span class="hljs-string">&#x27;lastName&#x27;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><h2 id="Prop-逐级透传问题-​"><a href="#Prop-逐级透传问题-​" class="headerlink" title="Prop 逐级透传问题 ​"></a>Prop 逐级透传问题 ​</h2><blockquote><p>通常情况下，当我们需要从父组件向子组件传递数据时，会使用 props。想象一下这样的结构：有一些多层级嵌套的组件，形成了一棵巨大的组件树，而某个深层的子组件需要一个较远的祖先组件中的部分数据。在这种情况下，如果仅使用 props 则必须将其沿着组件链逐级传递下去，这会非常麻烦：</p></blockquote><p><img src="https://img.restart.vip/uPic/2024-06-11/EbJLPK.png"></p><p>注意，虽然这里的 <Footer> 组件可能根本不关心这些 props，但为了使 <DeepChild> 能访问到它们，仍然需要定义并向下传递。如果组件链路非常长，可能会影响到更多这条路上的组件。这一问题被称为“prop 逐级透传”，显然是我们希望尽量避免的情况。</p><p>provide 和 inject 可以帮助我们解决这一问题 [1]。一个父组件相对于其所有的后代组件，会作为依赖提供者。任何后代的组件树，无论层级有多深，都可以注入由父组件提供给整条链路的依赖。</p><h3 id="Provide-提供"><a href="#Provide-提供" class="headerlink" title="Provide (提供)"></a>Provide (提供)</h3><p>要为组件后代提供数据，需要使用到 provide() 函数：</p><blockquote><p>provide() 函数接收两个参数。第一个参数被称为注入名，可以是一个字符串或是一个 Symbol。后代组件会用注入名来查找期望注入的值。一个组件可以多次调用 provide()，使用不同的注入名，注入不同的依赖值。<br>第二个参数是提供的值，值可以是任意类型，包括响应式的状态，比如一个 ref</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> &#123; provide, ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="language-javascript">  <span class="hljs-title function_">provide</span>(<span class="hljs-comment">/* 注入名 */</span> <span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-comment">/* 值 */</span> <span class="hljs-string">&#x27;hello!&#x27;</span>)</span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> count = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)</span><br><span class="language-javascript">  <span class="hljs-title function_">provide</span>(<span class="hljs-string">&#x27;key&#x27;</span>, count)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Inject-注入"><a href="#Inject-注入" class="headerlink" title="Inject (注入)"></a>Inject (注入)</h3><p>要注入上层组件提供的数据，需使用 inject() 函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">import</span> &#123; inject &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> message = <span class="hljs-title function_">inject</span>(<span class="hljs-string">&#x27;message&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 如果没有祖先组件提供 &quot;message&quot;</span></span><br><span class="language-javascript">  <span class="hljs-comment">// `value` 会是 &quot;这是默认值&quot;</span></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> value = <span class="hljs-title function_">inject</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-string">&#x27;这是默认值&#x27;</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="透传-attr"><a href="#透传-attr" class="headerlink" title="透传(attr)"></a>透传(attr)</h2> <p class="note note-primary">透传 attribute指的是传递给一个组件，却没有被该组件声明为 props 或 emits 的 attribute 或者 v-on 事件监听器。最常见的例子就是 class、style 和 id。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 子组件获取父组件透传的attr</span><br><span class="hljs-keyword">const</span> attrs = <span class="hljs-title function_">useAttrs</span>()<br><br><span class="hljs-comment">// 并没有将 class 声明为一个它所接受的 prop，所以 class 被视作透传 attribute，自动透传到了 &lt;MyButton&gt; 的根元素上。</span><br>&lt;<span class="hljs-title class_">MyButton</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&#x27;large&#x27;</span> /&gt;<br></code></pre></td></tr></table></figure><h2 id="插槽-Slots"><a href="#插槽-Slots" class="headerlink" title="插槽 Slots"></a>插槽 Slots</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 子组件(插槽出口) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  Hello World<br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这个就是插槽 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 父组件(插槽入口) --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 这里的内容会渲染到子组件定义的&lt;slot&gt;中 --&gt;</span><br>  插槽内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1> <p class="note note-primary">除了 Vue 内置的一系列指令 (比如 v-model 或 v-show) 之外，Vue 还允许你注册自定义的指令 (Custom Directives)。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 在模板中启用 v-focus</span></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> vFocus = &#123;</span><br><span class="language-javascript">    <span class="hljs-attr">mounted</span>: <span class="hljs-function">(<span class="hljs-params">el</span>) =&gt;</span> el.<span class="hljs-title function_">focus</span>()</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- 光标focus --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-focus</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>将一个自定义指令全局注册到应用层级也是一种常见的做法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(&#123;&#125;)<br><br><span class="hljs-comment">// 使 v-focus 在所有组件中都可用</span><br>app.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;focus&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">el, binding, vnode, prevVnode</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">/* ... */</span><br>&#125;)<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">el：指令绑定到的元素。这可以用于直接操作 DOM。</span><br><span class="hljs-comment">binding：一个对象，包含以下属性。</span><br><span class="hljs-comment">value：传递给指令的值。例如在 v-my-directive=&quot;1 + 1&quot; 中，值是 2。</span><br><span class="hljs-comment">oldValue：之前的值，仅在 beforeUpdate 和 updated 中可用。无论值是否更改，它都可用。</span><br><span class="hljs-comment">arg：传递给指令的参数 (如果有的话)。例如在 v-my-directive:foo 中，参数是 &quot;foo&quot;。</span><br><span class="hljs-comment">modifiers：一个包含修饰符的对象 (如果有的话)。例如在 v-my-directive.foo.bar 中，修饰符对象是 &#123; foo: true, bar: true &#125;。</span><br><span class="hljs-comment">instance：使用该指令的组件实例。</span><br><span class="hljs-comment">dir：指令的定义对象。</span><br><span class="hljs-comment">vnode：代表绑定元素的底层 VNode。</span><br><span class="hljs-comment">prevVnode：代表之前的渲染中指令所绑定元素的 VNode。仅在 beforeUpdate 和 updated 钩子中可用。</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 一般写法,直接使用一个函数即可,</span><br>app.<span class="hljs-title function_">directive</span>(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">el, binding</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 这会在 `mounted` 和 `updated` 时都调用</span><br>  el.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = binding.<span class="hljs-property">value</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p><img src="http://img.restart.vip/photo/2024/06/12ZvaFFy.png"></p><h2 id="默认组件"><a href="#默认组件" class="headerlink" title="默认组件"></a><a href="https://cn.vuejs.org/guide/built-ins/transition.html">默认组件</a></h2><h3 id="Transition"><a href="#Transition" class="headerlink" title="Transition"></a>Transition</h3><p class="note note-primary">Transition 是一个过渡动画效果组件</p>  <pre><code class="html">&lt;template&gt;    &lt;button @click=&quot;show = !show&quot;&gt;Toggle&lt;/button&gt;    &lt;Transition&gt;    &lt;p v-if=&quot;show&quot;&gt;hello&lt;/p&gt;    &lt;/Transition&gt;&lt;/template&gt;&lt;style&gt;/*  下面class属性是Transition组件内置的 */.v-enter-active,.v-leave-active &#123;  transition: opacity 0.5s ease;&#125;.v-enter-from,.v-leave-to &#123;  opacity: 0;&#125;&lt;/style&gt;<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><br><span class="hljs-comment">### TransitionGroup</span><br><br>&lt;<span class="hljs-string">p</span> <span class="hljs-string">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;<span class="hljs-string">TransitionGroup</span> 配合<span class="hljs-string">v-for</span>使用&lt;/<span class="hljs-string">p</span>&gt;<br><br>```<span class="hljs-string">vue</span><br>&lt;<span class="hljs-string">template</span>&gt;<br>&lt;<span class="hljs-string">TransitionGroup</span> <span class="hljs-string">name</span>=<span class="hljs-string">&quot;list&quot;</span> <span class="hljs-string">tag</span>=<span class="hljs-string">&quot;ul&quot;</span>&gt;<br>&lt;<span class="hljs-string">li</span> <span class="hljs-string">v-for</span>=<span class="hljs-string">&quot;item in items&quot;</span> :<span class="hljs-string">key</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;<br>&#123;&#123; <span class="hljs-string">item</span> &#125;&#125;<br>&lt;/<span class="hljs-string">li</span>&gt;<br>&lt;/<span class="hljs-string">TransitionGroup</span>&gt;<br>&lt;/<span class="hljs-string">template</span>&gt;<br><br>&lt;<span class="hljs-string">style</span>&gt;<br>.<span class="hljs-built_in">list-enter-active,</span><br>.<span class="hljs-built_in">list-leave-active</span> &#123;<br>  <span class="hljs-string">transition</span>: <span class="hljs-string">all</span> <span class="hljs-string">0</span>.<span class="hljs-string">5s</span> <span class="hljs-string">ease</span>;<br>&#125;<br>.<span class="hljs-built_in">list-enter-from,</span><br>.<span class="hljs-built_in">list-leave-to</span> &#123;<br>  <span class="hljs-string">opacity</span>: <span class="hljs-string">0</span>;<br>  <span class="hljs-string">transform</span>: <span class="hljs-string">translateX</span>(<span class="hljs-string">30px</span>);<br>&#125;<br>&lt;/<span class="hljs-string">style</span>&gt;<br></code></pre></td></tr></table></figure>### KeepAlive</code></pre>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang学习笔记</title>
    <link href="/posts/52807/"/>
    <url>/posts/52807/</url>
    
    <content type="html"><![CDATA[<p>Golang 基础</p><span id="more"></span><h2 id="基本类型定义"><a href="#基本类型定义" class="headerlink" title="基本类型定义"></a>基本类型定义</h2><div class="note note-info">            <p>变量的定义</p>          </div><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// 使用`var`定义一个变量</span><br><span class="hljs-keyword">var</span> t <span class="hljs-type">string</span><br><span class="hljs-comment">// 使用`var`定义变量并赋值</span><br><span class="hljs-keyword">var</span> ti sring = <span class="hljs-string">&#x27;time&#x27;</span><br><span class="hljs-comment">// 当使用`var` 定义变量时,变量的类型可以省略</span><br><span class="hljs-keyword">var</span> tu = <span class="hljs-number">2</span><br><br><span class="hljs-comment">// 上边的变量定义语句一般不常用,最常用的是如下定义</span><br>i := <span class="hljs-number">1</span>  <span class="hljs-comment">// 定义了一个i的变量并赋值为1(为int类型)</span><br><br><span class="hljs-comment">// 一次性定义多个变量</span><br>a,b,c := <span class="hljs-number">1</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">3</span>  <span class="hljs-comment">// 定义了a,b,c 三个变量为 1(int),&quot;2&quot;(string),3(int)</span><br><br><br><span class="hljs-comment">// 常量的定义,一般在 func 外</span><br><span class="hljs-keyword">const</span> _a = <span class="hljs-number">1</span><br><span class="hljs-comment">// 一起定义</span><br><span class="hljs-keyword">const</span> (<br><span class="hljs-comment">// iota 从0开始,往下不断+1</span><br>_b = <span class="hljs-literal">iota</span>  <span class="hljs-comment">// _b = 0</span><br>_c   <span class="hljs-comment">// _c = 1</span><br>_d   <span class="hljs-comment">// _d = 2</span><br>)<br><br></code></pre></td></tr></table></figure><div class="note note-info">            <p>指针的定义</p>          </div><blockquote><p>Golang 中的赋值如果不特殊指定指针,都为值传递:即拷贝源变量的值赋值给目标变量</p></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fun11</span><span class="hljs-params">()</span></span> &#123;<br>a,b,c := <span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;C&quot;</span><br><br>e,f,g := &amp;a, &amp;b, &amp;c<br><br><span class="hljs-keyword">var</span> x = a<br>x = <span class="hljs-string">&quot;ABC&quot;</span><br><br>fmt.Println(<span class="hljs-string">&quot;获取变量的指针: a:&quot;</span>, &amp;a, <span class="hljs-string">&quot;,b:&quot;</span>, &amp;b, <span class="hljs-string">&quot;, c:&quot;</span>, &amp;c)<br>fmt.Println(<span class="hljs-string">&quot;获取指针的值: a:&quot;</span>, *e, <span class="hljs-string">&quot;,b:&quot;</span>, *f, <span class="hljs-string">&quot;,c:&quot;</span>, *g)<br><br><span class="hljs-comment">// x: ABC , a= A (如果是结构体,随x的改变,a也不会改变,除非 x = *a)</span><br>fmt.Println(<span class="hljs-string">&quot;x:&quot;</span>, x, <span class="hljs-string">&quot;,a:&quot;</span>, a)<br><br><span class="hljs-comment">// 指向指针的指针</span><br>ptr := <span class="hljs-number">100</span><br>pptr := &amp;ptr<br>ppptr := &amp;pptr<br>fmt.Print(<span class="hljs-string">&quot;ptr = &quot;</span>, ptr, <span class="hljs-string">&quot;, pptr = &quot;</span>, *pptr, <span class="hljs-string">&quot;, ppptr = &quot;</span>, **ppptr)<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>函数的定义</p>          </div><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// 一般函数定义</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">func1</span><span class="hljs-params">(str <span class="hljs-type">string</span>,num <span class="hljs-type">int</span>)</span></span>(i <span class="hljs-type">int</span>, j <span class="hljs-type">int</span>)&#123;<br><span class="hljs-comment">// str , num 声明了两func1函数中的入参</span><br><span class="hljs-comment">// 后面的(int) 声明了函数的出参(出参可以有两个)</span><br>fmt.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;str:&quot;</span>,str)<br><br><span class="hljs-comment">// 函数定义了出参,必须return值</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span><br>&#125;<br><br><span class="hljs-comment">// retrun不用返回对象.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">func2</span><span class="hljs-params">(str <span class="hljs-type">string</span>,num <span class="hljs-type">int</span>)</span></span>(i <span class="hljs-type">int</span>, j <span class="hljs-type">int</span>)&#123;<br><span class="hljs-comment">// 在golang中,变量只要被声明定义,改变量必须被其他地方引用,否则无法编译通过</span><br>fmt.Println(str,<span class="hljs-string">&quot;,&quot;</span>,num)<br>i = <span class="hljs-number">1</span><br>j = <span class="hljs-number">2</span><br><span class="hljs-comment">// 由于函数定义了返回值为 i,j , 实际上i,j已经被声明了,而且在上面有赋值,故此处return不用返回i,j</span><br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 入参出参可以为一个函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fun3</span><span class="hljs-params">(fun1 <span class="hljs-keyword">func</span>(s <span class="hljs-type">string</span>)</span></span>) <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(p ...<span class="hljs-type">int</span>)</span></span>(sum <span class="hljs-type">int</span>) &#123;<br><span class="hljs-comment">// 执行 fun1</span><br>fun1(<span class="hljs-string">&quot;hello&quot;</span>)<br><br><span class="hljs-comment">// 返回一个求和函数</span><br><span class="hljs-comment">// 这里使用到了...的参数定义形式,表示可以有多个入参int,</span><br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(p ...<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>total := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _,n := <span class="hljs-keyword">range</span> p &#123;<br>total += n<br>&#125;<br><span class="hljs-keyword">return</span> total<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 使用func3中返回的函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fun4</span><span class="hljs-params">()</span></span>&#123;<br>f := fun3(<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span>&#123;<br>fmt.Println(s)<br>&#125;)<br><br><span class="hljs-comment">// func3 中的入参为 ...int</span><br><span class="hljs-comment">// 这里的传参为 int... 表示将数据/切片转换为多个参数的形式</span><br>nums := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br>f(nums...)<br>&#125;<br><br><span class="hljs-comment">// 基于struct(结构体)的函数定义.</span><br><br><span class="hljs-comment">// 先定义一个结构体A</span><br><span class="hljs-keyword">type</span>  Student <span class="hljs-keyword">struct</span>&#123;<br>name <span class="hljs-type">string</span><br>&#125;<br><span class="hljs-comment">// 定义了结构体Student的一个函数</span><br><span class="hljs-comment">// 与普通函数不同的是 在函数名前 定义了一个结构体</span><br><span class="hljs-comment">// (a *Student) 可以为 (Student) 或者  (a Student)</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(a *Student)</span></span> <span class="hljs-built_in">println</span>(s <span class="hljs-type">string</span>)(r <span class="hljs-type">string</span>)&#123;<br>fmt.Println(s)<br>fmt.Println(a.name)<br>r = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-comment">// 调用上述结构体方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">func5</span><span class="hljs-params">()</span></span>&#123;<br>s := Student&#123;name:<span class="hljs-string">&quot;Jhone&quot;</span>&#125;<br><span class="hljs-comment">// 使用结构体.的形式调用其函数</span><br>r := s.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;say hello to&quot;</span>)<br>fmt.Println(r)<br>&#125;<br><br></code></pre></td></tr></table></figure><div class="note note-info">            <p>类型的定义与创建</p>          </div><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">// 定义一个接口</span><br><span class="hljs-keyword">type</span> Bank <span class="hljs-keyword">interface</span>&#123;<br>addMoney(m <span class="hljs-type">int</span>)<br>subMoney(m <span class="hljs-type">int</span>) <span class="hljs-type">error</span><br>&#125;<br><br><span class="hljs-comment">// 定义一个结构体</span><br><span class="hljs-keyword">type</span> ICBC <span class="hljs-keyword">struct</span>&#123;<br>m <span class="hljs-type">int</span> <span class="hljs-comment">// 钱包金额</span><br>&#125;<br><br><span class="hljs-comment">// 定义一个别名 (非常重要)</span><br><span class="hljs-keyword">type</span> MAP <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span><br><br><span class="hljs-comment">// 实现接口</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(i *ICBC)</span></span>addMoney(m <span class="hljs-type">int</span>)&#123;<br>i.m += m<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(i *ICBC)</span></span>subMoney(m <span class="hljs-type">int</span>) <span class="hljs-type">error</span>&#123;<br><span class="hljs-keyword">if</span> money := i.m - m; money&lt;<span class="hljs-number">0</span>&#123;<br>_ = errors.New(<span class="hljs-string">&quot;余额不足&quot;</span>)<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>i.m = money<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-comment">//--------类型的创建---------</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewICBC</span><span class="hljs-params">()</span></span>*ICBC&#123;<br><span class="hljs-keyword">return</span> &amp;ICBC&#123;<br>m : <span class="hljs-number">0</span>,<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// ---- 别名的使用 ----------</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fun6</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">// 定义一个函数,使用别名MAP做入参</span><br><span class="hljs-keyword">var</span> f = <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(m MAP)</span></span>(sum <span class="hljs-type">int</span>)&#123;<br>sum = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> m &#123;<br>sum += v<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// 定义一个map</span><br>ms := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br><span class="hljs-comment">// ms := make(MAP)</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>ms[strconv.Itoa(i)] = i<br>&#125;<br><br><span class="hljs-comment">// 调用函数</span><br>f(ms)<br>&#125;<br><br><span class="hljs-comment">// 别名可以声明任何东西(类型,结构体,接口,函数)</span><br><br><span class="hljs-comment">// 别名接口</span><br><span class="hljs-keyword">type</span> _BANK = Bank<br><span class="hljs-comment">// 别名结构体</span><br><span class="hljs-keyword">type</span> _ICBC = ICBC<br><span class="hljs-comment">// 别名函数</span><br><span class="hljs-keyword">var</span>  _NB = NewIcbc<br><br></code></pre></td></tr></table></figure><div class="note note-info">            <p>切片(slice)的定义</p>          </div><blockquote><p>数组必须指定len,且len不可变.故有了slice,slice的len可以自由变换.slice的功能与java中的List类似</p></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fun11</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">// 创建一个数组</span><br>    <span class="hljs-keyword">var</span> arr = [<span class="hljs-number">3</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br>    fmt.Println(<span class="hljs-string">&quot;原始数组长度：&quot;</span>, <span class="hljs-built_in">len</span>(arr))<br><br>    <span class="hljs-comment">// 尝试对数组进行扩容</span><br>    <span class="hljs-comment">// arr[:] 这种写法表示 以arr数组创建了一个切片</span><br>    <span class="hljs-comment">// arr[1:] == [2,3]     arr[:1] == [1,2]  arr[:] == [1,2,3]</span><br>    arrSlice := <span class="hljs-built_in">append</span>(arr[:], <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>    fmt.Println(<span class="hljs-string">&quot;尝试扩容后的数组长度：&quot;</span>, <span class="hljs-built_in">len</span>(arr))<br>    fmt.Println(<span class="hljs-string">&quot;扩容后的切片长度：&quot;</span>, <span class="hljs-built_in">len</span>(arrSlice))<br><br>    <span class="hljs-comment">// 创建一个切片,一般通过make()创建</span><br>    <span class="hljs-keyword">var</span> sli = <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">3</span>)<br>    fmt.Println(<span class="hljs-string">&quot;原始切片长度：&quot;</span>, <span class="hljs-built_in">len</span>(sli))<br><br>    <span class="hljs-comment">// 对切片进行扩容</span><br>    sli = <span class="hljs-built_in">append</span>(sli, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>    fmt.Println(<span class="hljs-string">&quot;扩容后的切片长度：&quot;</span>, <span class="hljs-built_in">len</span>(sli))<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>哈希字典(map)的定义</p>          </div><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fun12</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">// 创建一个map, key为string类型,value为int类型</span><br>    m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br>    <span class="hljs-comment">// 可以指定初始大小为10</span><br>    mm := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>,<span class="hljs-number">10</span>)<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>通道(channel)的定义</p>          </div><blockquote><p>通道: Channel 是一种可以让一个协程发送数据并让另一个协程接收数据的数据结构。你可以把它想象成一个在协程之间传递数据的管道。这种机制可以让你在不同的协程之间共享数据，而无需使用互斥锁或其他同步机制。<br>可以理解为一个数据存储的缓冲区.可以向这个缓冲区存数据与取数据.</p></blockquote><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> 13<span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">// 创建一个缓冲区,若不指定大小,c必须同时有生产者与消费者,不然即会死锁,</span><br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br><span class="hljs-comment">// 这个channel中可以存10个数据</span><br>cc := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>,<span class="hljs-number">10</span>)<br><br><span class="hljs-comment">// 当执直接执行下面语句会出错,原因,在下面这行代码中由于c没有消费者,所以一直阻塞住了</span><br><span class="hljs-comment">// c &lt;- 1</span><br><span class="hljs-comment">// 但是这样就不会死锁:因为使用go开启了一个协程后,c同时有生产者与消费者了.</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">// 向c中存值</span><br>c &lt;- <span class="hljs-number">1</span><br>&#125;()<br><br><span class="hljs-comment">// 向缓冲区取值</span><br>fmt.Println(<span class="hljs-string">&quot;get c :&quot;</span>,&lt;-c)<br><br><span class="hljs-comment">// cc 由于初始大小为10,故不会产生阻塞.</span><br>cc &lt;<span class="hljs-number">-2</span><br>fmt.Println(<span class="hljs-string">&quot;get c :&quot;</span>,&lt;-cc)<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><blockquote><p>学会了变量,函数,结构体,接口..的定义,再来讲一讲其命名规则</p></blockquote><ol><li>大小写敏感,如<code>myVariable</code>与<code>MyVariable</code>是两个不同变量</li><li><span class="label label-danger">首字母大写,全局可见(视为导出).首字母小写,仅同包下可见</span><code>可见即可以调用</code></li><li>标识符一般以<code>_</code>开头,如<code>_f : true</code></li><li>常量均为大写字母,如<code>const MAX_LIMIT = 100</code></li><li>相同包下的go文件,可以任意相互调用: 在不同的.go文件中,直接调用其他.go文件中的函数,或使用其定义的外部变量</li></ol><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ge10</span><span class="hljs-params">(i <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> i &gt; <span class="hljs-number">10</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">num</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">return</span> rand.Intn(<span class="hljs-number">20</span>)<br>&#125;<br><br><span class="hljs-comment">// if 语句</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fun20</span><span class="hljs-params">()</span></span> &#123;<br>z := num()<br>fmt.Println(<span class="hljs-string">&quot;z: &quot;</span>, z)<br><span class="hljs-keyword">if</span> ge10(z) &#123;<br>fmt.Println(<span class="hljs-string">&quot;1&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">if</span> n := num(); n &gt; <span class="hljs-number">10</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;1&quot;</span>)<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">// for循环语句</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fun21</span><span class="hljs-params">()</span></span>&#123;<br>    sli := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>,<span class="hljs-number">10</span>)<br><span class="hljs-comment">// fori 循环</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>sli[i] = i<br>&#125;<br>fmt.Println(sli)<br><br>sum := <span class="hljs-number">0</span><br><span class="hljs-comment">// for range 循环</span><br><span class="hljs-keyword">for</span> _, i := <span class="hljs-keyword">range</span> sli &#123;<br>sum += i<br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;sum:&quot;</span>, sum)<br><br><span class="hljs-comment">// while</span><br>start := time.Now()<br><span class="hljs-keyword">for</span> &#123;<br>fmt.Println(<span class="hljs-number">1</span>)<br><span class="hljs-comment">// 如果已经过去了5秒钟，就退出循环</span><br><span class="hljs-keyword">if</span> time.Since(start) &gt; <span class="hljs-number">5</span>*time.Second &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// select 语句</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fun22</span><span class="hljs-params">()</span></span>&#123;<br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>,<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br>c &lt;- <span class="hljs-number">1</span><br>&#125;()<br><br><span class="hljs-keyword">switch</span> &lt;-c &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>fmt.Println(<span class="hljs-string">&quot;111&quot;</span>)<br><span class="hljs-comment">// golang 中的switch 不需要break语句,若match,直接return</span><br><span class="hljs-comment">//break</span><br><br><span class="hljs-comment">// fallthrough : 继续往下执行</span><br><span class="hljs-keyword">fallthrough</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>fmt.Println(<span class="hljs-string">&quot;222&quot;</span>)<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>fmt.Println(<span class="hljs-string">&quot;3333&quot;</span>)<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span><br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">// goto 语句</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fun23</span><span class="hljs-params">()</span></span>&#123;<br>a := <span class="hljs-number">0</span><br>i := <span class="hljs-number">0</span><br>L:<br>a += rand.Intn(<span class="hljs-number">30</span>)<br><span class="hljs-keyword">if</span> a &lt; <span class="hljs-number">200</span> &#123;<br>i++<br><span class="hljs-keyword">goto</span> L<br>&#125;<br><br>fmt.Println(<span class="hljs-string">&quot;循环次数:&quot;</span>, i, <span class="hljs-string">&quot;, a:&quot;</span>, a)<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sublime插件</title>
    <link href="/posts/11602/"/>
    <url>/posts/11602/</url>
    
    <content type="html"><![CDATA[<p>Sublime 插件安装</p><p>现已不用 Sublime,用 VsCode 平替</p><span id="more"></span><p class="note note-primary">Formatter</p><blockquote><p><a href="link:https://github.com/bitst0rm-pub/Formatter">Formatter</a> 是一个格式化插件，集成了市面上大部分格式化插件为一体</p></blockquote><p class="note note-info">插件安装</p><ul><li>command+shift+p</li><li>键入 install package</li><li>键入 Formatter 安装</li></ul><p class="note note-info">插件配置</p><blockquote><p>由于 Formatter 是一个插件合集，它自身并不提供格式化的功能，所有格式化的功能需要额外安装其他插件。额外的格式化插件使用 node 安装，并不是在 sublime 中安装的格式化插件。</p></blockquote><p><code>一些常用的格式化插件</code></p><p><img src="http://img.restart.vip/uPic/2024-06-09/884ooj.png"></p><p class="note note-warning">额外插件安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">prettier (html,html5,vue,css,ts...format)</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install -g prettier</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">golang format</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install -g gofmt</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">压缩 html</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install -g html-minifier</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">压缩json</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install -g prettydiff</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">sql format</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm install -g sql-formatter</span><br></code></pre></td></tr></table></figure><p>安装好了格式化插件之后，再使用 Formatter 进行配置,打开:</p><blockquote><ol><li>Setting-&gt;PackageSetting-&gt;Formatter-&gt;Settings</li><li>左侧是默认配置，右侧可以将左侧配置覆盖</li><li>插件配置：<code>formatters</code>，修改插件地址：<code>executable_path</code>为刚才安装的地址（可以在终端使用 <code>$ which prettier # prettier 为插件名称</code>命令查询插件地址）</li><li>自动格式化：<code>auto_format</code>,配置不同的文件格式对应的不同格式化插件信息</li><li>其他相关配置可参照左边的配置模板，进行选择性引用</li></ol></blockquote><p>配置页面:<br><img src="https://img.restart.vip/uPic/2024-06-09/V5nLI1.png"></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-28ab9646" role="button" aria-expanded="false" aria-controls="collapse-28ab9646">        <div class="fold-arrow">▶</div>配置Json      </div>      <div class="fold-collapse collapse" id="collapse-28ab9646">        <div class="fold-content">          <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;open_console_on_failure&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;format_on_unique&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;htmlminifier&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;xml&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;html&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;html5&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;auto_format&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;config&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;format_on_save&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;format_on_paste&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;new_file_on_format&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;json&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clangformat&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;java&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clangformat&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;go&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gofmt&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;html&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prettier&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;html5&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prettier&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;js&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prettier&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;jsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prettier&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;ts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prettier&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;tsx&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prettier&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;less&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prettier&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;scss&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prettier&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;css&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prettier&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;vue&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prettier&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;yaml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;prettier&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;sql&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sqlformatter&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;xml&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;formatters&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;prettydiffmin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;executable_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><span class="hljs-string">&quot;/Users/xjc980127/.nvm/versions/node/v22.2.0/bin/prettydiff&quot;</span><br><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;htmltidy&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;executable_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;/usr/bin/tidy&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;sqlformatter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;executable_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><span class="hljs-string">&quot;/Users/xjc980127/.nvm/versions/node/v22.2.0/bin/sql-formatter&quot;</span><br><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;gofmt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;executable_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;/opt/homebrew/bin/gofmt&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;prettier&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;executable_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><span class="hljs-string">&quot;/Users/xjc980127/.nvm/versions/node/v22.2.0/bin/prettier&quot;</span><br><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;clangformat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;executable_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;/opt/homebrew/bin/clang-format&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;htmlminifier&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;enable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;executable_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br><span class="hljs-string">&quot;/Users/xjc980127/.nvm/versions/node/v22.2.0/bin/html-minifier&quot;</span><br><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><p class="note note-primary">使用Formatter</p><ol><li>由于配置了<code>auto_format</code>，相应的格式文件保存时会自动 format</li><li>手动格式化：在文件中右键 clike-&gt;Formatter-&gt;选择格式化，可以选择的插件为<code>formatters</code>中<code>enable</code>为 true 的插件,一般 json,html 压缩时用手动格式化插件（prettydiffmin）</li></ol><p class="note note-primary">补充</p><p><span class="label label-primary">以上格式化插件没有找到 xml 格式化的相关子插件，可以用<code>Indent XML</code>代替，直接在 sublime 中安装即可<br></span><br>安装: command+shift+p -&gt; install Package -&gt; seach -&gt; Indent XML</p><p>使用: Sublime 选项卡-&gt;Selection-&gt;Format-&gt;IdentXML 或者使用快捷键 cmmond+K,cmmond+F （联合快捷键）</p><p class="note note-primary">其他的插件</p><ul><li>Package Control: 这是 Sublime Text 的包管理器，安装这个插件后，你可以方便地安装、更新和移除其他的插件。</li><li>BracketHighlighter: 这个插件可以匹配括号、引号和 HTML 标签，使得你可以更容易地看出代码的结构。</li><li>ColorHighlighter: 这个插件可以高亮显示<br>CSS 中的颜色代码，使得你可以直观地看出颜色代码对应的颜色。</li><li>SublimeLinter: 这是一个代码检查框架，可以帮助你发现代码中的错误和不规范的地方。</li><li>Emmet: 这个插件提供了一种快速编写 HTML 和 CSS 的方法，大大提高了编程效率。</li><li>AutoFileName: 这个插件可以自动补全文件名，让你在编写代码时更加方便。</li><li>GitGutter: 这个插件可以在编辑器的侧边栏显示 Git 的修改记录，让你可以更方便地查看和管理代码的版本。</li><li>SideBarEnhancements: 提供了更丰富的侧边栏（文件浏览）功能，如新建文件&#x2F;目录，编辑，打开&#x2F;运行，显示在文件管理器中，复制路径，复制&#x2F;剪切，粘贴&#x2F;- 复制到，重命名，移动，删除等。</li><li>AdvancedNewFile: 这个插件可以方便你快速创建新的文件和目录，你可以直接在输入框中输入路径和文件名。</li><li>DocBlockr: 这个插件可以帮助你快速生成文档注释，支持多种编程语言。</li><li>Markdown Preview: 这个插件可以让你在浏览器中预览 Markdown 文件，非常适合写 Markdown 文档的用户。</li><li>A File Icon: 这个插件可以为文件和目录提供美观的图标，使得你更容易区分不同类型的文件。</li></ul>]]></content>
    
    
    <categories>
      
      <category>分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《爱的艺术》</title>
    <link href="/posts/26485/"/>
    <url>/posts/26485/</url>
    
    <content type="html"><![CDATA[<p>《爱的艺术》是德裔美籍心理学家和哲学家、法兰克福学派重要成员艾里希-弗洛姆最著名的作品，自1956年出版至今已被翻译成32种文字，在全世界畅销不衰，被誉为当代爱的艺术理论专著最著名的作品。</p><p>在这本书中，弗洛姆认为，爱情不是一种与人的成熟程度无关，只需要投入身心的感情。如果不努力发展自己的全部人格并以此达到一种创造倾向性，那么每种爱的试图都会失败，如果没有爱他人的能力，如果不能真正谦恭地、勇敢地、真诚地和有纪律地爱他人，那么人们在自己的爱情生活中也永远得不到满足。</p><p>弗洛姆进而提出，爱是一门艺术，要求想要掌握这门艺术的人有这方面的知识并付出努力。在这里，爱不仅仅是狭隘的男女爱情，也并非通过磨练增进技巧即可获得。爱是人格整体的展现，要发展爱的能力，就需要努力发展自己的人格，并朝着有益的目标迈进。</p><span id="more"></span><h1 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h1><p><a href="https://zh.wikipedia.org/wiki/%E5%9F%83%E9%87%8C%E5%B8%8C%C2%B7%E5%BC%97%E7%BD%97%E5%A7%86">埃里希·弗罗姆</a>（德语：Erich Fromm，1900年3月23日—1980年3月18日），又译作<strong>弗洛姆</strong>，美籍德国犹太人。<a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E6%9C%AC%E4%B8%BB%E4%B9%89" title="人本主义">人本主义</a><a href="https://zh.wikipedia.org/wiki/%E5%93%B2%E5%AD%A6%E5%AE%B6" title="哲学家">哲学家</a>和<a href="https://zh.wikipedia.org/wiki/%E7%B2%BE%E7%A5%9E%E5%88%86%E6%9E%90" title="精神分析">精神分析</a><a href="https://zh.wikipedia.org/wiki/%E5%BF%83%E7%90%86%E5%AD%A6%E5%AE%B6">心理学家</a>。毕生致力修改<a href="https://zh.wikipedia.org/wiki/%E8%A5%BF%E6%A0%BC%E8%92%99%E5%BE%B7%C2%B7%E5%BC%97%E6%B4%9B%E4%BC%8A%E5%BE%B7" title="西格蒙德·弗洛伊德">弗洛伊德</a>的精神分析学说，以厘清两次<a href="https://zh.wikipedia.org/wiki/%E4%B8%96%E7%95%8C%E5%A4%A7%E6%88%B0" title="世界大战">世界大战</a>后的精神处境。他企图调和弗洛伊德的精神分析学跟<a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E6%9C%AC%E4%B8%BB%E4%B9%89" title="人本主义">人本主义</a>的学说，其思想可以说是新弗洛依德主义与<a href="https://zh.wikipedia.org/wiki/%E6%96%B0%E9%A6%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E7%BE%A9" title="新马克思主义">新马克思主义</a>的交汇。弗洛姆被尊为“精神分析社会学”的奠基者之一。</p><p>弗洛姆是<a href="https://zh.wikipedia.org/wiki/%E6%B3%95%E8%98%AD%E5%85%8B%E7%A6%8F%E5%AD%B8%E6%B4%BE" title="法兰克福学派">法兰克福学派</a>的成员，后来从德国移居美国后仍然保持与学派的联系。</p><h1 id="爱的论述"><a href="#爱的论述" class="headerlink" title="爱的论述"></a>爱的论述</h1><blockquote><p>如果不努力<code>发展自己的全部人格</code>并以此达到一种<code>创造倾向性</code>，那么每种爱的试图<code>都会失败</code>，如果没有爱他人的能力，如果不能真正<code>谦恭地、勇敢地、真诚地和有纪律地</code>爱他人，那么人们在自己的爱情生活中也<code>永远得不到满足</code>。</p></blockquote><blockquote><p><code>爱的本质是创造和培养</code></p></blockquote><blockquote><p><code>爱情是以信仰为基础的</code></p></blockquote><blockquote><p>一无所知的人什么都不爱。一无所能的人什么都不懂。</p></blockquote><blockquote><p>一切有能力爱别人的人必定也爱自己</p></blockquote><blockquote><p>只有当我爱那些与我个人利益无关的人时，我的爱情才开始发展。</p></blockquote><blockquote><p>了解和掌握爱这门艺术，能使我们感到生命的意义，感到自我的存在。在爱中我们能实现人与人之间的统一</p></blockquote><blockquote><p>爱不是一种消极的冲动情绪，而是积极追求被爱人的发展和幸福,这种追求的基础是人的爱的能力</p></blockquote><blockquote><p>人们一般会认为他们与爱人的争吵都是毁灭性的。但真相是大多数人的“冲突”实际上都是为了避免真正的冲突,这些冲突会得到澄清，会带来一种净化，从而使双方能变得更有知识，更坚强</p></blockquote><blockquote><p>大多数人认为性要求是同爱情联系在一起的，所以他们很容易得出具有迷惑性的结论：即如果两个人互相愿意占有对方的身体，他们就是互爱了性的吸引力虽然在一刹那间会造成两者结合的幻觉，但是如果没有爱情，在这次结合后留下来的只有陌生的感觉，他们之间的距离没有缩小。他们仍是一对陌生人</p></blockquote><h1 id="爱的实践"><a href="#爱的实践" class="headerlink" title="爱的实践"></a>爱的实践</h1><blockquote><p>获得爱的能力的主要条件是<code>克服自恋</code>,能否学会爱取决于人的自恋程度和能<code>不断培养自己的谦恭、客观性和理智</code></p></blockquote><blockquote><p>要发展爱的能力，就需要努力发展自己的人格并朝着有益的目标迈进</p></blockquote><blockquote><p>爱情是意志的行为，是人作的一项把全部生命交付对方的决定<br>我从我生命的本质出发去爱对方，并且去体验对方的本质</p></blockquote><blockquote><p>另外一种与实践爱的艺术不可分割的态度是积极的活动</p></blockquote><blockquote><p>爱情的积极性除了有给的要素外，还有一些其他的基本要素。这些要素是所有爱的形式共有的，那就是：<code>关心、责任心、尊重和了解</code>。</p></blockquote><blockquote><p>爱一个人就是要献出自己，而不期待得到回报，但相信自己的爱一定会唤起对方的爱。如果作为一个正在爱的人你不能把自己变成一个被人爱的人，那么你的爱情是软弱无力的，是一种不幸。<br>如果我能对一个人说：“我爱你”，我也应该可以说：“<code>我在你身上爱所有的人，爱世界，也爱我自己</code>。</p></blockquote><h1 id="ELSE"><a href="#ELSE" class="headerlink" title="ELSE"></a>ELSE</h1><blockquote><p><code>能进行客观思考的能力就是理智，以理智为基础的感情是谦恭。</code>我们只有摆脱了童年时代妄图得到全知、全能的幻想，才能有客观性和运用自己的理智</p></blockquote><blockquote><p>要求有纪律。如果没有纪律，我将会一事无成。这里所指的纪律不是实践一门特殊艺术所要求的纪律（如每天要坚持练习几个小时），而是<code>贯穿人的一生的纪律</code>。</p></blockquote><blockquote><p>有些人拼命地想借性纵欲使自己克服由于孤独而产生的恐惧感，但其结果只能是越来越孤独，因为没有爱情的性交只能在一刹那间填补两个人之间的沟壑。</p></blockquote><blockquote><p>轻松地坐着（即不要懒散，也不要紧张），把眼睛闭上，努力使自己的眼前出现一片白色，并排除一切干扰自己的画面和念头。然后可试着观察自己的呼吸——不要去想它，也不要去影响它，而只是要意思到自己在呼吸。另外还要试着得到一种“自我”的感受；我&#x3D;我的自己+我的力量的中心+我的世界的创造者。至少每天早晨要做二十分钟这样的练习（如果有可能还有延长）和每晚睡觉前坚持练习。除这些练习外还有学会专心做一切事：专心听音乐、看书、谈话或欣赏图画。如果专心地干，那么干什么就无关紧要了，无论干什么，重要的或者不重要的都会增加一层现实意义，因为干事的人是完全开放的。为了学会集中要尽量避免无意义的谈话，也就是不能成为谈话的谈话。如果两个人在谈论他俩所熟悉的一棵树的生长情况，或者在评论刚才吃过的面包的味道，或者在回忆他们职业上的共同经历，他俩的谈话可能是重要的，这就看他俩是否真的在谈论一件经历过的事，还是就抽象的东西交换看法。</p></blockquote><blockquote><p>相信他人的顶峰是相信人类。在西方世界，这一信念在宗教语言中表现在犹太——基督教的思想中，在世界范围内突出表现在近一百五十年以来的人道主义的政治和社会学思想中。同对孩子的信念一样，对人类的信念也建筑在这个设想上，那就是：在一定的条件下，人类有能力建立一个以平等、正义和爱为原则的社会制度。迄今为止人类没有做到这一点，所以就需要有深信人类能做到这一点的信仰。但是同每一种理性的信念一样，这一信仰绝不是相信会出现奇迹；它更多的是以迄今为止的人类历史为基础，以及每个人的内心经历、对理智和爱的体验为基础。<br>非合理的信仰其根子在与服从一种被看作是全知、全权的巨大势力、以及贬低自己的力量和能力，而合理的信仰是以相反的体验为基础的。我们相信一种思想，因为这种思想是我们自己的观察和思考的产物。我们相信自己、他人和人类不断发展的可能性，我们对自己的觉悟和成熟体验得越深，我们的信仰程度就越高。合理信仰的基础是我们自己的生产力。在信仰中生活，就是创造性地生活。从中可以得出结论：相信权力——在统治意义上的权力——和使用权力都是信仰的反面。对任何一种存在的权力的“信仰”（仅仅因为它是存在的）同不相信人类有向前发展但尚未实现的可能性是一致的。<br><code>没有对权力的信仰，只有对权力的服从或者——从拥有权力的人的角度来看——保持权力的愿望</code>。虽然有许多人把权力看作是所有事物中最现实的东西，可是历史证明权力是人类获得的一切成果中最不牢靠和最短暂的成果。<code>基于信仰和权力相互排斥这一事实，一切本来是建筑在合理信仰上的宗教和政治体制一旦它们依靠权力或者与权力结盟，就会堕落和失去内在的生命力</code>。</p></blockquote><h1 id="大众的爱情"><a href="#大众的爱情" class="headerlink" title="大众的爱情"></a>大众的爱情</h1><ul><li><p>偶像化的爱情</p><blockquote><p>一个没有达到产生自我感觉高度的人（这种自我感觉的基础是创造性地发挥自己的力量）倾向于把自己所爱的人“神化”。他同自己的力量异化并把自己的力量反射到他所爱之人身上，他所爱之人被当做一切爱情、光明和祝福的源泉而受到他的崇拜。在这一过程中，人失去了对他自己力量的觉悟，在被爱者身上失去自己，而不是找到自己。但是从长远来看，<code>由于没有一个人能符合崇拜者的心愿，当然不可避免地就会出现失望，而解决这一问题的方法就是寻找一个新的偶像</code>——有时候会出现恶性循环。这种偶像化爱情形式开始时的特征是爱情体验的强烈性和突发性。这种形式的爱情常常被看作是真正的伟大的爱情；但是恰恰是这种所谓的强烈性和深度性却表现了那些恋爱者的饥渴和孤独。也许不必过分强调的是，我们常常可以看到这种爱情形式相结合的男女在严重的情况下会给人一对疯子的印象</p></blockquote></li><li><p>多愁善感的爱情</p><blockquote><p>这种爱情的本质就是它只能存在于想象中，而不是存在于同另一个人实实在在的结合之中。这类爱情最广泛的形式是用代用品使自己满足，那就是消费爱情电影、爱情小说和爱情歌曲。通过消费这些东西可以使一切没有实现的对爱情、人与人结合和亲近的向往得到满足。那些无力拆除自己与伴侣之间那堵高墙的男女，当他们在银幕上看到悲欢离合的情侣时，会身临其境，感动得热泪盈眶。对许多夫妇来说，银幕是他们体验爱情的唯一可能性——不仅自己是这样，而且两个人会一起成为他人爱恋故事的观众。这要爱情是一个白日梦，他们就能加入进来，但如果爱情成为两个真实的人之间的一种现实关系——他们就僵化了。 多愁善感的爱情的另一种表现是把现时推移到过去，一队夫妇可以通过回忆过去的爱情而受到深深的感动，虽然他们当时根本就没有感受到爱。这种情况和幻想未来的爱情完全一样。不知有多少定过婚的男女或新婚夫妇仍在憧憬未来爱情的想法，尽管她们现在已经开始感觉到对方的无聊。这种倾向符合作为现代人标志的一般态度。现在人不是生活在过去就是生活在未来，但不是现时。他们满怀感伤地回忆童年和母亲——或者为未来制定伟大的计划。不管是通过参与别人的非真正的爱情经历来体验爱情，还是通过把现时推移到过去和未来的方法来躲避爱情的现实，这些抽象的和异化的爱情形式其作用就和鸦片一样，都是为了减轻现实、人的孤独和与世隔绝所带来的痛苦。</p></blockquote></li><li><p>神经病态爱情</p><blockquote><p>神经病态爱情的另一种形式是一套投射做法。这种投射做法能导致回避自己的问题，从而<code>把注意力放到“所爱者”的错误和缺点上</code>。个人在这方面的态度同民族和国家的态度没什么两样。<code>有些人对他人的每一个细微错误的反应都十分灵敏，而对自己的问题和弱点却不闻不问</code>，他们永远是在考虑如何指责对方或者教育对方。如果——常常是这种情况——男女双方都热衷于这么做，那他们俩之间的爱情关系就成为相互的投射。如果我们是专横或无主见的，我就指责对方有这些缺点，并且根据我的性格不是要求他改正就是为此要惩罚他。而对方也同我一样地行事——这样两个人都能回避自己的问题，因此这两个人也就不能采取使他们自己进一步发展的步骤。</p></blockquote></li></ul><h1 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h1><blockquote><p>如果有一位妇女对我们说她很爱花，可是我们却发现她忘记浇花，我们就不会相信她说的话。爱情是对生命以及我们所爱之物生长的积极的关心。如果缺乏这种积极的关心，那么这只是一种情绪，而不是爱情。</p></blockquote><blockquote><p>摩西说如果他不把上帝的名字告诉以色列人，他们是不会相信他是神派来的。（因为偶像崇拜者不会相信没有名字的上帝，偶像的本质就是偶像有名字。）这时上帝向摩西妥协，上帝对摩西说，我的名字叫“我是现存者，我将永存”。（这比通常的译法“我将成为我应该成为的样子”要精确。希伯来文的形式表达过去，而不是将来。）“我是现存者，我将永存”意味上帝不是有限的，上帝不是人也不是物。这一句子的适当译法应该是：告诉他们，“我的名字叫无名”。所以禁止画上帝的像，滥叫上帝的名字或者干脆禁止称呼上帝的名字都是为了使人从上帝是父亲，上帝是人的观念中解放出来。在此基础上发展起来的神学进一步深化了这一思想，以至于今天谈上帝时不能用肯定的形容词。如果有人说上帝是智慧的、伟大的、善良的，这又是意味着上帝是个人，所以我们最多只能说上帝不是什么，即用否定的形容词，那就是：上帝不是有限的，不在热恋，不是无理的。我越知道上帝不是什么，就越了解上帝。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>弗洛姆的知识广度，从心理学，哲学，神学，社会学等各个方面对爱进行论述，看得我的头头是道。<br>细细读完后，从前的我根本不懂什么是爱，如何去爱。<br>在看这本书之前，我认为爱是一种感觉，这中感觉是神圣不可侵犯的，是永恒的（结果来看并不是永恒的，感觉是会发生转变的）。感觉是由于当下环境客观产生的，是不牢固的，并不是永远不变的。感觉一开始可能是某人对另外一人外貌长相的一种冲动，生理上的冲动。又或者是对对方人格魅力的心理的冲动（其本质也是生理上的冲动）。这种感觉是对于爱情美好的向往。但现实常常不如人意：当我真的和对方走到了一起后，最初的感觉慢慢淡化，取而代之的是我对对方的满意程度。如果对方拒绝我，如果对方不听从于我，如果对方没有像我爱她一样爱我（我自认为的我的爱实际上是我的自恋与自私），如果对方任何一点小的过错。我这种爱的感觉就是马上转化为对对方的厌烦或憎恨。最终导致双方关系的失败。这种最初对对方美好的感觉在成功和对方在一起后又马上转变为对对方的进一步索取,如果对方未能满足我的任何要求，我便会难过生气伤心甚至愤怒最终导致双方情感的破裂。其本质原因就是这种“美好的感觉”就是自私的一种表现（占有、索取）。“当我要求你获得你想要获得的东西的时候，我是真的爱你，当我要求你获得我想要你获得的东西的时候，我是爱我自己。”真正的爱从来不是占有或索取。爱是奉献，是付出，是给予。<br>真正的爱是一门艺术，需要知道什么是爱，如何去爱，然后不断去实践爱。找到爱的幸福。</p><p>一无所知的人什么都不爱，一无所知的人什么都不懂。</p><h1 id="人-书籍"><a href="#人-书籍" class="headerlink" title="人,书籍"></a>人,书籍</h1><p>摩西,佛洛伊德</p><h1 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h1><p><code>人本主义</code><br><strong>文主义</strong>（英语：Humanism），又译人本主义、人类主义、人道主义（译为人道主义时常与另一种<a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E9%81%93%E4%B8%BB%E4%B9%89" title="人道主义">人道主义</a>（英语：Humanitarianism）混用）是一种基于<a href="https://zh.wikipedia.org/wiki/%E7%90%86%E6%80%A7" title="理性">理性</a>和仁慈为<a href="https://zh.wikipedia.org/wiki/%E5%93%B2%E5%AD%A6" title="哲学">哲学</a>理论的<a href="https://zh.wikipedia.org/wiki/%E4%B8%96%E7%95%8C%E8%A7%82" title="世界观">世界观</a>。作为一种生活哲学，人文主义从仁慈的人性获得启示，并通过理性<a href="https://zh.wikipedia.org/wiki/%E6%8E%A8%E7%90%86" title="推理">推理</a>来指导<br>人文主义以理性推理为思想基础，以仁慈<a href="https://zh.wikipedia.org/wiki/%E5%8D%9A%E7%88%B1" title="博爱">博爱</a>为基本价值观。个人兴趣、尊严、思想自由、人与人之间的容忍和无暴力相处等，都是人文主义内涵范畴。同时，与<a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E6%9C%AC%E4%B8%BB%E4%B9%89%E5%BF%83%E7%90%86%E5%AD%A6" title="人本主义心理学">人本主义心理学</a>和<a href="https://zh.wikipedia.org/wiki/%E4%BA%BA%E9%81%93%E4%B8%BB%E4%B9%89" title="人道主义">人道主义</a>关系密切。<br>除了一般<a href="https://zh.wikipedia.org/wiki/%E6%97%A0%E5%AE%97%E6%95%99" title="无宗教">无宗教</a>的世俗人文主义外，也存在有宗教的人文主义，在各个主要宗教中，人文主义一般与该宗教的信仰和传统相结合。有些人文主义还认为，人有需要参加仪式和规则，并组织一些团体来满足这种需要。相比<a href="https://zh.wikipedia.org/wiki/%E5%94%AF%E7%89%A9%E4%B8%BB%E4%B9%89" title="唯物主义">唯物主义</a>，人文主义注重人的精神心灵；另一方面，人文主义注重理性。因此，有<a href="https://zh.wikipedia.org/wiki/%E7%84%A1%E7%A5%9E%E8%AB%96" title="无神论">无神论</a>的人文主义者认为，和理性精神相违背的神灵崇拜的宗教精神，并不是人文主义。</p><p><code>新马克斯</code></p><p><code>法兰克福学派</code>:<strong>法兰克福学派</strong>是以<a href="https://zh.wikipedia.org/wiki/%E5%BE%B7%E5%9B%BD" title="德国">德国</a><a href="https://zh.wikipedia.org/wiki/%E6%B3%95%E8%98%AD%E5%85%8B%E7%A6%8F%E5%A4%A7%E5%AD%B8" title="法兰克福大学">法兰克福大学</a>的“<a href="https://zh.wikipedia.org/w/index.php?title=%E7%A4%BE%E6%9C%83%E7%A0%94%E7%A9%B6%E4%B8%AD%E5%BF%83&action=edit&redlink=1">社会研究中心</a>”为中心的一群<a href="https://zh.wikipedia.org/wiki/%E7%A4%BE%E6%9C%83%E7%A7%91%E5%AD%B8" title="社会科学">社会科学</a>学者、哲学家、文化批评家所组成的学术共同体。被认为是<a href="https://zh.wikipedia.org/wiki/%E6%96%B0%E9%A6%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E7%BE%A9" title="新马克思主义">新马克思主义</a>、<a href="https://zh.wikipedia.org/wiki/%E8%A5%BF%E6%96%B9%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89" title="西方马克思主义">西方马克思主义</a>的一支。<br>其主要的人物包括第一代的<a href="https://zh.wikipedia.org/wiki/%E7%8B%84%E5%A5%A7%E5%A4%9A%C2%B7%E9%98%BF%E5%A4%9A%E8%AB%BE" title="狄奥多·阿多诺">狄奥多·阿多诺</a>、<a href="https://zh.wikipedia.org/wiki/%E8%B5%AB%E4%BC%AF%E7%89%B9%C2%B7%E9%A9%AC%E5%B0%94%E5%BA%93%E5%A1%9E" title="赫伯特·马尔库塞">赫伯特·马尔库塞</a>、<a href="https://zh.wikipedia.org/wiki/%E9%BA%A6%E5%85%8B%E6%96%AF%C2%B7%E9%9C%8D%E5%85%8B%E6%B5%B7%E9%BB%98" title="麦克斯·霍克海默">麦克斯·霍克海默</a>、<a href="https://zh.wikipedia.org/wiki/%E8%89%BE%E7%91%9E%E5%85%8B%C2%B7%E5%BC%97%E6%B4%9B%E5%A7%86" title="艾瑞克·弗洛姆">艾瑞克·弗洛姆</a>、<a href="https://zh.wikipedia.org/wiki/%E7%93%A6%E5%B0%94%E7%89%B9%C2%B7%E6%9C%AC%E9%9B%85%E6%98%8E" title="瓦尔特·本雅明">瓦尔特·本雅明</a>；第二代<a href="https://zh.wikipedia.org/wiki/%E5%B0%A4%E5%B0%94%E6%A0%B9%C2%B7%E5%93%88%E8%B4%9D%E9%A9%AC%E6%96%AF" title="尤尔根·哈贝马斯">哈贝马斯</a>等人。<br>德国法兰克福学派横跨了从<a href="https://zh.wikipedia.org/wiki/%E6%B3%95%E8%A5%BF%E6%96%AF%E4%B8%BB%E4%B9%89" title="法西斯主义">法西斯主义</a>德国到消费社会的美国这样两个典型的社会脉络，其理论诞生于1923年，以批判的社会理论著称。<br>1950年代以后，他们认为由于工业和科技的发展，资本主义社会已逐渐变成“富裕社会”、“发达的工业社会”，<a href="https://zh.wikipedia.org/wiki/%E9%A9%AC%E5%85%8B%E6%80%9D%E4%B8%BB%E4%B9%89" title="马克思主义">马克思主义</a>的<a href="https://zh.wikipedia.org/wiki/%E5%B7%A5%E4%BA%BA%E9%98%B6%E7%BA%A7" title="工人阶级">工人阶级</a><a href="https://zh.wikipedia.org/w/index.php?title=%E8%B4%AB%E5%9B%B0%E5%8C%96&action=edit&redlink=1" title="贫困化（页面不存在）">贫困化</a>理论已经过时，所以提出新的理论，认为工人阶级富裕起来以后不再是革命的动力，现在的革命力量是所谓的“新反动派”、“<a href="https://zh.wikipedia.org/wiki/%E6%96%B0%E5%B7%A6%E6%B4%BE" title="新左派">新左派</a>”，包括怀有激进情绪的学生、青年知识分子以及某些受到排挤和被遗弃的社会阶层。同时认为现在的革命已不是社会革命，而是<a href="https://zh.wikipedia.org/wiki/%E5%BF%83%E7%90%86" title="心理">心理</a>的或<a href="https://zh.wikipedia.org/wiki/%E6%9C%AC%E8%83%BD" title="本能">本能</a>结构的革命，因为人的本能受到各种社会文化抑制，不能自由发展，所以处于“<a href="https://zh.wikipedia.org/wiki/%E7%95%B0%E5%8C%96" title="异化">异化</a>”状态，而要克服这些就要有非抑制的文化，建立一个没有冲突的社会。<br>他们最大的特色，在于建立所谓的<a href="https://zh.wikipedia.org/wiki/%E6%89%B9%E5%88%A4%E7%90%86%E8%AB%96" title="批判理论">批判理论</a>。相较于传统社会科学要以<a href="https://zh.wikipedia.org/wiki/%E7%A7%91%E5%AD%B8" title="科学">科学</a>、<a href="https://zh.wikipedia.org/w/index.php?title=%E5%AE%9A%E9%87%8F%E5%8C%96&action=edit&redlink=1">量化</a>的方式建立社会经济等等的法则规律，他们则更进一步要探讨<a href="https://zh.wikipedia.org/wiki/%E6%AD%B7%E5%8F%B2" title="历史">历史</a>的发展以及<a href="https://zh.wikipedia.org/wiki/%E4%BA%BA" title="人">人</a>的因素在其中的作用。阿多诺提出的<a href="https://zh.wikipedia.org/wiki/%E6%96%87%E5%8C%96%E5%B7%A5%E6%A5%AD" title="文化工业">文化工业</a>、马尔库塞提出“单向度的人”、哈贝马斯提出的<a href="https://zh.wikipedia.org/w/index.php?title=%E6%BA%9D%E9%80%9A%E7%90%86%E6%80%A7&action=edit&redlink=1" title="沟通理性（页面不存在）">沟通理性</a>等，都是批判理论的重要概念之一。<br>在二次战法西斯统治脉络下各派新马克思主义的讨论，先前的学者基本上都抛弃了马克思“下层决定上层”的机械说法，但是葛兰西与第一代法兰克福学派同样走向松绑“决定”，扩大“制约”的路。</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>book</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建teamspeak</title>
    <link href="/posts/4145/"/>
    <url>/posts/4145/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建teamspeak服务器"><a href="#搭建teamspeak服务器" class="headerlink" title="搭建teamspeak服务器"></a>搭建teamspeak服务器</h1><ol><li>下载解压teamspeak</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum update<br>tar lxvf teamspeak3-server_linux_amd64-3.13.7.tar.bz2 teamspeak<br></code></pre></td></tr></table></figure><ol start="2"><li>创建一个teamspeak用户(开启teamspeak服务必须)</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">useradd teamspeak<br>passwd teamspeak<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">授权</span><br>chown -R teamspeak:teamspeak teamspeak/<br>chmod 777 teamspeak/<br></code></pre></td></tr></table></figure><ol start="3"><li>切换用户并启动ts</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">su teamspeak<br>cd teamspeak3/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>./ts3server_startscript.sh start license_accepted=1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭</span><br>./ts3server_startscript.sh stop<br></code></pre></td></tr></table></figure><h1 id="使用域名链接服务器"><a href="#使用域名链接服务器" class="headerlink" title="使用域名链接服务器"></a>使用域名链接服务器</h1><ol><li>创建一个DNS-A解析,将域名解析到你的主机ip</li><li>创建一个SRV解析,并配置DNS-A解析.</li></ol><h4 id="DNS-A解析"><a href="#DNS-A解析" class="headerlink" title="DNS-A解析"></a>DNS-A解析</h4><ul><li><strong>Type</strong> – choose A.</li><li><strong>Name</strong> – specify the subdomain name.</li><li><strong>Points to</strong> – enter the IP of your TeamSpeak 3 server, removing the sample <strong>185.185.185.185</strong> address.</li><li><strong>TTL</strong> – this stands for <strong>time-to-live</strong>, which limits the lifetime of the record. Leave the default value.</li></ul><p><img src="http://img.restart.vip/uPic/202310VbQmGJ.jpg" alt="dns-a"></p><h4 id="SRV解析"><a href="#SRV解析" class="headerlink" title="SRV解析"></a>SRV解析</h4><ul><li><strong>Type</strong> – choose <strong>SRV</strong>.</li><li><strong>Name</strong> – 随意</li><li><strong>Server</strong> – ts3(必须)</li><li><strong>Weight</strong> – for records with the same priority, set it to <strong>5</strong>.</li><li><strong>Port</strong> – enter your server’s port. Alternatively, the default TeamSpeak 3 server port is <strong>9987</strong>.</li><li><strong>Target</strong> – instead of <strong>teamspeak.yourdomain.com</strong>, enter the subdomain you created in <strong>Step 1</strong>.</li><li><strong>Priority</strong> – set the value to 0.</li><li><strong>TTL</strong> – leave the default value here.</li></ul><p><img src="http://img.restart.vip/uPic/202310Lt5yfH.png" alt="srv"></p><p>现在使用域名链接就ok辣</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>记一个工具网站:<a href="https://vercel.com/">https://vercel.com/</a><br>可以直接将你的前端项目部署到上去,然后使用域名解析就可以访问了,都不需要服务器<br>我使用他部署了我的chat-gpt程序</p>]]></content>
    
    
    <categories>
      
      <category>分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《被讨厌的勇气》</title>
    <link href="/posts/7909/"/>
    <url>/posts/7909/</url>
    
    <content type="html"><![CDATA[<h1 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h1><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby">岸见一郎<br><br>哲学家。<span class="hljs-number">1956</span>年生于京都，现居京都。高中时便以哲学为志向，进入大学后屡次到老师府上进行辩论。京都大学研究生院文学研究系博士课程满期退学。<span class="hljs-number">1989</span>年起致力于研究专业哲学和阿德勒心理学。主要活动领域是阿德勒心理学及古代哲学的执笔与演讲，同时还在精神科医院为许多青年做心理辅导。日本阿德勒心理学会认定顾问。译著有阿尔弗雷德<span class="hljs-string">?阿</span>德勒的《个人心理学讲义》和《人为什么会患神经病》，著作有《阿德勒心理学入门》等多部作品。本书由其负责原案。<br><br>古贺史健<br><br>自由作家。<span class="hljs-number">1973</span>年出生。以对话创作（问答体裁的执笔）见长，出版过许多商务或纪实文学方面的畅销书。他创作的极具现场感与节奏感的采访稿广受好评，采访集《<span class="hljs-number">16</span>岁的教科书》系列累计销量突破<span class="hljs-number">70</span>万册。近<span class="hljs-number">30</span>岁的时候邂逅阿德勒心理学，并被其颠覆常识的思想所震撼。之后，连续数年拜访京都的岸见一郎并向其请教阿德勒心理学的本质。本书中他以希腊哲学的古典手法“对话篇”进行内容呈现。著有《想要让<span class="hljs-number">20</span>岁的自己接受的文章讲义》。<br></code></pre></td></tr></table></figure><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><p><code>人对已经发生在自己身上的事的主观看法会影响到我们的当下与未来.</code><br><em>发生什么事不重要,你怎么看待这件事才重要</em></p><p><code>学会课题分离</code><br><em>我爱你-与你无关</em></p><p><code>自卑情结只是一种借口.**越自负的人越自卑**</code><br><em>自卑真的算是贬义词.自卑带来的负面影响可太多.由于自卑,导致过分的关注自我言行举止导致内心极度自恋,甚至自负.其实没那么多人在意你.你过得怎么样,与他们无关,他们如何评价你,与你无关.</em></p><p><code>你的人生取决于当下</code><br><em>请过好当下,享受当下</em></p><p><code>幸福来源于他者贡献</code><br><em>他者贡献,不是自我牺牲.他者贡献是于他而言,对他有利或有益</em></p><p><code>对认可的追求，扼杀了自由.</code><br><em>你在追求他人的认可,<strong>你丧失了自我</strong>.恋爱也好,工作也罢,请不要丧失自我.不要过分甚至是永远不要去追求他人的认可.没有意义.只要你产生了去追求他人认可的想法,那么在你心里,你已经低他一等了.</em></p><p><code>自由就是被别人讨厌</code><br><em>在国内就是这样,你要想正正做自己,就会被他人说三道四.</em></p><p><code>不要有表扬,也不要有批评,要有鼓励.</code><br><em>表扬是站在高处去俯视眼下,会使被表扬的人产生一种被蔑视的隐藏内心体验(这可能就是真实的人性).批评就更不好了,只会造成对方的叛逆与恨意,造成你的心情不悦,造成你俩关系越来越远.唯有鼓励!当你鼓励的时候,你俩是在一条心上的.你俩是共同体的.</em></p><p><code>如果你想做一件事.那应该由你来开始.不必去考虑他人是否合作.</code><br><em>你想做,那请立马去做</em></p><p><code>甘于平凡的勇气</code><br><em>大家都是普通人罢了</em></p><p><code>人的成长需要不停的跳舞</code></p><h1 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h1><p><code>阿德勒</code>:心理学三巨头.荣格.佛洛依德,阿德勒.</p><p><code>课题分离</code>:做好自己,别人的事,不要干预,如果真想干预.那么可以把马带到水边，但不能强迫其喝水</p><p><code>自我接纳</code>:自我接纳不是自我肯定,是指假如做不到就诚实地接受这个“做不到的自己”，然后尽量朝着能够做到的方向去努力，不对自己撒谎。</p><p><code>他者信赖</code>:在相信他人的时候不附加任何条件。即使没有足以构成信用的客观依据也依然相信，不考虑抵押之类的事情，无条件地相信。这就是信赖。</p><p><code>他者贡献</code>:他者贡献不是自我牺牲.自我牺牲是于你而言,你认为对他者有意的,于他而言并不是<br>他者贡献是指<strong>于他者而言,他认为是有益的</strong>,同时对你而言,你也认为是对他者有益的.</p><p><code>纵向关系</code>:即你主观认为的,领导与下属之间领导在上下属在下…在国内这种不平等的纵向关系深入人心,95%的人际关系都是纵向关系.你可以改变自己,但很难改变他人,但是.做自己就够了,做自己就挺好,就像加班和卷,他们卷他们的,他们爱舔谁舔谁,我只需要做自己就好了.毕竟打工而已,还是我的命更重要</p><p><code>横向关系</code>:即平等关系,任何人与人之间都是平等的:领导-下属,老师-学生,朋友关系,恋人关系,血缘关系.</p><p><code>共同体</code>:利益的共同体,成长的共同体,人与人之间的共同体.于他有利及是与你有利.自我接纳,他者信赖,他者贡献</p><p>心理创伤:一般指儿童时期所经历的一些事情导致了人格内心的转变与定型.</p><p>浪漫的红线: 恋爱关系<br>坚固的锁链: 血缘关系</p><h1 id="语句段落"><a href="#语句段落" class="headerlink" title="语句段落"></a>语句段落</h1><blockquote><p>青年：不，不是这样的。如果想一想与处于恋爱关系的人分手时候的情况就会容易理解了。<br>哲人：在恋爱或夫妻关系中，过了某个时期之后，有时候对方的任何言行都会让你生气。吃饭的方式让你不满意，在房间里的散漫姿态令你生厌，甚至就连对方睡眠时的呼吸声都让你生气，尽管几个月前还不是这样。<br>青年：……是的，这个能够想象得到。<br>哲人：这是因为那个人已经下定决心要找机会“结束这种关系”，继而正在搜集结束关系的材料，所以才会那样感觉。对方其实没有任何改变，只是自己的“目的”变了而已。</p></blockquote><blockquote><p>倘若自己都不为自己活出自己的人生，那还有谁会为自己而活呢？</p></blockquote><blockquote><p>毫不在意别人的评价、不害怕被别人讨厌、不追求被他人认可，如果不付出以上这些代价，那就无法贯彻自己的生活方式，也就是不能获得自由。</p></blockquote><blockquote><p>之所以只看到缺点是因为你下定了“不要喜欢自己”的决心。为了达到不要喜欢自己的目的，所以你才只看缺点而不看优点。首先请你理解这一点。</p></blockquote><blockquote><p>假设你把人际关系的基础建立在“怀疑”之上。怀疑他人、怀疑朋友、甚至怀疑家人或恋人，生活中处处充满怀疑。<br>那么，这样究竟会产生什么样的关系呢？对方也能够瞬时感觉到你怀疑的目光，会凭直觉认为“这个人不信赖我”。你认为这样还能建立起什么积极的关系吗？只有我们选择了无条件的信赖，才可以构筑更加深厚的关系。</p></blockquote><blockquote><p>假如有10个人，其中势必会有1个人无论遇到什么事都会批判你。他讨厌你，你也不喜欢他。而且，10个人中也会有2个人能够成为与你互相接纳一切的好朋友。剩下的7个人则两者都不是</p></blockquote><blockquote><p>远大目标就好比登山时以山顶为目标.假如人生是为了到达山顶的登山，那么人生的大半时光就都是在“路上”。也就是说，“真正的人生”始于登上山顶的时候，那之前的路程都是“临时的我”走过的“临时的人生”。</p></blockquote><h1 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">井水的故事<br><br>或许你也知道，井水的温度是恒定的，长年在18度左右。这是一个客观数字，无论谁测都一样。但是，夏天喝到的井水感觉凉爽，而冬天饮用时就感觉温润。温度恒定在18度，但夏天和冬天饮用的感觉却大不相同。<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">可以把马带到水边，但不能强迫其喝水<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>book</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《与神对话3》</title>
    <link href="/posts/23464/"/>
    <url>/posts/23464/</url>
    
    <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">尼尔·唐纳德·沃尔什，国际畅销书作家。<br>曾是电台主播、报社记者和主编，并创办了公关和市场行销公司。遭逢车祸和婚姻失败后，过着餐风宿露、以捡易开罐维生的日子。因为历经失业、婚变、车祸、流浪街头等人生重大打击，在绝望之余写下对“神”的种种质疑，竟意外收到来自“神”的回应，并记录成册，寻找出版商出版。结果引起广大的回响，在全球翻译成36种语言，全球畅销超过1,200万册，高居纽约时报畅销排行一百周。被翻译成37种语言，其中有六本登上《纽约时报》非小说类畅销书排行榜。他通过全球旅行演讲，推动全球的灵性复兴浪潮。<br></code></pre></td></tr></table></figure><p>说来是真的很巧,不知道想要看些什么书的时候,无意间在微信读书上看到这本排名第一的书,<br>当时雀氏是排名第一,后面再搜发现怎么也搜不到这本书了.</p><p>这本书现在还没看完,不过是我所做笔记最多的,在我心中排名第一.我想把他分享给每一个人.<br>这本书每一句话都值得深深的思考.很多观念都颠覆了我的认知.让我明白我是多么无知.</p><p>这本书说的最多的就是<code>经验</code>这两个字.什么是<code>经验</code>.我的行动而内心想法等于<code>经验</code></p><h2 id="Chapter01"><a href="#Chapter01" class="headerlink" title="Chapter01"></a>Chapter01</h2><blockquote><p>愧疚和害怕,是人类仅有的敌人<br><code>好,原来我一直把我的敌人当朋友</code></p></blockquote><blockquote><p>请明白凡是你所拥有的东西,在你将他送出去之前,都不是你拥有的.<br><code>雀氏啊雀氏</code></p></blockquote><blockquote><p>只要你仍然担忧别人对你的看法，你就会受制于他们。唯有当你无须外界的认可时，你才能拥有你自己。<br><code>原来我从没有拥有过我自己</code></p></blockquote><blockquote><p>当我想要你获取你想要的东西的时候,那么我是真的爱你.<br>当我想要你获取我想要你获取的东西的时候,那么我是爱我自己<br><code>原来我是如此自恋</code></p></blockquote><blockquote><p>神圣的二元律-&gt;两个明显相互矛盾的真相可以同时同地存在.<br><code>不用去追求某个东西或某件事是否对或错,去经验他,去体验他.去超越他</code></p></blockquote><blockquote><p>认识并非由经验而生——它催生经验。世界上大半的人把这个道理弄反了。<br><code>并不是我的经历让我产生了我的三观,而是我三观造就了现在的我得经历.如果我想改变我未来的经历,那么需要从此刻重塑我的三观</code></p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">大多数人以为，如果他们“拥有”某样东西（更多的时间、金钱、爱情等等），他们就终于能够采取“行动”去做某件事（写书、培养爱好、度假、买房子、谈恋爱等等），这将会使他们处于某种存在“状态”（快乐、安宁、满意或者充满爱）。<br>实际上，他们弄反了“状态-行动-拥有”范式。宇宙的真相与你想象的不同：“拥有”某样东西并不会产生某种存在“状态”，事实与此正好相反。<br>首先你必须处于那种叫做“快乐”（或者“领悟”、“明智”、“同情”等等）的状态，从这种存在境界出发，你才能采取“行动”去做各种事情——很快你将会发现，你所做的事情最终给你带来了你向来想要“拥有”的东西。<br></code></pre></td></tr></table></figure><p><code>拥有某样东西并不会给我们带来内心的状态,及时有,那也是暂时的</code><br><code>想要拥有某样状态,那请行动起来</code></p><blockquote><p>所有精神状态都是自我繁殖的<br><code>你想去快乐,你想去幸福.只要你想,只要你做.你就会快乐幸福.</code> &gt; <code>当然,只想却不做,知而不行,那是最大的愚蠢</code></p></blockquote><blockquote><p>你可以要求你的身体去做某件你的精神并不相信的事，如果你的身体做那件事的时间足够长久，你的精神将会抛弃它原先对那件事的看法，并创造出新的思维。每当你对事物有了新的思维，你就很有可能让它成为你的存在状态的永久部分，而非仅仅是某种你假装出来的东西。<br><code>想做什么,是真正的想要,发自内心的想.那么请直接去做,你会在做的过程中去经验你所想要拥有的东西.减肥也好,学英语也好,摄影也好,咖啡拉花也好,学驾照也好,只要是你真心想要的.你都能够拥有</code></p></blockquote><blockquote><p>在你生活中发生的事情，无不是完美无瑕的机会，让你可以去治愈、创造或者经验某些你为了获得你的真实身份而希望治愈、创造或者经验的东西.<br>悲哀、愤怒、羡慕、怕、爱<br><code>生活中的一切你所获得的,都是你想要获得的.快乐or难过.</code></p></blockquote><blockquote><p>遭到持续压制的愤怒变成暴怒,那是极其不自然的情感<br>遭到持续压制的羡慕变成嫉妒,那是极其不自然的情感<br>遭到持续压制的怕变成恐慌,那是及其不自然的情感<br>遭到吃住压制的爱变成占有欲,那是及其不自然的情感<br>你们已经创造出性尴尬、性压抑和性羞耻–这导致了性禁忌、性障碍和性暴力<br><code>不要去压抑内心想法,久了会造成心病,而且很难改变</code></p></blockquote><h2 id="Chapter02"><a href="#Chapter02" class="headerlink" title="Chapter02"></a>Chapter02</h2><blockquote><p>只要在行动中表现出你们并不与其他人和事物分离，你们明天就能治好这个世界。<br><code>但话说,有些人、有些事我真的只想离得远远的.</code></p></blockquote><blockquote><p>在你们的经验中，若是没有低，高便不能存在，这个道理我已经向你讲过许多次。到了高处之后，你们必须回到低处，这样才能再次经验升到高处的快乐<br><code>生活会让我们时而高时而低,如果一直处于低迷的状态,那么请去改变吧.在行动中去经验</code></p></blockquote><blockquote><p>所有效果都是思维创造的，现象是意图的结果。<br><code>失恋使我难过,加班使我难过,补税使我难过</code><br>难过了就去改变吧.不改变会一直让你受困于牢笼.</p></blockquote><blockquote><p>思维控制是祈祷的最高形式。因此，请只思考那些好事，那些正义的事。别沉溺在消极和黑暗里。哪怕是在事情显得糟糕的时候，尤其是在这些时候，也请只看到完美，只表达感恩，然后只想象你接下来想要选择的完美现象。<br><code>好的,神</code></p></blockquote><blockquote><p>所有经验都是你创造的，而非外界强加于你的。<br><code>对也不对.外界带给我某种经验,那一定是我所在意的,若我不在意,外界也影响不到我</code> &gt;<code>所以呢,若不想让外界带给我不好的东西,那我一定要改变,变的不在意它,它也无法对我产生经验</code></p></blockquote><blockquote><p>除了此刻，别无“时间”；除了此地，别无“空间”。<br><code>别无时间,别无空间.只有此在.只有此在.</code> &gt;<code>怎么感觉看透了生死</code></p></blockquote><blockquote><p>你就这样将自己撕裂，以便能看到你的各块碎片。可以这么说，在你非常快乐的时候，你“摔成了许多碎片”。自那以后，你就不停地在拼凑那些碎片。<br><code>我才不要重新拼凑那些碎片</code></p></blockquote><blockquote><p>生活确实无非是视角的问题<br>你的视角创造你的思维，你的思维创造一切<br>控制思维的办法就是改变视角<br><code>想要改变生活,先改变视角,如何改变视角?去接受那些你曾经无法接受的东西,去经验你曾经想要经验却没付出行动的东西.在行动的过程中,你的视角转换了</code></p></blockquote><h2 id="Chapter-04"><a href="#Chapter-04" class="headerlink" title="Chapter 04"></a>Chapter 04</h2><blockquote><p>有个观念是你们许多人共同拥有的，它就是匮乏的观念。你们许多人认为，你们最核心的生活问题就是不够。什么东西都不够。<br>爱不够深，钱不够多，食物不够美味，衣服不够华丽，住房不够宽敞，时间不够充足，美妙的想法不够多，当然，你也不够多，有太多的事情让你无法分身。<br><code>神你好懂我</code></p></blockquote><blockquote><p>相信你无法拥有某样东西，等于并不渴望拥有它，因为这两者产生的结果是相同的。<br>你永远会得到你相信你会得到的经验<br>实际上，假如你试图获得它，你就无法拥有它。<br><code>我相信无法拥有爱,所以我也不渴望拥有它吗?不,我不相信.我试图获得它</code></p></blockquote><blockquote><p>和你将要做的事情相比，你已经做过的事情是微不足道的。<br>和你将要创造的东西相比，你曾经犯下的错误是不值一提的。<br>罪人能够在瞬间变成圣徒。在刹那间。在一念之间。<br><code>改变就在刹那间</code></p></blockquote><blockquote><p>要允许你那些最深的真相被改变。你们要亲自去改变它们，这对你们有好处。我是说真的。亲手改变它们会给你们带来好处。因为你们若对自己的身份有了新的看法，那就意味着正在成长。你们若对事实有了新的看法，那就意味着你们的进化正在加快。你们若对世间万事万物有了新的看法，那就意味着谜团终于得到破解，情节终于完全展开，而故事也将告结束。然后你们就能够开始新的故事，更美好的故事。</p><p>你们当中有人认为自己是邪恶的，是低贱和罪无可赦的，我想对这些人说：你们没有人会永远地迷路，将来肯定不会迷路。因为你们所有人、全部人都处在变化的过程之中。你们所有人、全部人都在进化的经验中运动。<br><code>好的,神</code></p></blockquote><h2 id="Chapter-05"><a href="#Chapter-05" class="headerlink" title="Chapter 05"></a>Chapter 05</h2><blockquote><p>你认为你并不知道这个问题的答案，所以你不知道。然而只要你认为你知道，你就会知道。</p></blockquote><blockquote><p>假如狂喜没有停顿，那甚至连狂喜也不再是狂喜。对于肉体的狂喜而言如此，对于灵魂的狂喜而言亦是如此。<br>这种生活的循环并不令人郁闷，它只会令人欢乐。让人得到纯粹的欢乐，以及更多的欢乐。</p></blockquote><h2 id="Chapter-06"><a href="#Chapter-06" class="headerlink" title="Chapter 06"></a>Chapter 06</h2><blockquote><p>每种存在的可能性都是事实，都是已经完成的事件<br>实际上，所有结局都已经发生。所以一切事情是同时发生的。别忘了，时间……<br>别试图“摆脱”任何事物。厌即是恋。<br>如果你们不喜欢前面的道路，那么改变方向吧。<br><code>嗯,时间并不存在,只有此在,只有此在</code></p></blockquote><blockquote><p>所有思维都是能量。<br>所有事物都在运动。<br>所有时间都是现在。</p></blockquote><blockquote><p>当学生准备好的时候，老师就会出现。</p></blockquote><h2 id="Chapter-07"><a href="#Chapter-07" class="headerlink" title="Chapter 07"></a>Chapter 07</h2><blockquote><p>瑜伽难陀几乎没有任何物质财富，但他想要的东西，他都有了；而鲁斯则“拥有一切”，却从来没得到他真正渴望的东西。</p></blockquote><h2 id="Chapter-08"><a href="#Chapter-08" class="headerlink" title="Chapter 08"></a>Chapter 08</h2><blockquote><p>每个时刻都在开始的刹那间终结。假如你不明白这个道理，你就不明白它的可贵之处，你就会称之为寻常的时刻。<br>每次交往都在“开始展开”的刹那间“开始结束”。唯有真正地思考过和深入地理解了这个道理，你才能得到蕴含在每个时刻——以及生活本身——中的财富。</p></blockquote><blockquote><p>请赞美今天的你，别谴责昨天的你，更别排斥明天的你。<br>凡是存在的，永远可以被改变。</p></blockquote><h2 id="Chapter-09"><a href="#Chapter-09" class="headerlink" title="Chapter 09"></a>Chapter 09</h2><blockquote><p>秘密存在于沉默之中。因而最甜美的声音是沉默的声音。</p></blockquote><h2 id="Chapter-11"><a href="#Chapter-11" class="headerlink" title="Chapter 11"></a>Chapter 11</h2><blockquote><p>人类面临的最大问题不是你们什么时候才能明白事理，而是你们什么时候才肯依照已经学会的道理去行动？</p></blockquote><blockquote><p>别让你的生活成为别的东西，要让它成为你对你身份的最伟大期许的最美好实现。</p></blockquote><blockquote><p>别“想要”，你不会得到你“想要”的东西。当你说你想要某样东西，你只是宣布你缺乏它——然后你将会一直处于那种缺乏的状态之中。</p></blockquote><blockquote><p>神圣的承诺唯有一个——那就是说出和实践你的真相<br>其他承诺都是自由的丧失，不可能是神圣的。因为自由是你的身份。<br>假如你丧失了自由，你就丧失了你的自我。那可不是神圣的行为，那是对神的亵渎。</p><p>除非你能预测你的未来，否则你无法做出任何真实的承诺。<br>为了不背叛别人而背叛自己，其实也是背叛，而且是最高的背叛。</p></blockquote><h2 id="Chapter-15"><a href="#Chapter-15" class="headerlink" title="Chapter 15"></a>Chapter 15</h2><blockquote><p>你们思考什么，就会创造什么。你们创造什么，就会变成什么。你们变成什么，就会表达什么。你们表达什么，就会经验什么。你们经验什么，就会处在什么状态。你们处在什么状态，就会思考什么。</p></blockquote><p>…..</p>]]></content>
    
    
    <categories>
      
      <category>阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>books</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot配置文件加密jasypt</title>
    <link href="/posts/24500/"/>
    <url>/posts/24500/</url>
    
    <content type="html"><![CDATA[<p>Springboot配置文件加密</p><span id="more"></span><ul><li><p>引入start包</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">Maven</span>:<span class="hljs-string"></span><br><span class="hljs-attr">&lt;dependency&gt;</span><br>    <span class="hljs-attr">&lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt;</span><br>    <span class="hljs-attr">&lt;artifactId&gt;jasypt-spring-boot&lt;/artifactId&gt;</span><br>    <span class="hljs-attr">&lt;version&gt;3.0.5&lt;/version&gt;</span><br><span class="hljs-attr">&lt;/dependency&gt;</span><br><br><span class="hljs-attr">Gradle</span>:<span class="hljs-string"></span><br><span class="hljs-attr">implementation</span> <span class="hljs-string">&#x27;com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.5&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p class="note note-primary">通过秘钥生成密文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.restart.live.utils;<br><br><span class="hljs-keyword">import</span> org.jasypt.util.text.BasicTextEncryptor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DecryptUtil</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">BasicTextEncryptor</span> <span class="hljs-variable">textEncryptor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicTextEncryptor</span>();<br><span class="hljs-comment">//加密所需的salt(盐)</span><br>textEncryptor.setPassword(<span class="hljs-string">&quot;zz&quot;</span>);<br><span class="hljs-comment">//要加密的数据（数据库的用户名或密码）</span><br><span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> textEncryptor.encrypt(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> textEncryptor.encrypt(<span class="hljs-string">&quot;root&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;password:&quot;</span> + password);<br>System.out.println(<span class="hljs-string">&quot;address:&quot;</span> + address);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nix"><br><span class="hljs-operator">-</span> <span class="hljs-operator">&lt;</span>p class<span class="hljs-operator">=</span><span class="hljs-string">&quot;note note-primary&quot;</span><span class="hljs-operator">&gt;</span>使用密文替换yml中的原始数据<span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>p<span class="hljs-operator">&gt;</span><br>  ```yaml<br>  <span class="hljs-comment"># ENC(要加密的数据)</span><br>  <span class="hljs-params">spring:</span><br>    <span class="hljs-params">datasource:</span><br>      <span class="hljs-params">driver-class-name:</span> com.mysql.cj.jdbc.Driver<br>      <span class="hljs-comment"># 若想加密url,将url整个加密成密文,再使用ENC(密文) 配置</span><br>      <span class="hljs-params">url:</span> jdbc:mysql:<span class="hljs-operator">//</span>localhost:<span class="hljs-number">3306</span><span class="hljs-operator">/</span>life_restart<span class="hljs-operator">?</span>serverTimezone<span class="hljs-operator">=</span>Asia<span class="hljs-operator">/</span>Shanghai&amp;useUnicode<span class="hljs-operator">=</span><span class="hljs-literal">true</span>&amp;characterEncoding<span class="hljs-operator">=</span>utf-<span class="hljs-number">8</span>&amp;useSSL<span class="hljs-operator">=</span><span class="hljs-literal">true</span><br>      <span class="hljs-params">username:</span> root<br>      <span class="hljs-params">password:</span> ENC(XP<span class="hljs-operator">+</span>BZyKk211GxXc9nLbrDQ<span class="hljs-operator">==</span>)<br></code></pre></td></tr></table></figure></li><li><p class="note note-primary">添加Springboot启动项(推荐)或者jasypt配置项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Springboot启动项:</span><br> <span class="hljs-string">-Djasypt.encryptor.password=&#x27;秘钥&#x27;</span> <span class="hljs-string">-Djasypt.encryptor.algorithm=PBEWithMD5AndDES</span> <span class="hljs-string">-Djasypt.encryptor.iv-generator-classname=org.jasypt.iv.NoIvGenerator</span><br><br><span class="hljs-comment"># 或者使用yml配置</span><br><br><span class="hljs-attr">jasypt:</span><br><span class="hljs-attr">encryptor:</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">&#x27;秘钥&#x27;</span><br><span class="hljs-attr">algorithm:</span> <span class="hljs-string">PBEWithMD5AndDES</span> <span class="hljs-comment"># 默认就好</span><br><span class="hljs-attr">iv-generator-classname:</span> <span class="hljs-string">org.jasypt.iv.NoIvGenerator</span> <span class="hljs-comment"># 默认就好</span><br><br></code></pre></td></tr></table></figure><pre><code class="hljs"></code></pre></li></ul><p>**运行项目,搞定!**😎😎</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MacOS软件工具插件分享</title>
    <link href="/posts/39333/"/>
    <url>/posts/39333/</url>
    
    <content type="html"><![CDATA[<p>2024最新Mac常用软件软件、工具分享🌟🌟🌟🌟🌟</p><span id="more"></span><h3 id="软件及插件"><a href="#软件及插件" class="headerlink" title="软件及插件"></a>软件及插件</h3><ul><li>jetbrains全家桶(推荐使用<a href="https://www.jetbrains.com/toolbox-app/">toolbox</a>安装)</li><li>前端开发 <a href="https://code.visualstudio.com/">vscode</a></li><li>数据库管理 <a href="https://tableplus.com/">TablePlus</a></li><li>API调试 <a href="https://apifox.com/">ApiFox</a></li><li>抓包工具 <a href="https://proxyman.io/">ProxyMan</a></li><li>Redis管理工具 <a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases">RedisDesktop</a></li><li>MongoDB管理<a href="https://www.mongodb.com/products/compass">MongoDB Compass Beta</a></li><li>API调试 <a href="https://apifox.com/">ApiFox</a></li><li>抓包工具 <a href="https://proxyman.io/">ProxyMan</a></li><li>Git分支管理 <a href="https://www.sourcetreeapp.com/">Sourcetree</a></li><li>Jvm内存分析 <a href="https://www.ej-technologies.com/products/jprofiler/overview.html">JProfiler</a></li><li>项目管理 <a href="https://www.omnigroup.com/omniplan/">OmniPlan</a></li><li>数据库设计 <a href="http://pdman.cn/">PDMAN</a></li><li>ssh工具 <a href="https://tabby.sh/">Tabby</a></li><li>sublime <a href="https://www.sublimetext.com/">sublime</a></li></ul><p class="note note-info">日常软件</p>  <ul><li><p><a href="https://folivora.ai/">BetterTouchTool</a> 手势自定义.</p></li><li><p>微信读书</p></li><li><p><a href="https://www.snipaste.com/">Snipaste</a> 截图、贴图</p></li><li><p><a href="https://www.keka.io/en/">Keka</a> 解压缩</p></li><li><p><a href="https://getkap.co/">Kap</a> 屏幕录制</p></li><li><p><a href="https://iina.io/">IINA</a> 视频播放</p></li><li><p><a href="https://freemacsoft.net/appcleaner/">AppCleaner</a>:卸载残留文件</p></li><li><p><a href="https://coteditor.com/">CotEditor</a> 文本编辑,NodePad++替代品</p></li><li><p><a href="https://typora.io/">Typora</a> MarkDown文字编辑</p></li><li><p><a href="https://github.com/ripperhe/Bob">Bob</a> 全局翻译</p></li><li><p><a href="https://www.macbartender.com/Bartender4/">Bartender 4</a> 状态栏管理</p></li><li><p><a href="https://xmind.cn/">Xmind</a> 脑图</p></li><li><p><a href="https://apps.ankiweb.net/">Anki</a> 一款单词记录本</p></li><li><p>无边记</p></li><li><p><a href="https://github.com/Dreamacro/clash/releases">Clash</a> 懂得都懂</p></li><li><p><a href="https://github.com/2ndalpha/gasmask">Gas Mask</a> 本地hosts管理</p></li></ul><p class="note note-info">Mac插件</p><ul><li><a href="https://www.mowglii.com/itsycal/">Itsycal</a> 状态栏日历插件</li><li><a href="https://github.com/exelban/stats">Stats</a> 状态栏性能监控</li><li><a href="https://github.com/gee1k/uPic">upic</a> 图床管理(真香告警)</li></ul><p class="note note-info">Chrome插件</p><ul><li>Tampermonkey 油猴脚本管理</li><li>AdGuard 广告拦截器</li><li>Bitwarden 免费密码管理器</li><li>Elasticvue - ElasticSeach管理</li><li>ModHeader - 自定义添加http请求表头</li><li>Save Page WE 保存当前页面</li><li>标签分组扩展 标签页分组快照保存</li></ul><p class="note note-info">IDEA插件</p><ul><li><a href="https://plugins.jetbrains.com/plugin/7499-gittoolbox">GitToolBox</a></li><li><a href="https://plugins.jetbrains.com/plugin/7642-save-actions">save-actions</a></li><li><a href="https://plugins.jetbrains.com/plugin/10119-mybatisx">mybatisx</a></li><li><a href="https://plugins.jetbrains.com/plugin/253-jprofiler">jprofiler</a></li><li><a href="https://plugins.jetbrains.com/plugin/7179-maven-helper">maven-helper</a></li></ul><h3 id="工具包"><a href="#工具包" class="headerlink" title="工具包"></a>工具包</h3><ul><li><strong>brew</strong> MacOS包管理器 🌟🌟🌟🌟🌟</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">官网一键安装包</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">/bin/bash -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询安装的包</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">brew list</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">卸载包</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">brew uninstall **</span><br></code></pre></td></tr></table></figure><ul><li><strong>Git</strong> 🌟🌟🌟🌟🌟</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用brew安装.</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">brew install git</span><br></code></pre></td></tr></table></figure><ul><li><strong>Jdk8</strong> 🌟🌟🌟🌟🌟</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用brew安装</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">brew install openjdk@8</span><br></code></pre></td></tr></table></figure><ul><li><strong>yarn</strong> 🌟🌟🌟🌟🌟</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">brew install yarn</span><br></code></pre></td></tr></table></figure><ul><li><strong>nvm</strong> node版本管理工具🌟🌟🌟🌟🌟</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">brew install nvm</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询node所有版本</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nvm list</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装18.0版本的node</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nvm install 18</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换node版本</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">nvm use v18.10.0</span><br></code></pre></td></tr></table></figure><ul><li><strong>jenv</strong> jdk版本管理工具 🌟🌟🌟🌟🌟</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装jenv</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">brew install jenv</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Bash</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;eval &quot;$(jenv init -)&quot;&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Zsh</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;eval &quot;$(jenv init -)&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加jdk到jenv管理中  使用命令 jenv add  <span class="hljs-string">&#x27;jdk安装路径&#x27;</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_281.jdk/Contents/Home</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查询当前已添加jdk版本</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">jenv versions</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改jdk版本</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">jenv <span class="hljs-built_in">local</span> 18</span><br>    system<br>  1.8<br>  19<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换jdk版本</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">jenv <span class="hljs-built_in">local</span> 19</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者使用global</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">jenv global 19</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新服务器软件初始化</title>
    <link href="/posts/48598/"/>
    <url>/posts/48598/</url>
    
    <content type="html"><![CDATA[<p>刚买了一台服务器,需要重新安装一些软件,在此记录一下</p><span id="more"></span><p>重装系统:目前装的是 CentOS7<br>更新 yum update</p><ol><li>安装 docker 容器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用一件安装docker容器:</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> systemctl start docker.service <span class="hljs-comment"># 启动docker容器</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> systemctl start docker <span class="hljs-comment"># 关闭docker容器</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置阿里云代理镜像</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/docker</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span></span><br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://vq4eiwe3.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> systemctl daemon-reload</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">sudo</span> systemctl restart docker</span><br></code></pre></td></tr></table></figure><ol start="2"><li>安装 mysql</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker pull mysql:latest  <span class="hljs-comment"># 拉取最新镜像</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=<span class="hljs-string">&#x27;你的密码&#x27;</span> mysql</span><br></code></pre></td></tr></table></figure><ol start="3"><li>安装 redis</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker pull redis:latest</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -itd --name myRedis -p 6379:6379 redis --requirepass <span class="hljs-string">&#x27;你的密码&#x27;</span></span><br></code></pre></td></tr></table></figure><ol start="4"><li>安装 mongoDB</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker pull mongo:latest</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker images</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker run -itd --name mongo -p 27017:27017 mongo --auth</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker <span class="hljs-built_in">exec</span> -it mongo mongo admin</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建一个名为 admin，密码为 123456 的用户。</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"> db.createUser(&#123; user:<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-built_in">pwd</span>:<span class="hljs-string">&#x27;123456&#x27;</span>,roles:[ &#123; role:<span class="hljs-string">&#x27;userAdminAnyDatabase&#x27;</span>, db: <span class="hljs-string">&#x27;admin&#x27;</span>&#125;,<span class="hljs-string">&quot;readWriteAnyDatabase&quot;</span>]&#125;);</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">尝试使用上面创建的用户信息进行连接。</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">db.auth(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>)</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">到目前为止还没有结束,发现用工具还是服务都连接不上mongo.会报权限错误.</span><br></code></pre></td></tr></table></figure><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># mongo中的权限</span><br><span class="hljs-number">1</span>. 数据库用户角色：read、readWrite<span class="hljs-comment">;</span><br><span class="hljs-number">2</span>. 数据库管理角色：dbAdmin、dbOwner、userAdmin；<br><span class="hljs-number">3</span>. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；<br><span class="hljs-number">4</span>. 备份恢复角色：backup、restore；<br><span class="hljs-number">5</span>. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase<br><span class="hljs-number">6</span>. 超级用户角色：root<br>// 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）<br><span class="hljs-number">7</span>. 内部角色：__<span class="hljs-params">system</span><br><br><span class="hljs-comment"># 具体功能权限</span><br>readWrite：允许用户读写指定数据库<br>dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问<span class="hljs-params">system</span>.profile<br>userAdmin：允许用户向<span class="hljs-params">system</span>.users集合写入，可以找指定数据库里创建、删除和管理用户<br>clusterAdmin：只在<span class="hljs-literal">admin</span>数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。<br>readAnyDatabase：只在<span class="hljs-literal">admin</span>数据库中可用，赋予用户所有数据库的读权限<br>readWriteAnyDatabase：只在<span class="hljs-literal">admin</span>数据库中可用，赋予用户所有数据库的读写权限<br>userAdminAnyDatabase：只在<span class="hljs-literal">admin</span>数据库中可用，赋予用户所有数据库的userAdmin权限<br>dbAdminAnyDatabase：只在<span class="hljs-literal">admin</span>数据库中可用，赋予用户所有数据库的dbAdmin权限。<br>root：只在<span class="hljs-literal">admin</span>数据库中可用。超级账号，超级权限<br><br><span class="hljs-comment"># 创建单个数据库用户</span><br>use life<br>db.createUser(&#123;<span class="hljs-literal">user</span>: <span class="hljs-string">&quot;life&quot;</span>, pwd: <span class="hljs-string">&quot;123456&quot;</span>, roles: [&#123; role: <span class="hljs-string">&quot;readWrite&quot;</span>, db: <span class="hljs-string">&quot;life&quot;</span> &#125;]&#125;)<br><br><span class="hljs-comment"># **追加权限**</span><br>db.grantRolesToUser(<span class="hljs-string">&quot;admin&quot;</span>,[&#123; role: <span class="hljs-string">&quot;dbOwner&quot;</span>, db: <span class="hljs-string">&quot;life&quot;</span>&#125;])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Angular中的路由</title>
    <link href="/posts/378/"/>
    <url>/posts/378/</url>
    
    <content type="html"><![CDATA[<h1 id="Angular中的路由-router"><a href="#Angular中的路由-router" class="headerlink" title="Angular中的路由(router)"></a>Angular中的路由(router)</h1><p>使用angular-cli创建 router项目 –routing<br>创建两个组件(home,product)</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">ng -g <span class="hljs-keyword">new</span> home<br>ng -g <span class="hljs-keyword">new</span> product<br></code></pre></td></tr></table></figure><h1 id="在Angular中配置路由"><a href="#在Angular中配置路由" class="headerlink" title="在Angular中配置路由"></a>在Angular中配置路由</h1><p>在<code>app-routing.module.ts</code>中配置<code>Routes</code>路由配置</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">import</span> &#123; NgModule &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; Routes, RouterModule &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/router&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;HomeComponent&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./home/home.component&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;ProductComponent&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./product/product.component&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;Code404Component&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./code404/code404.component&#x27;</span>;<br><br><span class="hljs-keyword">const</span> routes: Routes = [<br>  &#123;path: <span class="hljs-string">&#x27;&#x27;</span>, component: HomeComponent&#125;,<br>  &#123;path: <span class="hljs-string">&#x27;product&#x27;</span>, component: ProductComponent&#125;,<br>  &#123;path: <span class="hljs-string">&#x27;**&#x27;</span>, component: Code404Component&#125;<br>];<br><br>@NgModule(&#123;<br>  imports: [RouterModule.forRoot(routes)],<br>  exports: [RouterModule]<br>&#125;)<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppRoutingModule</span> &#123; &#125;<br></code></pre></td></tr></table></figure><h1 id="在Angular中使用路由"><a href="#在Angular中使用路由" class="headerlink" title="在Angular中使用路由"></a>在Angular中使用路由</h1><ol><li>通过<code>routerLink</code>进行路由<br>示例:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 通过routerLink 进行导航 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span>  [<span class="hljs-attr">routerLink</span>]=<span class="hljs-string">&quot;[&#x27;/&#x27;]&quot;</span>&gt;</span>主页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>通过<strong>onclick</strong>事件进行路由<br>1.定义button按钮</li></ol><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;input type<span class="hljs-operator">=</span><span class="hljs-string">&quot;button&quot;</span> value<span class="hljs-operator">=</span><span class="hljs-string">&quot;商品详情&quot;</span> (click)<span class="hljs-operator">=</span><span class="hljs-string">&quot;toProductDetails()&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>2.声明toProductDetails事件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">toProductDetails</span><span class="hljs-params">()</span></span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.在构造函数中注入<code>Router</code>对象</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-comment">// 通过构造函数获取对象</span><br><span class="hljs-function"><span class="hljs-keyword">constructor</span><span class="hljs-params">(<span class="hljs-keyword">public</span> router: Router)</span> <span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">&#125;</span></span><br></code></pre></td></tr></table></figure><p>4.在<code>toProductDetails</code>中进行路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">toProductDetails</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">router</span>.<span class="hljs-title function_">navigate</span>([<span class="hljs-string">&#x27;/product&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="在路由中传递参数"><a href="#在路由中传递参数" class="headerlink" title="在路由中传递参数"></a>在路由中传递参数</h1><ol><li>使用<code>queryParams</code>绑定路由参数(http:&#x2F;&#x2F;****?id&#x3D;1)<br>示例:绑定并传递参数</li></ol><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-comment">&lt;!-- queryParams 路由传递参数 --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>  [<span class="hljs-attr">routerLink</span>]=<span class="hljs-string">&quot;[&#x27;/product&#x27;]&quot;</span> [<span class="hljs-attr">queryParams</span>]=<span class="hljs-string">&quot;</span></span></span><span class="hljs-template-variable">&#123;id: 1&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span>商品详情<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>示例:接收参数<br>在productComponent组件中<br>通过构造方法注入Router路由对象.<br>通过ngOnInit方法中,通过Router获取参数并绑定productId属性</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">private</span> productId: number;<br>  <span class="hljs-comment">// 通过构造方法可以获取 router 路由对象.</span><br>  <span class="hljs-function"><span class="hljs-keyword">constructor</span><span class="hljs-params">(<span class="hljs-keyword">private</span> routInfo: ActivatedRoute)</span> <span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">  &#125;</span></span><br><span class="hljs-function">  <span class="hljs-title">ngOnInit</span><span class="hljs-params">()</span> <span class="hljs-comment">&#123;</span></span><br><span class="hljs-comment"><span class="hljs-function">    //        通过路由快照获取 id 参数</span></span><br><span class="hljs-comment"><span class="hljs-function">    this.productId = this.routInfo.snapshot.queryParams[&#x27;id&#x27;];</span></span><br><span class="hljs-comment"><span class="hljs-function">  &#125;</span></span><br></code></pre></td></tr></table></figure><ol start="2"><li>在路由中通过url传递参数(http:&#x2F;&#x2F;****&#x2F;1)<br>修改Angular路由配置<code>/:id</code></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<span class="hljs-selector-tag">path</span>: <span class="hljs-string">&#x27;product/:id&#x27;</span>, component: ProductComponent&#125;,<br></code></pre></td></tr></table></figure><p>通过<code>routerLink</code>路由直接传递参数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>  [<span class="hljs-attr">routerLink</span>]=<span class="hljs-string">&quot;[&#x27;/product&#x27;,1]&quot;</span> &gt;</span>商品详情<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure><p>ProductComponent中使用<code>params</code>方法获取url上的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">ngOnInit</span>(<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-comment">//        通过路由快照获取 id 参数</span><br>   <span class="hljs-variable language_">this</span>.<span class="hljs-property">productId</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">routInfo</span>.<span class="hljs-property">snapshot</span>.<span class="hljs-property">params</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="路由中的参数快照与参数订阅"><a href="#路由中的参数快照与参数订阅" class="headerlink" title="路由中的参数快照与参数订阅"></a>路由中的参数快照与参数订阅</h2><p>在上面例子中可以看到,获取参数的值得调用方法如下(即<code>参数快照</code>):</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 这里是使用snapshot快照形式获取的 id 参数.  因为在ngOninit方法中,该赋值操作只执行一次,导致若oldPage与newPage是同一路由情况下,参数一直为oldPage上的参数.</span><br><span class="hljs-keyword">this</span>.routInfo.snapshot.<span class="hljs-keyword">params</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br></code></pre></td></tr></table></figure><p>还有一种参数订阅的方式也能获取传递进来的参数(即<code>参数订阅</code>),如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment">// 这里使用subscribe订阅了传递参数属性,后进行赋值.可以解决参数快照出现的问题</span><br><span class="hljs-keyword">this</span>.routInfo.<span class="hljs-keyword">params</span>.subscribe((<span class="hljs-keyword">params</span>: Params) =&gt; <span class="hljs-keyword">this</span>.productId = <span class="hljs-keyword">params</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<br></code></pre></td></tr></table></figure><h1 id="重定向路由"><a href="#重定向路由" class="headerlink" title="重定向路由"></a>重定向路由</h1><p>需求:访问主页时,路由到homeComponent组件下.<br>在项目路由配置中添加如下配置:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<span class="hljs-selector-tag">path</span>: <span class="hljs-string">&#x27;&#x27;</span>, redirectTo: <span class="hljs-string">&#x27;home&#x27;</span>, pathMatch: <span class="hljs-string">&#x27;full&#x27;</span>&#125;,<br></code></pre></td></tr></table></figure><h1 id="子路由"><a href="#子路由" class="headerlink" title="子路由"></a>子路由</h1><ol><li>配置子路由(主要是route中的<code>children</code>属性)</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<span class="hljs-selector-tag">path</span>: <span class="hljs-string">&#x27;product/:id&#x27;</span>, component: ProductComponent,<br>    children : [<br>      &#123;<span class="hljs-selector-tag">path</span>: <span class="hljs-string">&#x27;&#x27;</span>, redirectTo: <span class="hljs-string">&#x27;product-desc&#x27;</span>, pathMatch: <span class="hljs-string">&#x27;full&#x27;</span>&#125;,<br>      &#123;<span class="hljs-selector-tag">path</span>: <span class="hljs-string">&#x27;product-desc&#x27;</span>, component: ProductDescComponent&#125;,<br>      &#123;<span class="hljs-selector-tag">path</span>: <span class="hljs-string">&#x27;sale/:id&#x27;</span>, component: SalerComponent &#125;<br>    ]<br>  &#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>调用子路由</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>  [<span class="hljs-attr">routerLink</span>]=<span class="hljs-string">&quot;[&#x27;./product-desc&#x27;]&quot;</span> &gt;</span>商品描述<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span>  [<span class="hljs-attr">routerLink</span>]=<span class="hljs-string">&quot;[&#x27;./sale&#x27;,3]&quot;</span> &gt;</span>销售员id<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="辅助路由-自定义路由"><a href="#辅助路由-自定义路由" class="headerlink" title="辅助路由(自定义路由)"></a>辅助路由(自定义路由)</h1><ol><li>在主模板声明自定义路由插座</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">router-outlet</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;aux&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-outlet</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>配置自定义路由<code>(autle:&#39;aux&#39;)</code></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">// outlet 属性映射为路由插座名称 配置一下属性表示该路由仅在aux插座生效<br> &#123;<span class="hljs-selector-tag">path</span>: <span class="hljs-string">&#x27;chat&#x27;</span>, component: ChatComponent , outlet: <span class="hljs-string">&#x27;aux&#x27;</span>&#125;,<br></code></pre></td></tr></table></figure><ol start="3"><li>使用自定义路由</li></ol><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">// 通过outlets指定路由,    [</span><span class="hljs-template-variable">&#123;outlets:&#123;&#x27;插座名称&#x27;:&#x27;路由名称&#x27;&#125;</span><span class="language-xml">&#125;]</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>  [<span class="hljs-attr">routerLink</span>]=<span class="hljs-string">&quot;[</span></span></span><span class="hljs-template-variable">&#123;outlets: &#123;aux: &#x27;chat&#x27;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&#125;]&quot;</span> &gt;</span>开始聊天<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>  [<span class="hljs-attr">routerLink</span>]=<span class="hljs-string">&quot;[</span></span></span><span class="hljs-template-variable">&#123;outlets: &#123;aux: null&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&#125;]&quot;</span> &gt;</span>结束聊天<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br></code></pre></td></tr></table></figure><ol start="4"><li>设置主路由跟随<code>(primary)</code></li></ol><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>  [<span class="hljs-attr">routerLink</span>]=<span class="hljs-string">&quot;[</span></span></span><span class="hljs-template-variable">&#123;outlets: &#123;primary: &#x27;home&#x27;, aux: &#x27;chat&#x27;&#125;</span><span class="language-xml"><span class="hljs-tag"><span class="hljs-string">&#125;]&quot;</span> &gt;</span>开始聊天<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-symbol">&amp;nbsp;</span></span><br></code></pre></td></tr></table></figure><h1 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h1><ol><li>CanActivate: 处理导航到某路由的情况</li><li>CanDeactivate: 处理从当前路由离开的情况</li><li>Resolve: 在路由激活之前获取路由数据</li></ol><h2 id="使用路由守卫"><a href="#使用路由守卫" class="headerlink" title="使用路由守卫"></a>使用路由守卫</h2><ol><li>使用<code>CanActivate</code>: 路由<strong>到后</strong>执行<br>创建守卫类型,实现CanActivate接口</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">CanActivate</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;_@angular_router@7.2.0@@angular/router&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginGuard</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CanActivate</span> &#123;<br>    <span class="hljs-title function_">canActivate</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">const</span> <span class="hljs-attr">loggedIn</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &lt; <span class="hljs-number">0.5</span> ;<br>      <span class="hljs-keyword">if</span> (!loggedIn) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&#x27;用户未登录&#x27;</span>);<br>      &#125;<br>      <span class="hljs-keyword">return</span> loggedIn;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在路由中注册路由守卫:<br><img src="https://user-images.githubusercontent.com/34369858/51035991-c8fa0280-15e6-11e9-809f-5e6f37acb012.png" alt="image"><br>别忘了注入守卫实现类:<br><img src="https://user-images.githubusercontent.com/34369858/51036050-f0e96600-15e6-11e9-8c84-2226ec9f16ec.png" alt="image"> 2. 使用<code>CanDeactivate</code>: 路由<strong>离开时</strong>执行<br>实现CanDeactivate接口,并注册路由守卫… 3. 使用<code>Resolve</code>: 路由<strong>到前</strong>执行 (可用于做路由跳转前赋值操作)<br>示例:<br>创建product.resolve.ts,实现Relove&lt;返回对象类型&gt;接口.返回一个对象.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Injectable</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductResolve</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Resolve</span>&lt;<span class="hljs-title class_">Product</span>&gt; &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> <span class="hljs-attr">router</span>: <span class="hljs-title class_">Router</span></span>) &#123;<br><br>  &#125;<br>  <span class="hljs-title function_">resolve</span>(<span class="hljs-attr">route</span>: <span class="hljs-title class_">ActivatedRouteSnapshot</span>, <span class="hljs-attr">state</span>: <span class="hljs-title class_">RouterStateSnapshot</span>): <span class="hljs-title class_">Observable</span>&lt;<span class="hljs-title class_">Product</span>&gt; | <span class="hljs-title class_">Promise</span>&lt;<span class="hljs-title class_">Product</span>&gt; | <span class="hljs-title class_">Product</span> &#123;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">productId</span>: <span class="hljs-built_in">number</span> = route.<span class="hljs-property">params</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (productId == <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;iphoneX&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">router</span>.<span class="hljs-title function_">navigate</span>([<span class="hljs-string">&#x27;/home&#x27;</span>]);<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意事项:</strong><br>自定义Resolve必须添加@Injectable()注解…只有被此装饰器注解,才能依赖注入<br>在路由配置中配置前置路由resolve</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MQTT初体验</title>
    <link href="/posts/64205/"/>
    <url>/posts/64205/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布&#x2F;订阅（publish&#x2F;subscribe）模式的轻量级协议，该协议构建于TCP&#x2F;IP协议之上，MQTT最大优点在于，可以以极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。</p></blockquote><blockquote><p>MQTT是一个基于客户端-服务器的消息发布&#x2F;订阅传输协议。MQTT协议是轻量、简单、开放和易于实现的，这些特点使它适用范围非常广泛。在很多情况下，包括受限的环境中，如：机器与机器（M2M）通信和物联网（IoT）。其在，通过卫星链路通信传感器、偶尔拨号的医疗设备、智能家居、及一些小型化设备中已广泛使用。</p></blockquote><p><strong>因此,MQTT需要一个消息服务中间件</strong></p><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><p>MQTT协议工作在低带宽、不可靠的网络的远程传感器和控制设备通讯而设计的协议，它具有以下主要的几项特性：</p><ol><li><p>使用发布&#x2F;订阅消息模式，提供一对多的消息发布，解除应用程序耦合。</p></li><li><p>对负载内容屏蔽的消息传输。</p></li><li><p>使用TCP&#x2F;IP提供网络连接。<br>主流的MQTT是基于TCP连接进行数据推送的，但是同样有基于UDP的版本，叫做MQTT-SN。这两种版本由于基于不同的连接方式，优缺点自然也就各有不同了。</p></li><li><p>有三种消息发布服务质量:<br>“至多一次”，消息发布完全依赖底层TCP&#x2F;IP网络。会发生消息丢失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有第二次发送。这一种方式主要普通APP的推送，倘若你的智能设备在消息推送时未联网，推送过去没收到，再次联网也就收不到了。<br>“至少一次”，确保消息到达，但消息重复可能会发生。<br>“只有一次”，确保消息到达一次。在一些要求比较严格的计费系统中，可以使用此级别。在计费系统中，消息重复或丢失会导致不正确的结果。这种最高质量的消息发布服务还可以用于即时通讯类的APP的推送，确保用户收到且只会收到一次。</p></li><li><p>小型传输，开销很小（固定长度的头部是2字节），协议交换最小化，以降低网络流量。<br>这就是为什么在介绍里说它非常适合“在物联网领域，传感器与服务器的通信，信息的收集”，要知道嵌入式设备的运算能力和带宽都相对薄弱，使用这种协议来传递消息再适合不过了。</p></li></ol><h1 id="搭建MQTT消息中间件-emq"><a href="#搭建MQTT消息中间件-emq" class="headerlink" title="搭建MQTT消息中间件(emq)"></a>搭建MQTT消息中间件<a href="http://www.emqtt.com/news">(emq)</a></h1>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用spring-aop处理自定义注解</title>
    <link href="/posts/6873/"/>
    <url>/posts/6873/</url>
    
    <content type="html"><![CDATA[<h1 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念:"></a>AOP概念:</h1><blockquote><p>面向侧面的程序设计（aspect-oriented programming，AOP，又译作面向方面的程序设计、观点导向编程、剖面导向程序设计）是计算机科学中的一个术语，指一种程序设计范型。该范型以一种称为侧面（aspect，又译作方面）的语言构造为基础，侧面是一种新的模块化机制，用来描述分散在对象、类或函数中的横切关注点（crosscutting concern）。</p></blockquote><h1 id="在springboot中使用aop处理自定义注解"><a href="#在springboot中使用aop处理自定义注解" class="headerlink" title="在springboot中使用aop处理自定义注解"></a>在springboot中使用aop处理自定义注解</h1><ol><li>依赖文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- AOP依赖模块 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>处理一个http请求.</li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RestController</span><br><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/&quot;</span>)<br>public class HelloWordController &#123;<br>    <span class="hljs-variable">@Autowired</span><br>    private HelloWordService service;<br><br>    <span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br>    public String <span class="hljs-built_in">hello</span>(String name)&#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">service</span><span class="hljs-selector-class">.sayHello</span>(name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>service层</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWordService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> name</span>)&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>+ <span class="hljs-title class_">Optional</span>.<span class="hljs-title function_">ofNullable</span>(name).<span class="hljs-title function_">orElse</span>(<span class="hljs-string">&quot; World !&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>自定义注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: xjc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/12/18 9:18</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 自定义注解</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> MyAnnotation &#123;<br>    String <span class="hljs-title function_">note</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>编写一个切面</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: xjc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/12/18 9:19</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span></span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAspact</span> &#123;<br><br>    <span class="hljs-title class_">ThreadLocal</span>&lt;<span class="hljs-title class_">Long</span>&gt; beginTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br>    <span class="hljs-comment">//    定义切入点</span><br>    <span class="hljs-meta">@Pointcut</span>(<span class="hljs-string">&quot;@annotation(annotation)&quot;</span>)<br>    <span class="hljs-keyword">public</span>  <span class="hljs-built_in">void</span>  <span class="hljs-title function_">log</span>(<span class="hljs-params"><span class="hljs-title class_">MyAnnotation</span> annotation</span>)&#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Before</span>(<span class="hljs-string">&quot;log(annotation)&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">doBefore</span>(<span class="hljs-params"><span class="hljs-title class_">JoinPoint</span> joinPoint, <span class="hljs-title class_">MyAnnotation</span> annotation</span>) &#123;<br>        <span class="hljs-comment">// 记录请求到达时间</span><br>        beginTime.<span class="hljs-title function_">set</span>(<span class="hljs-title class_">System</span>.<span class="hljs-title function_">currentTimeMillis</span>());<br>        log.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;cy666 note:&#123;&#125;&quot;</span>, annotation.<span class="hljs-title function_">note</span>());<br>        <span class="hljs-title class_">Object</span> aThis = joinPoint.<span class="hljs-title function_">getThis</span>();<br>        <span class="hljs-title class_">Object</span>[] args = joinPoint.<span class="hljs-title function_">getArgs</span>();<br>        <span class="hljs-title class_">String</span> kind = joinPoint.<span class="hljs-title function_">getKind</span>();<br>        <span class="hljs-title class_">Object</span> target = joinPoint.<span class="hljs-title function_">getTarget</span>();<br><br>    &#125;<br><br>    <span class="hljs-meta">@After</span>(<span class="hljs-string">&quot;log(annotation)&quot;</span>)<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">doAfter</span>(<span class="hljs-params"><span class="hljs-title class_">MyAnnotation</span> annotation</span>) &#123;<br>        log.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;cy666 statistic time:&#123;&#125;, note:&#123;&#125;&quot;</span>, <span class="hljs-title class_">System</span>.<span class="hljs-title function_">currentTimeMillis</span>() - beginTime.<span class="hljs-title function_">get</span>(), annotation.<span class="hljs-title function_">note</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="6"><li>为service方法填加注解启动测试.<br><img src="https://user-images.githubusercontent.com/34369858/50127973-3f3c6b00-02ae-11e9-9d76-71da66d45b8e.png" alt="image"><br>查看控制台:<br><img src="https://user-images.githubusercontent.com/34369858/50128031-7f9be900-02ae-11e9-8cda-7d0fc43e76ff.png" alt="image"></li></ol>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-Security-Acl:细粒度权限控制</title>
    <link href="/posts/51184/"/>
    <url>/posts/51184/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h1><blockquote><p>Spring ACL有助于在单个域对象上定义特定用户&#x2F;角色的权限 - 而不是在典型的每个操作级别上全面定义权限。<br>因此，不同的用户&#x2F;角色对每个特定对象具有不同的权限。<br>在这种情况下，Spring ACL能够完成任务</p></blockquote><h1 id="ACL-databases-ACL数据库模型"><a href="#ACL-databases-ACL数据库模型" class="headerlink" title="ACL databases (ACL数据库模型)"></a>ACL databases (ACL数据库模型)</h1><ol><li>ACL_CLASS</li><li>ACL_SID</li><li>ACL_IDENTITY</li><li>ACL_ENRTY</li></ol><h2 id="ACL-CLASS-资源对象"><a href="#ACL-CLASS-资源对象" class="headerlink" title="ACL_CLASS (资源对象)"></a>ACL_CLASS (资源对象)</h2><p>which store class name of the domain object (资源实体对象)</p><p>ID:<br>CLASS: 指向资源实体的类名,例如: org.baeldung.acl.persistence.entity.NoticeMessage</p><h2 id="ACL-SID-授权对象"><a href="#ACL-SID-授权对象" class="headerlink" title="ACL_SID: (授权对象)"></a>ACL_SID: (授权对象)</h2><p>which allows us to universally identify any principle or authority in the system (权限拥有者,USER OR ROLE)<br>ID:<br>SID: 用户或者角色的ID<br>PRINCIPAL:0 or 1 to indicate that the corresponding SID is a principal (user, such as mary, mike, jack…) or an authority (role, such as ROLE_ADMIN, ROLE_USER, ROLE_EDITOR…)<br> 用来表示当前行数据是一个用户,还是一个角色类型</p><h2 id="ACL-OBJECT-IDENTITY-定义了一个唯一的资源对象与资源所有者"><a href="#ACL-OBJECT-IDENTITY-定义了一个唯一的资源对象与资源所有者" class="headerlink" title="ACL_OBJECT_IDENTITY: (定义了一个唯一的资源对象与资源所有者)"></a>ACL_OBJECT_IDENTITY: (定义了一个唯一的资源对象与资源所有者)</h2><p>ID:<br>OBJECT_ID_CLASS: 对应资源实体的iD<br>OBJECT_ID_IDENTITY:<br>domain objects can be stored in many tables depending on the class. Hence, this field store the target object primary key<br>也就是说,一个类的定义在表中可以存在多个实例,这个键存的就是对应表中其中一行的主键.(以上三个字段就定义了一个唯一的资源&lt;唯一的某个数据&gt;)</p><p>OWNER_SID: 对应权限所有者的ID <SID><br> (以上定义了一个完整的数据资源以及资源的所有者)</p><p>PARENT_OBJECT: 父节点ID,形成树形结构,<br> 若存在父节点,父级节点授权后,通过下面这个字段的标识,决定是否授权此项</p><p>ENTRIES_INHERITTING: whether ACL Entries of this object inherits from the parent object (ACL Entries are defined in ACL_ENTRY table<br> 是否允许父类授权后是否授权此项</p><h2 id="ACL-ENTRY-最主要的表-表示一个唯一的资源是否允许被一个USER-OR-ROLE-进行何种操作"><a href="#ACL-ENTRY-最主要的表-表示一个唯一的资源是否允许被一个USER-OR-ROLE-进行何种操作" class="headerlink" title="ACL_ENTRY: (最主要的表,表示一个唯一的资源是否允许被一个USER OR ROLE 进行何种操作)"></a>ACL_ENTRY: (最主要的表,表示一个唯一的资源是否允许被一个USER OR ROLE 进行何种操作<CRUD>)</h2><p>ID:<br>ACL_OBJECT_IDENTITY: 权限项 (包含唯一资源与其所有者)<br>ACL_ORDER: 授权顺序<br>SID: 所有者(ROLE OR User) 该访问者<br>MASK: the integer bit mask that represents the actual permission being granted or denied (操作隐码&lt;1默认是读,2默认是写&gt;,具体参考<code>BasePermission.class</code>)<br>GRANTING: value 1 means granting, value 0 means denying 是否允许授权<br>AUDIT_SUCCESS AND AUDIT_FAILURE: for auditing purpose (计数?暂时不知道其作用)</p><h1 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a><a href="https://www.baeldung.com/spring-security-acl">DEMO</a></h1><h2 id="DEMO-测试"><a href="#DEMO-测试" class="headerlink" title="DEMO 测试:"></a>DEMO 测试:</h2><ol><li>在Dao层添加数据访问权限注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">NoticeMessageDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepositoryImplementation</span>&lt;NoticeMessage ,Long&gt; &#123;<br><br>    <span class="hljs-meta">@PostFilter(&quot;hasPermission(filterObject, &#x27;READ&#x27;)&quot;)</span><br>    List&lt;NoticeMessage&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-meta">@PostAuthorize(&quot;hasPermission(returnObject, &#x27;READ&#x27;)&quot;)</span><br>    NoticeMessage <span class="hljs-title function_">findById</span><span class="hljs-params">(Integer id)</span>;<br><br>    <span class="hljs-meta">@PreAuthorize(&quot;hasPermission(#noticeMessage, &#x27;WRITE&#x27;)&quot;)</span><br>    NoticeMessage <span class="hljs-title function_">save</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;noticeMessage&quot;)</span> NoticeMessage noticeMessage)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>@PostFilter : 意为只返回该User用户具有的所有的只读的NoticeMessage.<br>@PostAuthorize : 意为返回该User对此资源对象<NoticeMessage>是否具有只读权限,有则返回,无则报错.<br>@PreAuthorize 意为该User对此资源对象<NoticeMessage>是否拥有写操作,若有,则允许方法进行,若无,则报错<br>2. 测试</p><ul><li>使用manager用户查询所有message<br><img src="https://user-images.githubusercontent.com/34369858/50052901-be268c00-0166-11e9-87d5-0a134d14b75b.png" alt="image"></li><li>Message表中的假数据:<br><img src="https://user-images.githubusercontent.com/34369858/50052908-f332de80-0166-11e9-821b-063178f5ed2f.png" alt="image"></li><li>首先运行测试方法查看效果:<br><img src="https://user-images.githubusercontent.com/34369858/50052919-1cec0580-0167-11e9-93fb-e4a22592e623.png" alt="image"></li><li>仅仅只查询出来两条数据.有点不信(因为acl默认帮我们实现了一系列操作).<br>注释掉注解,继续测试:<br><img src="https://user-images.githubusercontent.com/34369858/50052933-4e64d100-0167-11e9-86ed-bd07a4fda96f.png" alt="image"></li><li>看到,实际可以查出三条数据<br><img src="https://user-images.githubusercontent.com/34369858/50052943-75bb9e00-0167-11e9-975b-b8d1d5c7fd38.png" alt="image"></li></ul><ol start="3"><li>ACL实现分析:<br><strong>产生上面测试原因的主要原因:是在acl_enrty表中拥有一条记录</strong><br>ACL_ENTYR (简称权限条目表)<br><font color=#FF1493>(一个唯一的资源是否允许一个唯一的角色或者用户拥有何种操作<CURD>)</font><br><img src="https://user-images.githubusercontent.com/34369858/50052980-0b572d80-0168-11e9-89b2-547a4670c2f0.png" alt="image"><br>这样一看有点懵.<br>首先看标记的两条的SID 属性,这里定义了一个角色OR用户.<br>观察acl_sid表. 角色用户定义表: 这里正好定义了一个manager用户<br><img src="https://user-images.githubusercontent.com/34369858/50052989-304ba080-0168-11e9-97f5-6b715c5fd6c7.png" alt="image"><br>反看entry表中,<br>Identity 为1与3<br>Identity表数据<br><img src="https://user-images.githubusercontent.com/34369858/50052998-52452300-0168-11e9-8287-283215b29f8d.png" alt="image"><br>这里可以得知: object_id_identity 字段对应的是在message表中的主键字段,其实就是定义了唯一的资源<br>这样一个唯一资源(identity表中定义)的所有者(entry表中定义)的包含操作(entry表中定义)就有了.拥有这些属性就可以进行权限校验了<br>重新梳理一遍就不难知道acl是如何做到数据级别的权限控制了</li><li>ACL流程分析:<br>在dao层加入注解后,当访问该方法时,acl会通过方法返回值的对像(若没有返回值,可以指定一个对象,.&lt;在acl_class表中定义的&gt;)与当前登录用户的username和其角色信息查询到所具有的操作权限,若通过则允许该方法执行,若不通过,则报错.<br>具体的查询流程: (个人猜测,暂时没看源码)</li><li>通过所有class查询 acl_class中的id</li><li>通过class中的id过滤所有identity.得到identity ids</li><li>通过 user 查询所有的sid</li><li>通过identity ids与 user sid 过滤所有entry</li><li>最后得出的那些.entry进行权限校验</li></ol><p>问题: 在acl_identity表中的owner_sid 有什么作用?个人认为identity表中sid与entry表中sid重复了.<br>在上面的测试中可以看到 owner_sid 全是3. 没有1.但是在entry中定义了资源的控制.并且也成功了,(之前想过用来简化筛选,但是这并没有简化啊.)<br> <img src="https://user-images.githubusercontent.com/34369858/50053014-8e788380-0168-11e9-8e5e-2054eb0858fa.png" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于OAuth2开发Client模块</title>
    <link href="/posts/14815/"/>
    <url>/posts/14815/</url>
    
    <content type="html"><![CDATA[<p><strong>(自己实现@EnableOAuth2Sso 注解,任何基于springSecurity权限的子系统引入该模块后,可自动实现在认证服务器认证及授权操作,完成本地认证授权.&lt;由认证服务器实现SSO&gt;)</strong></p><h1 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h1><ol><li>目录结构<br><img src="https://user-images.githubusercontent.com/34369858/50052676-d09ec680-0162-11e9-9668-fd09e461e206.png" alt="image"></li><li>jar包依赖</li></ol><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Greenwich.M3<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--druid--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--MySQL Driver--&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-jwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.54<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils --&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-beanutils<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-beanutils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;spring-cloud.version&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>spring-milestones<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Spring Milestones<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="构建OAuth2RestOperations"><a href="#构建OAuth2RestOperations" class="headerlink" title="构建OAuth2RestOperations"></a>构建OAuth2RestOperations</h1><p><strong>用于向认证服务器获取token</strong></p><h2 id="构建图"><a href="#构建图" class="headerlink" title="构建图:"></a>构建图:</h2><p><img src="https://user-images.githubusercontent.com/34369858/50052723-836f2480-0163-11e9-9d0e-2af46b342cd6.png" alt="image"></p><h2 id="代码实现-仅实现了password模式与code模式"><a href="#代码实现-仅实现了password模式与code模式" class="headerlink" title="代码实现 (仅实现了password模式与code模式)"></a>代码实现 (仅实现了password模式与code模式)</h2><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs zephir"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span>:xjc</span><br><span class="hljs-comment">* <span class="hljs-doctag">@date</span>:2018/12/6</span><br><span class="hljs-comment">* <span class="hljs-doctag">@description</span>:  调用Oauth所需要资源信息</span><br><span class="hljs-comment">* <span class="hljs-doctag">@params</span>:</span><br><span class="hljs-comment">*/</span><br>@Bean<br><span class="hljs-keyword">public</span> OAuth2ProtectedResourceDetails getOAuth2ProtectedResourceDetails()&#123;<br><br>    ProtectedResourceProperties <span class="hljs-keyword">resource</span> = clientProperties.getResource();<br><br>    <span class="hljs-keyword">if</span>(GlobalConstant.RESOURCE_GRAND_TYPE_PASSWORD.equals(clientProperties.getResource().getGrantType()))&#123;<br>        ResourceOwnerPasswordResourceDetails protectedDetails = <span class="hljs-keyword">new</span> ResourceOwnerPasswordResourceDetails();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            setProperty(protectedDetails,<span class="hljs-keyword">resource</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-keyword">Exception</span> e) &#123;<br>            log.warn(<span class="hljs-string">&quot;请配置该有项&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> protectedDetails;<br><br>    &#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//            授权码模式</span><br>        AuthorizationCodeResourceDetails protectedDetails = <span class="hljs-keyword">new</span> AuthorizationCodeResourceDetails();<br>        <span class="hljs-keyword">try</span> &#123;<br>            setProperty(protectedDetails,<span class="hljs-keyword">resource</span>);<br><br>            protectedDetails.setUserAuthorizationUri(<span class="hljs-keyword">resource</span>.getAuthorizationUri());<br>            log.info(protectedDetails.getPreEstablishedRedirectUri());<br>            protectedDetails.setUseCurrentUri(<span class="hljs-keyword">false</span>);<br><span class="hljs-comment">//              必须设置.回调url</span><br>            protectedDetails.setPreEstablishedRedirectUri(clientProperties.getContextPath()+clientProperties.getLogin().getLoginPage());<br><br>            <span class="hljs-comment">//            protectedDetails.setUseCurrentUri(true);</span><br>        &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-keyword">Exception</span> e) &#123;<br>            log.warn(<span class="hljs-string">&quot;请配置该有项&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> protectedDetails;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>:xjc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>:2018/12/11</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:设置认证服务器属性</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@params</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> &lt;T <span class="hljs-keyword">extends</span> BaseOAuth2ProtectedResourceDetails&gt; T setProperty(T protectedDetails,ProtectedResourceProperties <span class="hljs-keyword">resource</span>)&#123;<br>    protectedDetails.setAccessTokenUri(<span class="hljs-keyword">resource</span>.getAccessTokenUrl());<br>    protectedDetails.setClientId(clientProperties.getClientId());<br>    protectedDetails.setClientSecret(clientProperties.getClientSecret());<br>    protectedDetails.setScope(Arrays.asList(<span class="hljs-keyword">resource</span>.getScope().split(<span class="hljs-string">&quot;,&quot;</span>)));<br><br>    <span class="hljs-keyword">return</span>  protectedDetails;<br><br>&#125;<br><br>@Bean<br><span class="hljs-keyword">public</span> OAuth2RestTemplate oauth2RestTemplate() &#123;<br>    OAuth2ProtectedResourceDetails details = getOAuth2ProtectedResourceDetails();<br><span class="hljs-comment">//        构建template</span><br>    OAuth2RestTemplate template;<br><span class="hljs-comment">//        设置template中的AccessToken</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>:xjc</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        若不设置AccessTokenProvider.会采用默认的AccessTokenProviderChain</span><br><span class="hljs-comment">        这个默认的提供器会判断请求源是否经过本地认证,</span><br><span class="hljs-comment">        否 则抛出异常,然后跳到本地登录页面(默认)</span><br><span class="hljs-comment">        但是我们要做的就是认证,所以直接设置该有的token提供器就会跳过 默认的判断</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">if</span>(details <span class="hljs-keyword">instanceof</span> ResourceOwnerPasswordResourceDetails)&#123;<br>        template = <span class="hljs-keyword">new</span> OAuth2RestTemplate(details, <span class="hljs-keyword">new</span> DefaultOAuth2ClientContext());<br>        template.setAccessTokenProvider(<span class="hljs-keyword">new</span> ResourceOwnerPasswordAccessTokenProvider());<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(details <span class="hljs-keyword">instanceof</span> AuthorizationCodeResourceDetails)&#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@author</span>:xjc</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@date</span>:2018/12/7</span><br><span class="hljs-comment">         * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment">                        这里必须new一个ClientContext对象, 内部使用动态代理存储state,若使用默认,则state会找不到</span><br><span class="hljs-comment">         */</span><br>        template = <span class="hljs-keyword">new</span> OAuth2RestTemplate(details, <span class="hljs-keyword">new</span> DefaultOAuth2ClientContext());<span class="hljs-comment">//new DefaultOAuth2ClientContext()</span><br><span class="hljs-comment">//            template = new OAuth2RestTemplate(details, oauth2ClientContext);</span><br>        template.setAccessTokenProvider(<span class="hljs-keyword">new</span> AuthorizationCodeAccessTokenProvider());<br><br>        <span class="hljs-keyword">return</span> template;<br><br>    &#125;<br><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;请配置客户端相关属性&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="定义User接口-获取token"><a href="#定义User接口-获取token" class="headerlink" title="定义User接口,获取token"></a>定义User接口,获取token</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">public interface UserService &#123;<br><br>    OAuth2AccessToken getToken(<span class="hljs-keyword">String</span> str_key, <span class="hljs-keyword">String</span> str_value);<br><br>    <span class="hljs-keyword">User</span> <span class="hljs-title">getUserInfo</span>(OAuth2AccessToken token) throws InvocationTargetException, IllegalAccessException;<br><br>    Authentication getAuthentication(<span class="hljs-keyword">User</span> <span class="hljs-title">user</span>);<br><br>    <span class="hljs-keyword">String</span> getRedirectUri();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="认证流程图"><a href="#认证流程图" class="headerlink" title="认证流程图:"></a>认证流程图:</h2><p><img src="https://user-images.githubusercontent.com/34369858/50052759-fd071280-0163-11e9-912c-3e2930a39364.png" alt="image"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现:"></a>代码实现:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> OAuth2RestTemplate oAuth2RestTemplate;<br><br>  <span class="hljs-meta">@Autowired</span><br>  <span class="hljs-keyword">private</span> ClientProperties properties;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> OAuth2AccessToken <span class="hljs-title function_">getToken</span><span class="hljs-params">(String s1, String s2)</span> &#123;<br>      <span class="hljs-type">OAuth2ProtectedResourceDetails</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> oAuth2RestTemplate.getResource();<br><br>      <span class="hljs-keyword">if</span>(resource <span class="hljs-keyword">instanceof</span>  ResourceOwnerPasswordResourceDetails)&#123;<br>          <span class="hljs-type">ResourceOwnerPasswordResourceDetails</span> <span class="hljs-variable">resourceDetails</span> <span class="hljs-operator">=</span> (ResourceOwnerPasswordResourceDetails) resource;<br><br>          resourceDetails.setUsername(s1);<br>          resourceDetails.setPassword(s2);<br><br><span class="hljs-comment">//            获取当前session认证信息</span><br><span class="hljs-comment">//        Authentication auth = SecurityContextHolder.getContext().getAuthentication();</span><br><br>          <span class="hljs-keyword">return</span> oAuth2RestTemplate.getAccessToken();<br>      &#125;<br><br>      <span class="hljs-keyword">if</span>(resource <span class="hljs-keyword">instanceof</span> AuthorizationCodeResourceDetails)&#123;<br><br>          <span class="hljs-type">OAuth2ClientContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> oAuth2RestTemplate.getOAuth2ClientContext();<br><br>          <span class="hljs-comment">/**</span><br><span class="hljs-comment">           *           判断s1 state是否有值.若没有值,判断context中是否有值, 有则放,没有则清空,(重要)</span><br><span class="hljs-comment">           *</span><br><span class="hljs-comment">           * */</span><br>          <span class="hljs-keyword">if</span>(StringUtils.isEmpty(s1))&#123;<br>              <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> context.getAccessTokenRequest().getStateKey();<br>              <span class="hljs-keyword">if</span>(StringUtils.isNotEmpty(key))<br>                  context.getAccessTokenRequest().setStateKey(<span class="hljs-literal">null</span>);<br>          &#125;<br>          <span class="hljs-comment">/**</span><br><span class="hljs-comment">           *           若为带参数请求.则设置code值.    *******重要********</span><br><span class="hljs-comment">           *                                             code模式默认使用jdk动态代理开启另一个线程调用,</span><br><span class="hljs-comment">           * */</span><br>          <span class="hljs-keyword">if</span>(s2!=<span class="hljs-literal">null</span>)<br>              context.getAccessTokenRequest().setAuthorizationCode(s2);<br><br>          <span class="hljs-keyword">return</span> oAuth2RestTemplate.getAccessToken();<br>      &#125;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;请先完成配置项&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="加入LoginFliter拦截器-在请求访问时进行拦截认证"><a href="#加入LoginFliter拦截器-在请求访问时进行拦截认证" class="headerlink" title="加入LoginFliter拦截器,在请求访问时进行拦截认证"></a>加入LoginFliter拦截器,在请求访问时进行拦截认证</h2><p>定义LoginFilter 继承 OncePerRequestFilter</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Spring-Socail开发第三方认证</title>
    <link href="/posts/59296/"/>
    <url>/posts/59296/</url>
    
    <content type="html"><![CDATA[<p>整体流程图:<br><img src="https://user-images.githubusercontent.com/34369858/50052379-160cc500-015e-11e9-8c50-4afe0cc1be5b.png" alt="image"></p><h1 id="主要依赖"><a href="#主要依赖" class="headerlink" title="主要依赖"></a>主要依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.social<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-social-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0.M4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.social<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-social-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0.M4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.social<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-social-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0.M4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.social<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-social-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.0.M4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="构建ServiceProvider-服务器提供商"><a href="#构建ServiceProvider-服务器提供商" class="headerlink" title="构建ServiceProvider(服务器提供商)"></a>构建ServiceProvider(服务器提供商)</h1><h2 id="1-构建OAuth2Operations对象-获取token对象"><a href="#1-构建OAuth2Operations对象-获取token对象" class="headerlink" title="1.构建OAuth2Operations对象(获取token对象)"></a>1.构建OAuth2Operations对象(获取token对象)</h2><p>创建QQOAuth2Template继承OAuth2Template<br>由于QQ返回响应不是标准json格式,需重写解析逻辑</p><ol><li>在构造函数中设置 setUseParametersForClientAuthentication(true) ps:默认为false,发起请求时没有携带clientID与clientSecret 属性.设置为true.</li><li>重写createRestTemplate ,使template对象可以解析返回字符串.默认仅能解析json或form表单.</li><li>重写 postForAccessGrant 方法,自定义解析响应逻辑(因为QQ授权返回的token是在url上的,需要自己解析,没有默认实现)</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QQOAuth2Template</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">OAuth2Template</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">QQOAuth2Template</span>(<span class="hljs-title class_">String</span> clientId, <span class="hljs-title class_">String</span> clientSecret, <span class="hljs-title class_">String</span> authorizeUrl, <span class="hljs-title class_">String</span> accessTokenUrl) &#123;<br>        <span class="hljs-variable language_">super</span>(clientId, clientSecret, authorizeUrl, accessTokenUrl);<br><br><span class="hljs-comment">//        设置为true.template发送请求时才会携带 clientId 与clientSecret..(重要)</span><br>        <span class="hljs-title function_">setUseParametersForClientAuthentication</span>(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title class_">RestTemplate</span> <span class="hljs-title function_">createRestTemplate</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">RestTemplate</span> template = <span class="hljs-variable language_">super</span>.<span class="hljs-title function_">createRestTemplate</span>();<br>    <span class="hljs-comment">//   social原本不会解析字符串,只会解析form或者json格式数据,添加此项      //可以解析返回字符串</span><br>        template.<span class="hljs-title function_">getMessageConverters</span>().<span class="hljs-title function_">add</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringHttpMessageConverter</span>(<span class="hljs-title class_">Charset</span>.<span class="hljs-title function_">forName</span>(<span class="hljs-string">&quot;UTF-8&quot;</span>)));<br><br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>:xjc</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>:2018/12/1</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span>: 由于QQ返回响应为string类型的参数字符串,不是json数据,social无法自己解析,需重写方法自定义解析</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@params</span>:</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title class_">AccessGrant</span> <span class="hljs-title function_">postForAccessGrant</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> accessTokenUrl, <span class="hljs-title class_">MultiValueMap</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt; parameters</span>) &#123;<br><br>        <span class="hljs-title class_">String</span> responseStr=<span class="hljs-title function_">getRestTemplate</span>().<span class="hljs-title function_">postForObject</span>(accessTokenUrl,parameters,<span class="hljs-title class_">String</span>.<span class="hljs-property">class</span>);<br>        log.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;获取accessToken的响应:&quot;</span>+responseStr);<br><br>        <span class="hljs-title class_">String</span>[] items=responseStr.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&amp;&quot;</span>);<br><br>        <span class="hljs-title class_">String</span> accessToken = items[<span class="hljs-number">0</span>].<span class="hljs-title function_">substring</span>(items[<span class="hljs-number">0</span>].<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;=&quot;</span>)+<span class="hljs-number">1</span>);<br>        log.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;accessToken:&quot;</span>+accessToken);<br>        <span class="hljs-title class_">Long</span> expiresIn = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Long</span>(items[<span class="hljs-number">1</span>].<span class="hljs-title function_">substring</span>(items[<span class="hljs-number">1</span>].<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;=&quot;</span>)+<span class="hljs-number">1</span>));<br>        log.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;expiresIn:&quot;</span>+expiresIn);<br>        <span class="hljs-title class_">String</span> refreshToken = items[<span class="hljs-number">2</span>].<span class="hljs-title function_">substring</span>(items[<span class="hljs-number">2</span>].<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;=&quot;</span>)+<span class="hljs-number">1</span>);<br>        log.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;refreshToken:&quot;</span>+refreshToken);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccessGrant</span>(accessToken,<span class="hljs-literal">null</span>,refreshToken,expiresIn);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-构建API-用户封装token换取的第三方用户信息"><a href="#2-构建API-用户封装token换取的第三方用户信息" class="headerlink" title="2.构建API (用户封装token换取的第三方用户信息)"></a>2.构建API (用户封装token换取的第三方用户信息)</h2><p>创建QQApi 实现 继承AbstractOAuth2ApiBinding 类,重写getUserInfo方法<br>使用getRestTemplate可以向第三方应用发送请求并获取响应信息.</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">QQImpl</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">AbstractOAuth2ApiBinding</span></span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">QQ</span></span> </span>&#123;<br><span class="hljs-comment">//    获取用户openId的url</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span>  <span class="hljs-keyword">String</span> URL_GET_OPENID = <span class="hljs-string">&quot;https://graph.qq.com/oauth2.0/me?access_token=%s&quot;</span>;<br><span class="hljs-comment">//      获取用户信息的 url</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span>  <span class="hljs-keyword">String</span> URL_GET_USER_INFO = <span class="hljs-string">&quot;https://graph.qq.com/user/get_user_info?oauth_consumer_key=%s&amp;openid=%s&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> appId;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> openId;<br><br>    <span class="hljs-keyword">private</span> ObjectMapper objectMapper = <span class="hljs-keyword">new</span><span class="hljs-type"></span> ObjectMapper();<br><br>    <span class="hljs-keyword">public</span> QQImpl(<span class="hljs-keyword">String</span> accessToken , <span class="hljs-keyword">String</span> appId)&#123;<br>        <span class="hljs-keyword">super</span>(accessToken, TokenStrategy.ACCESS_TOKEN_PARAMETER);<br><br>        <span class="hljs-built_in">this</span>.appId=appId;<br><br>        <span class="hljs-keyword">String</span> url = <span class="hljs-keyword">String</span>.format(URL_GET_OPENID,accessToken);<br><br>        <span class="hljs-keyword">String</span> openid_result=getRestTemplate().getForObject(url,<span class="hljs-keyword">String</span>.class);<br><br>        log.info(<span class="hljs-string">&quot;openid_result::::::&quot;</span>+openid_result);<br>        <span class="hljs-keyword">String</span> openid=StringUtils.substringBetween(openid_result,<span class="hljs-string">&quot;\&quot;openid\&quot;:\&quot;&quot;</span>,<span class="hljs-string">&quot;\&quot;&#125;&quot;</span>);<br><br><br>        <span class="hljs-built_in">this</span>.openId = openid;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> QQUserInfo getQQUserInfo() &#123;<br><br>        <span class="hljs-keyword">String</span> user_info_url = <span class="hljs-keyword">String</span>.format(URL_GET_USER_INFO,appId,openId);<br><br>        <span class="hljs-keyword">String</span> user_info_result=getRestTemplate().getForObject(user_info_url,<span class="hljs-keyword">String</span>.class);<br><br>        log.info(<span class="hljs-string">&quot;user_info_result:::&quot;</span>+user_info_result);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            QQUserInfo userInfo = objectMapper.readValue(user_info_result, QQUserInfo.class);<br>            userInfo.setOpenId(openId);<br>            <span class="hljs-keyword">return</span> userInfo;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-通过template与api构建provider"><a href="#3-通过template与api构建provider" class="headerlink" title="3.通过template与api构建provider"></a>3.通过template与api构建provider</h2><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-title class_"><span class="hljs-keyword">class</span> <span class="hljs-title">QQServiceProvider</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">AbstractOAuth2ServiceProvider</span></span>&lt;<span class="hljs-title">QQ</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> appId;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> URL_AUTHOREIZE = <span class="hljs-string">&quot;https://graph.qq.com/oauth2.0/authorize&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">String</span> URL_ACCESS_TOKEN = <span class="hljs-string">&quot;https://graph.qq.com/oauth2.0/token&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> QQServiceProvider(<span class="hljs-keyword">String</span> appId,<span class="hljs-keyword">String</span> appSecret) &#123;<br>        <span class="hljs-keyword">super</span>(<span class="hljs-keyword">new</span><span class="hljs-type"></span> QQOAuth2Template(appId,appSecret,URL_AUTHOREIZE,URL_ACCESS_TOKEN));<br>        <span class="hljs-built_in">this</span>.appId=appId;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> QQ getApi(<span class="hljs-keyword">String</span> accessToken) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type"></span> QQImpl(accessToken,appId);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="构建连接工厂-ConnectionFactory"><a href="#构建连接工厂-ConnectionFactory" class="headerlink" title="构建连接工厂(ConnectionFactory)"></a>构建连接工厂(ConnectionFactory)</h1><h2 id="1-构建ApiAdaptor"><a href="#1-构建ApiAdaptor" class="headerlink" title="1.构建ApiAdaptor"></a>1.构建ApiAdaptor</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QQAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApiAdapter</span>&lt;<span class="hljs-variable constant_">QQ</span>&gt; &#123;<br><br><span class="hljs-comment">//    测试服务是否连接状态</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">QQ qq</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br><span class="hljs-comment">//    常规数据项</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setConnectionValues</span>(<span class="hljs-params">QQ qq, <span class="hljs-title class_">ConnectionValues</span> connectionValues</span>) &#123;<br>        <span class="hljs-title class_">QQUserInfo</span> userInfo = qq.<span class="hljs-title function_">getQQUserInfo</span>();<br><br>        connectionValues.<span class="hljs-title function_">setDisplayName</span>(userInfo.<span class="hljs-title function_">getNickname</span>());<br>        connectionValues.<span class="hljs-title function_">setImageUrl</span>(userInfo.<span class="hljs-title function_">getFigureurl_qq_1</span>());<br>        connectionValues.<span class="hljs-title function_">setProfileUrl</span>(<span class="hljs-literal">null</span>);  <span class="hljs-comment">//个人主页</span><br>        connectionValues.<span class="hljs-title function_">setProviderUserId</span>(userInfo.<span class="hljs-title function_">getOpenId</span>());<br><br>    &#125;<br>    <span class="hljs-comment">// 获取用户信息 绑定解绑</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">UserProfile</span> <span class="hljs-title function_">fetchUserProfile</span>(<span class="hljs-params">QQ qq</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">updateStatus</span>(<span class="hljs-params">QQ qq, <span class="hljs-title class_">String</span> s</span>) &#123;<br><br><span class="hljs-comment">//</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-使用Adapter与serviceProvider构建connectionFactory"><a href="#2-使用Adapter与serviceProvider构建connectionFactory" class="headerlink" title="2.使用Adapter与serviceProvider构建connectionFactory"></a>2.使用Adapter与serviceProvider构建connectionFactory</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-meta">@ConditionalOnProperty</span>(prefix = <span class="hljs-string">&quot;com.xjc.security.social.qq&quot;</span>,name = <span class="hljs-string">&quot;appId&quot;</span>) <span class="hljs-comment">//只有配置了qq的AppID此配置才生效, QQ登录才生效</span><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QQConnectionFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OAuth2ConnectionFactory&lt;QQ&gt;</span> </span>&#123;<br><br>    public <span class="hljs-type">QQConnectionFactory</span>(<span class="hljs-type">String</span> providerId, <span class="hljs-type">String</span> appId,<span class="hljs-type">String</span> appSecret) &#123;<br>        <span class="hljs-keyword">super</span>(providerId, <span class="hljs-keyword">new</span> <span class="hljs-type">QQServiceProvider</span>(appId,appSecret), <span class="hljs-keyword">new</span> <span class="hljs-type">QQAdapter</span>());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="配置Social"><a href="#配置Social" class="headerlink" title="配置Social"></a>配置Social</h1><h2 id="1-创建Social表对象"><a href="#1-创建Social表对象" class="headerlink" title="1.创建Social表对象"></a>1.创建Social表对象</h2><p>第三方应用于本地应用用户关系对应表</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">CREATE TABLE `userconnection` (<br>  `userId` varchar(<span class="hljs-number">255</span>) <span class="hljs-literal">NOT</span> NULL,<br>  `providerId` varchar(<span class="hljs-number">255</span>) <span class="hljs-literal">NOT</span> NULL,<br>  `providerUserId` varchar(<span class="hljs-number">255</span>) <span class="hljs-literal">NOT</span> NULL,<br>  `rank` int(<span class="hljs-number">11</span>) <span class="hljs-literal">NOT</span> NULL,<br>  `displayName` varchar(<span class="hljs-number">255</span>) DEFAULT NULL,<br>  `profileUrl` varchar(<span class="hljs-number">512</span>) DEFAULT NULL,<br>  `imageUrl` varchar(<span class="hljs-number">512</span>) DEFAULT NULL,<br>  `accessToken` varchar(<span class="hljs-number">512</span>) <span class="hljs-literal">NOT</span> NULL,<br>  `secret` varchar(<span class="hljs-number">512</span>) DEFAULT NULL,<br>  `refreshToken` varchar(<span class="hljs-number">512</span>) DEFAULT NULL,<br>  `expireTime` bigint(<span class="hljs-number">20</span>) DEFAULT NULL,<br>  PRIMARY KEY (`userId`,`providerId`,`providerUserId`),<br>  UNIQUE KEY `UserConnectionRank` (`userId`,`providerId`,`rank`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="2-SocialConfigure-继承SocialConfigurerAdapter"><a href="#2-SocialConfigure-继承SocialConfigurerAdapter" class="headerlink" title="2.SocialConfigure (继承SocialConfigurerAdapter&lt;适配器&gt;)"></a>2.SocialConfigure (继承SocialConfigurerAdapter&lt;适配器&gt;)</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: xjc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/11/29 11:35</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> QQ登录适配器</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *      配置此适配器后,第三方登录生效,拦截url请求为 /oauth/&lt;providerId&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@ConditionalOnProperty</span>(prefix = <span class="hljs-string">&quot;com.xjc.security.social.qq&quot;</span>,name = <span class="hljs-string">&quot;appId&quot;</span>) <span class="hljs-comment">//只有配置了qq的AppID此配置才生效, QQ登录才生效</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QQAutoConfigurerAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">SocialConfigurerAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">UserService</span> userService;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">SsoSecurityProperties</span> ssoSecurityProperties;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title class_">DataSource</span> dataSource;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>:xjc</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>:2018/12/2</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span>: spring-oauth2.0包之后必须重写该方法 返回主项目中对应userId,</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">UserIdSource</span> <span class="hljs-title function_">getUserIdSource</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> userService;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">addConnectionFactories</span>(<span class="hljs-params"><span class="hljs-title class_">ConnectionFactoryConfigurer</span> configurer,</span><br><span class="hljs-params">                                       <span class="hljs-title class_">Environment</span> environment</span>) &#123;<br>        configurer.<span class="hljs-title function_">addConnectionFactory</span>(<span class="hljs-title function_">createConnectionFactory</span>());<br>    &#125;<br><br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-title class_">ConnectionFactory</span>&lt;?&gt; <span class="hljs-title function_">createConnectionFactory</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title class_">QQProperties</span> qqProperties=ssoSecurityProperties.<span class="hljs-title function_">getSocial</span>().<span class="hljs-title function_">getQq</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QQConnectionFactory</span>(qqProperties.<span class="hljs-title function_">getProviderId</span>(), qqProperties.<span class="hljs-title function_">getAppId</span>(), qqProperties.<span class="hljs-title function_">getAppSecret</span>());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>:xjc</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>:2018/12/1</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span>:  这里注意:必须复写 getUsersConnectionRepository方法,jdbcRepository才生效</span><br><span class="hljs-comment">     *            可能我没有设置配置文件优先级</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@params</span>:</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span>                                                               <span class="hljs-comment">//SpringSocial 包含</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">UsersConnectionRepository</span> <span class="hljs-title function_">getUsersConnectionRepository</span>(<span class="hljs-params"><span class="hljs-title class_">ConnectionFactoryLocator</span> connectionFactoryLocator</span>) &#123;<br><br>        <span class="hljs-title class_">JdbcUsersConnectionRepository</span> repository = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcUsersConnectionRepository</span>(dataSource, connectionFactoryLocator, <span class="hljs-title class_">Encryptors</span>.<span class="hljs-title function_">noOpText</span>());<br>  操作<br>        <span class="hljs-comment">//repository.setTablePrefix();   //设置表前缀(可选)</span><br>       <span class="hljs-comment">// repository.setConnectionSignUp(); // 注册操作</span><br><br>      <span class="hljs-comment">/*repository.setConnectionSignUp(new ConnectionSignUp() &#123;</span><br><span class="hljs-comment">           @Override</span><br><span class="hljs-comment">           public String execute(Connection&lt;?&gt; connection) &#123;</span><br><span class="hljs-comment">               return getUserIdSource().getUserId();</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;);*/</span><br>        <span class="hljs-keyword">return</span>  repository;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="3-在security配置启动中加入Social拦截器配置"><a href="#3-在security配置启动中加入Social拦截器配置" class="headerlink" title="3.在security配置启动中加入Social拦截器配置"></a>3.在security配置启动中加入Social拦截器配置</h2><p><img src="https://user-images.githubusercontent.com/34369858/50052504-fe364080-015f-11e9-81cf-e5e54d2a8bbf.png" alt="image"></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li><p>QQ显示错误的回调<br><img src="https://user-images.githubusercontent.com/34369858/50052513-363d8380-0160-11e9-8a5a-e5ce422a5ff7.png" alt="image"><br>原因,回调地址为localhost:8080….. 与互联上配置的不一致.<br>解决: 修改本地host文件,映射localhost与QQ互联上的回调域名一致</p></li><li><p>登录成功跳转&#x2F;sinIn 路径<br>原因:登录成功 spring-social会使用jdbcRepository(自己配置的)查询数据库中是否有对应的openId(在数据库中为providerUserId ),若没有.会默认跳往&#x2F;sinIn 进行注册<br>解决:在SocialConifg配置中自定义注册页面<br><img src="https://user-images.githubusercontent.com/34369858/50052533-8e748580-0160-11e9-8638-b6d89864acd9.png" alt="image"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webupload+springboot实现文件上传</title>
    <link href="/posts/26505/"/>
    <url>/posts/26505/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-webupload-实现文件分片上传"><a href="#使用-webupload-实现文件分片上传" class="headerlink" title="使用 webupload 实现文件分片上传"></a>使用 webupload 实现文件分片上传</h1><h2 id="Web-Uploader"><a href="#Web-Uploader" class="headerlink" title="Web Uploader"></a>Web Uploader</h2><p><a href="http://fex.baidu.com/webuploader/">WebUploader</a>是由 Baidu WebFE(FEX)团队开发的一个简单的以 HTML5 为主，FLASH 为辅的现代文件上传组件。在现代的浏览器里面能充分发挥 HTML5 的优势，同时又不摒弃主流 IE 浏览器，沿用原来的 FLASH 运行时，兼容 IE6+，iOS 6+, android 4+。两套运行时，同样的调用方式，可供用户任意选用。采用大文件分片并发上传，极大的提高了文件上传效率。</p><ol><li>创建 upload 项目并引入 jar 包及 webupload 组件</li></ol><ul><li><p>主要 pom 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--druid--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--MySQL Driver--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.38<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--junit--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--spring data jpa--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.data<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li><li><p>引入 webupload 组件<br><img src="https://user-images.githubusercontent.com/34369858/48812575-edb3c580-ed6d-11e8-8182-fd1ef64fc631.png" alt="image"></p></li></ul><hr><ol start="2"><li>创建实体对象<br><img src="https://user-images.githubusercontent.com/34369858/48812605-1d62cd80-ed6e-11e8-8ff7-f513dc365432.png" alt="image"></li></ol><ul><li><p>FileEntity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.entity;<br><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.Setter;<br><span class="hljs-keyword">import</span> javax.persistence.*;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: xjc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/11/20 15:12</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span></span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name=&quot;file&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileEntity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@Column(name = &quot;id&quot;)</span><br>    <span class="hljs-keyword">private</span> String id;<br><br>    <span class="hljs-comment">//    文件类型  type</span><br>    <span class="hljs-meta">@Column(name=&quot;type&quot;)</span><br>    <span class="hljs-keyword">private</span> String type;<br><br>    <span class="hljs-comment">//    文件后缀  fix</span><br>    <span class="hljs-meta">@Column(name=&quot;fix&quot;)</span><br>    <span class="hljs-keyword">private</span> String fix;<br><br>    <span class="hljs-comment">//    文件名 name</span><br>    <span class="hljs-meta">@Column(name=&quot;name&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-comment">//    创建者 creator</span><br>    <span class="hljs-meta">@Column(name=&quot;user_id&quot;)</span><br>    <span class="hljs-keyword">private</span> Long userId;<br><br>    <span class="hljs-comment">//    文件大小  size</span><br>    <span class="hljs-meta">@Column(name=&quot;size&quot;)</span><br>    <span class="hljs-keyword">private</span> Long size;<br><br>    <span class="hljs-comment">//    文件地址  path</span><br>    <span class="hljs-meta">@Column(name=&quot;path&quot;)</span><br>    <span class="hljs-keyword">private</span> String path;<br><br>    <span class="hljs-comment">//    备注信息  remark</span><br>    <span class="hljs-meta">@Column(name=&quot;remark&quot;)</span><br>    <span class="hljs-keyword">private</span> String remark;<br>    <span class="hljs-comment">//    其他  other</span><br>    <span class="hljs-meta">@Column(name=&quot;other&quot;)</span><br>    <span class="hljs-keyword">private</span> String other;<br><br>    <span class="hljs-keyword">private</span> Date created;<br><br> &#125;<br></code></pre></td></tr></table></figure><ul><li>FileBlock</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@Table(name = &quot;fileBlock&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileBlock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>  <span class="hljs-meta">@Id</span><br>  <span class="hljs-keyword">private</span> String id;<br>  <span class="hljs-comment">// 块下标</span><br>  <span class="hljs-keyword">private</span> String chunk;<br>  <span class="hljs-comment">// 块大小</span><br>  <span class="hljs-keyword">private</span> Long chunkSize;<br>  <span class="hljs-comment">// 块标识</span><br>  <span class="hljs-keyword">private</span> String md5;<br>  <span class="hljs-comment">// 块路径</span><br>  <span class="hljs-keyword">private</span> String path;<br>  <span class="hljs-comment">// 块名称</span><br>  <span class="hljs-keyword">private</span> String name;<br><br>  <span class="hljs-keyword">private</span> Date created;<br>&#125;<br></code></pre></td></tr></table></figure><hr><ol><li>创建页面 html 代码</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--引入CSS--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/css/webuploader.css&quot;</span> /&gt;</span><br>    <span class="hljs-comment">&lt;!--引入JS--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/admin.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/jquery-1.8.3.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/webuploader.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--SWF在初始化的时候指定，在后面将展示--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-id">#ctlBtn</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">top</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">94px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>: <span class="hljs-number">40.8px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">        <span class="hljs-attribute">bottom</span>: auto;</span><br><span class="language-css">        <span class="hljs-attribute">right</span>: auto;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;uploader&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wu-example&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--用来存放文件信息--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;thelist&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;uploader-list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btns&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;picker&quot;</span>&gt;</span>选择文件<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ctlBtn&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-default&quot;</span>&gt;</span>开始上传<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> md5;</span><br><span class="language-javascript">    <span class="hljs-comment">//监听分块上传过程中的三个时间点</span></span><br><span class="language-javascript">    <span class="hljs-title class_">WebUploader</span>.<span class="hljs-property">Uploader</span>.<span class="hljs-title function_">register</span>(</span><br><span class="language-javascript">      &#123;</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;before-send-file&#x27;</span>: <span class="hljs-string">&#x27;beforeSendFile&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;before-send&#x27;</span>: <span class="hljs-string">&#x27;beforeSend&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;after-send-file&#x27;</span>: <span class="hljs-string">&#x27;afterSendFile&#x27;</span>,</span><br><span class="language-javascript">      &#125;,</span><br><span class="language-javascript">      &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">//时间点1：所有分块进行上传之前调用此函数</span></span><br><span class="language-javascript">        <span class="hljs-attr">beforeSendFile</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">file</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">var</span> deferred = <span class="hljs-title class_">WebUploader</span>.<span class="hljs-title class_">Deferred</span>();</span><br><span class="language-javascript">          <span class="hljs-comment">//1、计算文件的唯一标记，用于断点续传</span></span><br><span class="language-javascript">          <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebUploader</span>.<span class="hljs-title class_">Uploader</span>()</span><br><span class="language-javascript">            .<span class="hljs-title function_">md5File</span>(file, <span class="hljs-number">0</span>, <span class="hljs-number">10</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>)</span><br><span class="language-javascript">            .<span class="hljs-title function_">progress</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">percentage</span>) &#123;</span><br><span class="language-javascript">              $(<span class="hljs-string">&#x27;#&#x27;</span> + file.<span class="hljs-property">id</span>)</span><br><span class="language-javascript">                .<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;p.state&#x27;</span>)</span><br><span class="language-javascript">                .<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;正在读取文件信息...&#x27;</span>);</span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">            .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) &#123;</span><br><span class="language-javascript">              md5 = val;</span><br><span class="language-javascript">              $(<span class="hljs-string">&#x27;#&#x27;</span> + file.<span class="hljs-property">id</span>)</span><br><span class="language-javascript">                .<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;p.state&#x27;</span>)</span><br><span class="language-javascript">                .<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;成功获取文件信息...&#x27;</span>);</span><br><span class="language-javascript">              <span class="hljs-comment">//获取文件信息后进入下一步</span></span><br><span class="language-javascript">              deferred.<span class="hljs-title function_">resolve</span>();</span><br><span class="language-javascript">            &#125;);</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> deferred.<span class="hljs-title function_">promise</span>();</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">//时间点2：如果有分块上传，则每个分块上传之前调用此函数</span></span><br><span class="language-javascript">        <span class="hljs-attr">beforeSend</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">block</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">var</span> deferred = <span class="hljs-title class_">WebUploader</span>.<span class="hljs-title class_">Deferred</span>();</span><br><span class="language-javascript">          $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;get&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>: <span class="hljs-variable constant_">BASE_PATH</span> + <span class="hljs-string">&#x27;/file/check&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-comment">//文件唯一标记</span></span><br><span class="language-javascript">              <span class="hljs-attr">md5</span>: md5,</span><br><span class="language-javascript">              <span class="hljs-comment">//当前分块下标</span></span><br><span class="language-javascript">              <span class="hljs-attr">chunk</span>: block.<span class="hljs-property">chunk</span>,</span><br><span class="language-javascript">              <span class="hljs-comment">//当前分块大小</span></span><br><span class="language-javascript">              <span class="hljs-attr">chunkSize</span>: block.<span class="hljs-property">end</span> - block.<span class="hljs-property">start</span>,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-comment">//无缓存</span></span><br><span class="language-javascript">            <span class="hljs-attr">cache</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">            <span class="hljs-comment">//无异步（必须加，否则异步上传会上传已经上传过的块）</span></span><br><span class="language-javascript">            <span class="hljs-attr">async</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">              <span class="hljs-keyword">if</span> (data) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//分块存在，跳过</span></span><br><span class="language-javascript">                deferred.<span class="hljs-title function_">reject</span>();</span><br><span class="language-javascript">              &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">//分块不存在或不完整，重新发送该分块内容</span></span><br><span class="language-javascript">                deferred.<span class="hljs-title function_">resolve</span>();</span><br><span class="language-javascript">              &#125;</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">          &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">owner</span>.<span class="hljs-property">options</span>.<span class="hljs-property">formData</span>.<span class="hljs-property">md5</span> = md5;</span><br><span class="language-javascript">          deferred.<span class="hljs-title function_">resolve</span>();</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span> deferred.<span class="hljs-title function_">promise</span>();</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-comment">// 时间点3：所有分块上传成功后调用此函数</span></span><br><span class="language-javascript">        <span class="hljs-attr">afterSendFile</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">//如果分块上传成功，则通知后台合并分块</span></span><br><span class="language-javascript">          $.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">url</span>: <span class="hljs-variable constant_">BASE_PATH</span> + <span class="hljs-string">&#x27;/file/merge&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">              <span class="hljs-attr">md5</span>: md5,</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;</span><br><span class="language-javascript">              <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;上传成功&#x27;</span>);</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">          &#125;);</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    );</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> uploader = <span class="hljs-title class_">WebUploader</span>.<span class="hljs-title function_">create</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// swf文件路径</span></span><br><span class="language-javascript">      <span class="hljs-attr">swf</span>: <span class="hljs-variable constant_">BASE_PATH</span> + <span class="hljs-string">&#x27;/js/Uploader.swf&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-comment">// 文件接收服务端。</span></span><br><span class="language-javascript">      <span class="hljs-attr">server</span>: <span class="hljs-variable constant_">BASE_PATH</span> + <span class="hljs-string">&#x27;/file/upload&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-comment">// 选择文件的按钮。可选。</span></span><br><span class="language-javascript">      <span class="hljs-comment">// 内部根据当前运行是创建，可能是input元素，也可能是flash.</span></span><br><span class="language-javascript">      <span class="hljs-attr">pick</span>: <span class="hljs-string">&#x27;#picker&#x27;</span>,</span><br><span class="language-javascript">      <span class="hljs-comment">// 不压缩image, 默认如果是jpeg，文件上传前会压缩一把再上传！</span></span><br><span class="language-javascript">      <span class="hljs-attr">resize</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">      <span class="hljs-comment">//开启分片上传</span></span><br><span class="language-javascript">      <span class="hljs-attr">chunked</span>: <span class="hljs-literal">true</span>,</span><br><span class="language-javascript">      <span class="hljs-comment">//分片大小</span></span><br><span class="language-javascript">      <span class="hljs-attr">chunkSize</span>: <span class="hljs-number">10</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>, <span class="hljs-comment">//*10</span></span><br><span class="language-javascript">      <span class="hljs-comment">//并发数</span></span><br><span class="language-javascript">      <span class="hljs-attr">threads</span>: <span class="hljs-number">3</span>,</span><br><span class="language-javascript">      <span class="hljs-comment">//请求参数表</span></span><br><span class="language-javascript">      <span class="hljs-comment">// formData:datalist,</span></span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    $(<span class="hljs-string">&#x27;#ctlBtn&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      uploader.<span class="hljs-title function_">upload</span>();</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 当有文件被添加进队列的时候</span></span><br><span class="language-javascript">    uploader.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;fileQueued&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">file</span>) &#123;</span><br><span class="language-javascript">      $(<span class="hljs-string">&#x27;#thelist&#x27;</span>).<span class="hljs-title function_">append</span>(</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;&lt;div id=&quot;&#x27;</span> +</span><br><span class="language-javascript">          file.<span class="hljs-property">id</span> +</span><br><span class="language-javascript">          <span class="hljs-string">&#x27;&quot; class=&quot;item&quot;&gt;&#x27;</span> +</span><br><span class="language-javascript">          <span class="hljs-string">&#x27;&lt;h4 class=&quot;info&quot;&gt;&#x27;</span> +</span><br><span class="language-javascript">          file.<span class="hljs-property">name</span> +</span><br><span class="language-javascript">          <span class="hljs-string">&#x27;&lt;/h4&gt;&#x27;</span> +</span><br><span class="language-javascript">          <span class="hljs-string">&#x27;&lt;p class=&quot;state&quot;&gt;等待上传...&lt;/p&gt;&#x27;</span> +</span><br><span class="language-javascript">          <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="language-javascript">      );</span><br><span class="language-javascript">      <span class="hljs-comment">//暂停上传的文件</span></span><br><span class="language-javascript">      $(<span class="hljs-string">&#x27;#thelist&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.stop&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        uploader.<span class="hljs-title function_">stop</span>(<span class="hljs-literal">true</span>);</span><br><span class="language-javascript">      &#125;),</span><br><span class="language-javascript">        <span class="hljs-comment">//删除上传的文件</span></span><br><span class="language-javascript">        $(<span class="hljs-string">&#x27;#thelist&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-string">&#x27;.remove&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> ($(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.item&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;id&#x27;</span>) === file.<span class="hljs-property">id</span>) &#123;</span><br><span class="language-javascript">            uploader.<span class="hljs-title function_">removeFile</span>(file);</span><br><span class="language-javascript">            $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">parents</span>(<span class="hljs-string">&#x27;.item&#x27;</span>).<span class="hljs-title function_">remove</span>();</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 文件上传过程中创建进度条实时显示。</span></span><br><span class="language-javascript">    uploader.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;uploadProgress&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">file, percentage</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> $li = $(<span class="hljs-string">&#x27;#&#x27;</span> + file.<span class="hljs-property">id</span>);</span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> $percent = $li.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.progress .progress-bar&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 避免重复创建</span></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (!$percent.<span class="hljs-property">length</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// $percent = $(&#x27;&lt;div class=&quot;progress progress-striped active&quot;&gt;&#x27; +</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     &#x27;&lt;div class=&quot;progress-bar&quot; role=&quot;progressbar&quot; style=&quot;width: 0%&quot;&gt;&#x27; +</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     &#x27;&lt;/div&gt;&#x27; +</span></span><br><span class="language-javascript">        <span class="hljs-comment">//     &#x27;&lt;/div&gt;&#x27;).appendTo($li).find(&#x27;.progress-bar&#x27;);</span></span><br><span class="language-javascript">        $percent = $(</span><br><span class="language-javascript">          <span class="hljs-string">&#x27;&lt;div class=&quot;progress progress-striped active&quot;&gt;&#x27;</span> +</span><br><span class="language-javascript">            <span class="hljs-string">&#x27;&lt;div class=&quot;progress-bar&quot; role=&quot;progressbar&quot; style=&quot;width: 0%&quot;&gt;&#x27;</span> +</span><br><span class="language-javascript">            <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span> +</span><br><span class="language-javascript">            <span class="hljs-string">&#x27;&lt;/div&gt;&#x27;</span></span><br><span class="language-javascript">        )</span><br><span class="language-javascript">          .<span class="hljs-title function_">appendTo</span>($li)</span><br><span class="language-javascript">          .<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.progress&#x27;</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      $li.<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;p.state&#x27;</span>).<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;上传中&#x27;</span>);</span><br><span class="language-javascript">      $percent.<span class="hljs-title function_">css</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">width</span>: percentage * <span class="hljs-number">100</span> + <span class="hljs-string">&#x27;%&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">height</span>: <span class="hljs-number">10</span>,</span><br><span class="language-javascript">        <span class="hljs-string">&#x27;background-color&#x27;</span>: <span class="hljs-string">&#x27;blue&#x27;</span>,</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    uploader.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;uploadSuccess&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">file</span>) &#123;</span><br><span class="language-javascript">      $(<span class="hljs-string">&#x27;#&#x27;</span> + file.<span class="hljs-property">id</span>)</span><br><span class="language-javascript">        .<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;p.state&#x27;</span>)</span><br><span class="language-javascript">        .<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;已上传&#x27;</span>);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    uploader.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;uploadError&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">file</span>) &#123;</span><br><span class="language-javascript">      $(<span class="hljs-string">&#x27;#&#x27;</span> + file.<span class="hljs-property">id</span>)</span><br><span class="language-javascript">        .<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;p.state&#x27;</span>)</span><br><span class="language-javascript">        .<span class="hljs-title function_">text</span>(<span class="hljs-string">&#x27;上传出错&#x27;</span>);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    uploader.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;uploadComplete&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">file</span>) &#123;</span><br><span class="language-javascript">      $(<span class="hljs-string">&#x27;#&#x27;</span> + file.<span class="hljs-property">id</span>)</span><br><span class="language-javascript">        .<span class="hljs-title function_">find</span>(<span class="hljs-string">&#x27;.progress&#x27;</span>)</span><br><span class="language-javascript">        .<span class="hljs-title function_">fadeOut</span>();</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>页面展示:<br> <img src="https://user-images.githubusercontent.com/34369858/48812932-8e56b500-ed6f-11e8-96a9-71cd7ec0a1d7.png" alt="image"><br><strong>选择文件并上传,webupload 会将文件分成片段通过多线程向服务器发送请求</strong><br> <img src="https://user-images.githubusercontent.com/34369858/48813019-ef7e8880-ed6f-11e8-9b6a-c7642dd0a17b.png" alt="image"><br>主要分为三个请求:<strong>upload</strong>(上传片段),<strong>check</strong>(检验片段是否存在),<strong>merge</strong>(全部上传成功后合并片段)</p><hr><ol start="4"><li>在服务器端完成文件分片上传操作</li></ol><ul><li><p>创建 FileEntityController 接受页面请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: xjc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/11/20 15:49</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span></span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/file/&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileEntityController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">protected</span> FileEntityService service;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">protected</span> FileBlockService fileBlockService;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;tempPath&#125;&quot;)</span><br>    <span class="hljs-keyword">protected</span> String tempPath;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;basePath&#125;&quot;)</span><br>    <span class="hljs-keyword">protected</span> String basePath;<br><br>    <span class="hljs-meta">@GetMapping( &quot;/get/&#123;md5&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">file</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String md5)</span>&#123;<br><br>        <span class="hljs-type">Response</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> service.findById(md5);<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>:xjc</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>:2018/11/20</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span>:文件分片上传</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@params</span>:文件,整个文件的md5,片号,文件名,分片总数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;upload&quot;)</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;file&quot;)</span> MultipartFile file,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(value = &quot;md5&quot;)</span> String md5,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(value = &quot;chunk&quot;, defaultValue = &quot;0&quot;, required = false)</span> String chunk,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(value = &quot;name&quot;)</span> String name,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(value = &quot;chunks&quot;, defaultValue = &quot;0&quot;, required = false)</span> String chunks,</span><br><span class="hljs-params">                           <span class="hljs-meta">@RequestParam(value = &quot;type&quot;)</span> String type</span><br><span class="hljs-params">                           )</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">uploadPath</span> <span class="hljs-operator">=</span> tempPath + <span class="hljs-string">&quot;\\###&quot;</span> + chunk + <span class="hljs-string">&quot;###&quot;</span> + name;<br><span class="hljs-comment">//        判断大文件是否存在</span><br>        <span class="hljs-keyword">if</span>(service.findById(md5).getStatus()!=<span class="hljs-number">200</span>)&#123;<br><span class="hljs-comment">//            由于webUpload多线程上传,所以要加锁</span><br>            <span class="hljs-keyword">synchronized</span> (FileEntityService.class) &#123;<br>                <span class="hljs-keyword">if</span> (service.findById(md5).getStatus() != <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-comment">//          保存FileEntity到数据库中</span><br>                    <span class="hljs-type">FileEntity</span> <span class="hljs-variable">fileEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileEntity</span>();<br>                    fileEntity.setId(md5);<br>                    fileEntity.setCreated(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>                    fileEntity.setType(type);<br>                    fileEntity.setFix(name.substring(name.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>) + <span class="hljs-number">1</span>));<br>                    fileEntity.setName(name);<br>                    fileEntity.setSize(file.getSize());<br>                    <span class="hljs-comment">//            fileEntity.setPath();</span><br><br>                    <span class="hljs-comment">//            fileEntity.setUserId();</span><br>                    <span class="hljs-comment">//          保存文件到数据库中</span><br>                    service.save(fileEntity);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * webUpload请求判断重复</span><br><span class="hljs-comment">        * */</span><br><br><span class="hljs-comment">//        判断文件片段是否存在</span><br><span class="hljs-comment">//        FileBlock fileBlock = fileBlockService.findByMd5AndChunk(md5, chunk);</span><br><span class="hljs-comment">//        if(fileBlock!=null)&#123;</span><br><span class="hljs-comment">////            判断文件大小是否一样</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">////            由于数据库记录存上了,.所以不需要判断是否完成上传,直接返回上传成功</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        &#125;</span><br><span class="hljs-comment">//        if(fileBlock!=null)</span><br><span class="hljs-comment">//            return Response.ok();</span><br><br>        <span class="hljs-comment">//            开始上传文件片段</span><br>        service.upload(file, chunk, name, uploadPath);<br><br>        <span class="hljs-comment">//            上传成功保存到数据库中</span><br><br>        <span class="hljs-type">FileBlock</span> <span class="hljs-variable">fileBlock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileBlock</span>();<br><br>        fileBlock.setId(Sid.next());<br>        fileBlock.setMd5(md5);<br>        fileBlock.setChunk(chunk);<br>        fileBlock.setChunkSize(file.getSize());<br>        fileBlock.setPath(uploadPath);<br>        fileBlock.setName(<span class="hljs-string">&quot;###&quot;</span> + chunk + <span class="hljs-string">&quot;###&quot;</span> + name);<br>        fileBlock.setCreated(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>        fileBlockService.save(fileBlock);<br><br>        <span class="hljs-keyword">return</span> Response.ok();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>:xjc</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>:2018/11/20</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span>:检查片段是否已经上传</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@params</span>:</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;check&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;md5&quot;)</span> String md5,</span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam(value = &quot;chunk&quot;)</span> String chunk</span><br><span class="hljs-params">                         )</span>&#123;<br><br>        <span class="hljs-type">FileBlock</span> <span class="hljs-variable">fileBlock</span> <span class="hljs-operator">=</span> fileBlockService.findByMd5AndChunk(md5, chunk);<br>        <span class="hljs-keyword">if</span>(fileBlock==<span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">synchronized</span> (FileBlock.class) &#123;<br>                <span class="hljs-keyword">if</span>(fileBlockService.findByMd5AndChunk(md5, chunk)==<span class="hljs-literal">null</span>)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>:xjc</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>:2018/11/20</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span>:合并片段</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@params</span>:</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;merge&quot;)</span><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;md5&quot;)</span> String md5)</span>&#123;<br><br><span class="hljs-comment">//        查询所有md5片段集合(该集合是无顺序的),转换顺序</span><br>        List&lt;FileBlock&gt; list = fileBlockService.findByMd5(md5);<br><br>        String[] paths=<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[list.size()];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;list.size();i++)&#123;<br>            FileBlock fileBlock=list.get(i);<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> fileBlock.getPath();<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">chunk</span> <span class="hljs-operator">=</span> Integer.parseInt(fileBlock.getChunk());<br>            paths[chunk]=path;<br>        &#125;<br><br><span class="hljs-comment">//        final String[] path, final String finalSavePath</span><br>        <span class="hljs-keyword">if</span>(list.size()==<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> Response.error();<br>        FileBlock fileBlock=list.get(<span class="hljs-number">0</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> fileBlock.getPath();<br>        String[] split = path.split(<span class="hljs-string">&quot;###&quot;</span>);<br>        String name=split[<span class="hljs-number">2</span>];<br>        String savePath=basePath+<span class="hljs-string">&quot;\\&quot;</span>+name;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            FileUtils.mergeFile(paths,savePath);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> Response.error();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> Response.ok();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>FileEntityService 与 FileBlockService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: xjc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/11/20 15:33</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span></span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileEntityService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    FileEntityRepository fileEntityRepository;<br><br>    <span class="hljs-keyword">public</span> Response <span class="hljs-title function_">findById</span><span class="hljs-params">(String md5)</span>&#123;<br>        <span class="hljs-keyword">if</span>(md5==<span class="hljs-literal">null</span>||<span class="hljs-string">&quot;&quot;</span>.equals(md5))<br>            <span class="hljs-keyword">return</span> Response.error(<span class="hljs-string">&quot;null&quot;</span>);<br><br>        <span class="hljs-type">FileEntity</span> <span class="hljs-variable">fileEntity</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//        没找到会报错</span><br>            fileEntity = fileEntityRepository.findById(md5).get();<br>             <span class="hljs-keyword">return</span> Response.ok(<span class="hljs-string">&quot;OK&quot;</span>,fileEntity);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(FileEntityService.class+<span class="hljs-string">&quot;找不到ID:::&quot;</span>+md5);<br>            <span class="hljs-keyword">return</span> Response.error(<span class="hljs-string">&quot;null&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">upload</span><span class="hljs-params">(MultipartFile file, String chunk, String name,String uploadPath)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//            上传片段</span><br>            FileUtils.uploaded(file,uploadPath);<br><span class="hljs-comment">//            成功存储数据到数据库</span><br>            <span class="hljs-type">FileBlock</span> <span class="hljs-variable">fileBlock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileBlock</span>();<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(FileEntity fileEntity)</span>&#123;<br><br>        fileEntityRepository.save(fileEntity);<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">package</span> com.example.serivce;<br><br><span class="hljs-keyword">import</span> com.example.entity.FileBlock;<br><span class="hljs-keyword">import</span> com.example.repository.FileBlockRepository;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: xjc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/11/20 20:40</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span></span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileBlockService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">protected</span> FileBlockRepository repository;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(FileBlock fileBlock)</span>&#123;<br><br>        repository.save(fileBlock);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;FileBlock&gt; <span class="hljs-title function_">findByMd5</span><span class="hljs-params">(String md5)</span>&#123;<br><br>        <span class="hljs-keyword">return</span> repository.findByMd5(md5);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> FileBlock <span class="hljs-title function_">findByMd5AndChunk</span><span class="hljs-params">(String md5,String chunk)</span>&#123;<br><br>        <span class="hljs-keyword">return</span>  repository.findByMd5AndChunk(md5,chunk);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>FileUtils(文件读写与合并)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.common;<br><br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.nio.channels.FileChannel;<br><span class="hljs-keyword">import</span> java.nio.channels.WritableByteChannel;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: xjc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/11/20 19:01</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span></span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUtils</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">uploaded</span><span class="hljs-params">( MultipartFile file,</span><br><span class="hljs-params">//                                        <span class="hljs-keyword">final</span> String md5,</span><br><span class="hljs-params">//                                       <span class="hljs-keyword">final</span> String guid,</span><br><span class="hljs-params">//                                       <span class="hljs-keyword">final</span> String chunk,</span><br><span class="hljs-params">                                       <span class="hljs-keyword">final</span> String uploadFolderPath</span><br><span class="hljs-params">//                                       <span class="hljs-keyword">final</span> String fileName,</span><br><span class="hljs-params">//                                       <span class="hljs-keyword">final</span> String ext,</span><br><span class="hljs-params">//                                       <span class="hljs-keyword">final</span> String filePath)</span><br>    )<span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">uploadFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(uploadFolderPath);<br>        <span class="hljs-keyword">if</span>(uploadFile.exists())&#123;<br>            uploadFile.delete();<br>        &#125;<br>        <span class="hljs-type">byte</span>[] data = readInputStream(file.getInputStream());<br><br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">outStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(uploadFile)) &#123;<span class="hljs-comment">//写入数据</span><br>            outStream.write(data);<br>            outStream.flush();<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] readInputStream(InputStream inStream) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">outStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-comment">//创建一个Buffer字符串</span><br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-comment">//每次读取的字符串长度，如果为-1，代表全部读取完毕</span><br>        <span class="hljs-type">int</span> len;<br>        <span class="hljs-comment">//使用一个输入流从buffer里把数据读取出来</span><br>        <span class="hljs-keyword">while</span> ((len = inStream.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">//用输出流往buffer里写入数据，中间参数代表从哪个位置开始读，len代表读取的长度</span><br>            outStream.write(buffer, <span class="hljs-number">0</span>, len);<br>        &#125;<br>        <span class="hljs-comment">//关闭输入流</span><br>        inStream.close();<br>        <span class="hljs-comment">//把outStream里的数据写入内存</span><br>        <span class="hljs-keyword">return</span> outStream.toByteArray();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@author</span>:xjc</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@date</span>:2018/11/20</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span>:合并文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@params</span>:</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeFile</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String[] paths, <span class="hljs-keyword">final</span> String finalSavePath)</span><br>            <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">if</span>(paths.length==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-comment">//            不需要合并</span><br>            InputStream is= <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(paths[<span class="hljs-number">0</span>]);<br>            saveStreamToFile(is,finalSavePath);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br><span class="hljs-comment">//        SequenceInputStream s ;</span><br><span class="hljs-comment">////        InputStream s1 = new FileInputStream(list.get(0).getPath());</span><br><span class="hljs-comment">////        InputStream s2 = new FileInputStream(list.get(1).getPath());</span><br><span class="hljs-comment">////        s = new SequenceInputStream(s1, s2);</span><br><span class="hljs-comment">////        for (int i=2;i&lt;list.size();i++) &#123;</span><br><span class="hljs-comment">////            InputStream s3 = new FileInputStream(list.get(i).getPath());</span><br><span class="hljs-comment">////            s = new SequenceInputStream(s, s3);</span><br><span class="hljs-comment">////        &#125;</span><br><span class="hljs-comment">////</span><br><span class="hljs-comment">////        //通过输出流向文件写入数据</span><br><span class="hljs-comment">////        saveStreamToFile(s, finalSavePath);</span><br><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(finalSavePath));<br>        <span class="hljs-type">WritableByteChannel</span> <span class="hljs-variable">targetChannel</span> <span class="hljs-operator">=</span> output.getChannel();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; i&lt;paths.length; i++)&#123;<br>            <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(paths[i]);<br>            <span class="hljs-type">FileChannel</span> <span class="hljs-variable">inputChannel</span> <span class="hljs-operator">=</span> input.getChannel();<br><br>            inputChannel.transferTo(<span class="hljs-number">0</span>, inputChannel.size(), targetChannel);<br><br>            inputChannel.close();<br>            input.close();<br>        &#125;<br>        targetChannel.close();<br>        output.close();<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从stream中保存文件</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputStream inputStream</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filePath    保存路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception 异常 抛异常代表失败了</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveStreamToFile</span><span class="hljs-params">( <span class="hljs-keyword">final</span> InputStream inputStream,</span><br><span class="hljs-params">                                         <span class="hljs-keyword">final</span> String filePath)</span><br>            <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">/*创建输出流，写入数据，合并分块*/</span><br>        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath);<br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> ((len = inputStream.read(buffer)) != -<span class="hljs-number">1</span>) &#123;<br>                outputStream.write(buffer, <span class="hljs-number">0</span>, len);<br>                outputStream.flush();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            outputStream.close();<br>            inputStream.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot自动注入出现define报错</title>
    <link href="/posts/21826/"/>
    <url>/posts/21826/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-Autowired无法注入"><a href="#SpringBoot-Autowired无法注入" class="headerlink" title="SpringBoot@Autowired无法注入"></a>SpringBoot@Autowired无法注入</h1><p>搭建完spring boot的demo后自然要实现自动注入来体现spring ioc的便利了，但是我在实施过程中出现了这么一个问题，见下面，这里找到解决办法记录下来，供遇到同样的问题的同僚参考</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">Field baseRedisService <span class="hljs-keyword">in</span> com.itmayiedu.common.base.BaseApiService required a bean of type <span class="hljs-string">&#x27;com.itmayiedu.common.base.BaseRedisService&#x27;</span> that could not be found.<br><br><br>Action:<br><br>Consider defining a bean of type <span class="hljs-string">&#x27;com.itmayiedu.common.base.BaseRedisService&#x27;</span> <span class="hljs-keyword">in</span> your configuration.<br><br><br>Process finished with <span class="hljs-keyword">exit</span> code <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/a532672728/article/details/77702772">百度答案参考</a><br>根据英文的提示是在配置中找不到一个指定自动注入类型的bean，经过多方排查得出结论：</p><ul><li>正常情况下加上@Component注解的类会自动被Spring扫描到生成Bean注册到spring容器中，既然他说没找到，也就是该注解被没有被spring识别，问题的核心关键就在application类的注解SpringBootApplication上</li><li>这个注解其实相当于下面这一堆注解的效果，其中一个注解就是@Component，在默认情况下只能扫描与控制器在同一个包下以及其子包下的@Component注解，以及能将指定注解的类自动注册为Bean的@Service@Controller和@ Repository，至此明白问题所在，之前我将接口与对应实现类放在了与控制器所在包的同一级目录下，这样的注解自然是无法被识别的</li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>至此，得出两种解决办法：<br>　　1 .将接口与对应的实现类放在与application启动类的同一个目录或者他的子目录下，这样注解可以被扫描到，这是最省事的办法<br>　　2 .在指定的application类上加上这么一行注解，手动指定application类要扫描哪些包下的注解</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebSocket与Netty</title>
    <link href="/posts/59299/"/>
    <url>/posts/59299/</url>
    
    <content type="html"><![CDATA[<h1 id="WebSocket-介绍"><a href="#WebSocket-介绍" class="headerlink" title="WebSocket 介绍"></a>WebSocket 介绍</h1><p>WebSocket 是一个协议，归属于 IETF。</p><ul><li>HTTP 是运行在 TCP 协议传输层上的应用协议，而 WebSocket 是通过 HTTP 协议协商如何连接，然后独立运行在 TCP 协议传输层上的应用协议。</li><li>Websocket 是一个持久化的协议，相对于 HTTP 这种非持久的协议来说。</li><li>websocket 约定了一个通信的规范，通过一个握手的机制，客户端和服务器之间能建立一个类似 tcp 的连接，从而方便它们之间的通信</li></ul><h1 id="什么是-Netty"><a href="#什么是-Netty" class="headerlink" title="什么是 Netty"></a>什么是 Netty</h1><ul><li><strong>高性能事件驱动 异步非阻塞</strong></li><li><strong>基于 NIO 的客户端,服务端编程框架</strong></li><li><strong>提供异步的、事件驱动的网络应用程序框架和工具</strong></li></ul><h2 id="简单来说"><a href="#简单来说" class="headerlink" title="简单来说:"></a>简单来说:</h2><ul><li>你想写个 tomcat 一样的 Server，可以用 netty。</li><li>你想写一个即时通讯的应用，可以用 netty。</li><li>你想实现一个高性能 Rpc 框架，可以用 netty。</li></ul><p>netty 的 IO 模型<br><strong>Netty 的 I&#x2F;O 模型基于非阻塞 I&#x2F;O 实现，底层依赖的是 JDK NIO 框架的 Selector。</strong></p><h1 id="Netty-应用范围"><a href="#Netty-应用范围" class="headerlink" title="Netty 应用范围"></a>Netty 应用范围</h1><ul><li>高性能领域(游戏,大数据,分布式)</li><li>多线程并发领域</li><li>异步通信领域</li></ul><h1 id="优点概述"><a href="#优点概述" class="headerlink" title="优点概述"></a>优点概述</h1><p><strong>WebSocket 最大的特点就是长连接，能够实时推送数据。</strong></p><h1 id="使用-Netty-搭建客户端与服务端实时通讯-网络群发"><a href="#使用-Netty-搭建客户端与服务端实时通讯-网络群发" class="headerlink" title="使用 Netty 搭建客户端与服务端实时通讯,网络群发"></a>使用 Netty 搭建客户端与服务端实时通讯,网络群发</h1><p><a href="https://www.imooc.com/video/16465">netty 入门之 webSocket 初体验</a></p><ol><li>创建工程全局配置类.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>:xjc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>:2018/10/26</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>: 存储整个工程的全局配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NettyConfig</span> &#123;<br><span class="hljs-comment">//    全局管道组对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ChannelGroup group=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultChannelGroup</span>(GlobalEventExecutor.INSTANCE);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>初始化 WebSocket 组件(<strong>这里 API 没理解</strong>)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: xjc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/10/26 22:22</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 初始化链接时的各个组件</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWebSocketChannelHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ChannelInitializer</span>&lt;SocketChannel&gt; &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initChannel</span><span class="hljs-params">(SocketChannel e)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//        ------</span><br>        e.pipeline().addLast(<span class="hljs-string">&quot;http-codec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpServerCodec</span>());<br><span class="hljs-comment">//        -----</span><br>        e.pipeline().addLast(<span class="hljs-string">&quot;aggregator&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpObjectAggregator</span>(<span class="hljs-number">65536</span>));<br><span class="hljs-comment">//        ------</span><br>        e.pipeline().addLast(<span class="hljs-string">&quot;http-chunked&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChunkedWriteHandler</span>());<br><span class="hljs-comment">//        -----</span><br>        e.pipeline().addLast(<span class="hljs-string">&quot;handler&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">MySocketHandler</span>());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>创建 MySocketHandler 处理器(实现四个方法)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: xjc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/10/26 21:36</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 接收处理响应websokect请求业务核心逻辑</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MySocketHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimpleChannelInboundHandler</span>&lt;Object&gt; &#123;<br><br>  <span class="hljs-comment">//   核心方法.</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">messageReceived</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">//    客户端与服务端创立连接时调用</span><br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelActive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>  <span class="hljs-comment">//      -----</span><br>          NettyConfig.group.add(ctx.channel());<br><br>          System.out.println(<span class="hljs-string">&quot;客户端与服务端连接开启&quot;</span>);<br>      &#125;<br><br>      <span class="hljs-comment">//    客户端与服务端断开连接时调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelInactive</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        NettyConfig.group.remove(ctx.channel());<br><br>        System.out.println(<span class="hljs-string">&quot;客户端与服务端连接关闭&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//   服务端接收客户端发送过来的数据结束之后调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channelReadComplete</span><span class="hljs-params">(ChannelHandlerContext ctx)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ctx.flush();        <span class="hljs-comment">// ------</span><br>    &#125;<br><br>    <span class="hljs-comment">//  工程出现异常时调用</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exceptionCaught</span><span class="hljs-params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        cause.printStackTrace();<br><br>        ctx.close();  <span class="hljs-comment">//关闭连接</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>定义全局变量(握手对象与 socketURL)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//    ---</span><br>  <span class="hljs-keyword">private</span> WebSocketServerHandshaker handshake;<br><br>  <span class="hljs-comment">//  定义全局变量默认访问路径</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span>  String WEB_SOCKET_URL=<span class="hljs-string">&quot;ws://localhost:8080/websocket&quot;</span>;<br></code></pre></td></tr></table></figure><ol start="5"><li>核心方法(messageReceived)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">//   核心方法.</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">messageReceived</span><span class="hljs-params">(ChannelHandlerContext ctx, Object msg)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>  <span class="hljs-comment">//        表示客户端向服务端发起握手请求;</span><br>    <span class="hljs-keyword">if</span>(msg <span class="hljs-keyword">instanceof</span> FullHttpRequest)<br>    &#123;<br>        handHttpRequest(ctx,(FullHttpRequest)msg);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(msg <span class="hljs-keyword">instanceof</span> WebSocketFrame)<br>    &#123;<br>      <span class="hljs-comment">//            处理websocket连接业务</span><br>        handWebSocketFrame(ctx, (WebSocketFrame) msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="6"><li>实现 handHttpRequest()与 handWebSocketFrame()方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>:xjc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>:2018/10/26</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:处理客户端与服务端之间的websocket业务</span><br><span class="hljs-comment"> */</span><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handWebSocketFrame</span><span class="hljs-params">(ChannelHandlerContext ctx,WebSocketFrame frame)</span>&#123;<br> <span class="hljs-comment">//  判断是否为关闭webSocket指令</span><br>     <span class="hljs-keyword">if</span>(frame <span class="hljs-keyword">instanceof</span> CloseWebSocketFrame)&#123;<br>         handshake.close(ctx.channel(), (CloseWebSocketFrame) frame.retain());<br>     &#125;<br> <span class="hljs-comment">//        判断是否是ping消息</span><br>     <span class="hljs-keyword">if</span>(frame <span class="hljs-keyword">instanceof</span> PingWebSocketFrame)&#123;<br>         ctx.channel().write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PongWebSocketFrame</span>(frame.content().retain()));<br>         <span class="hljs-keyword">return</span> ;<br>     &#125;<br><br> <span class="hljs-comment">//        判断是否是二进制消息,如果是二进制消息,抛出异常</span><br>     <span class="hljs-keyword">if</span>(!(frame <span class="hljs-keyword">instanceof</span> TextWebSocketFrame))&#123;<br>         System.out.println(<span class="hljs-string">&quot;目前不支持二进制消息&quot;</span>);<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-built_in">this</span>.getClass().getName()+<span class="hljs-string">&quot;不支持消息&quot;</span>);<br>     &#125;<br><br> <span class="hljs-comment">//        返回应答消息</span><br>     String request=((TextWebSocketFrame)frame).text();<br>     System.out.println(<span class="hljs-string">&quot;服务端收到客户端消息======&gt;&gt;&gt;&gt;&quot;</span>+request);<br><br>     TextWebSocketFrame tws=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextWebSocketFrame</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toString()+ctx.channel().id()+<span class="hljs-string">&quot;======&gt;&gt;&gt;&quot;</span>+request);<br><br> <span class="hljs-comment">//        群发:服务端向每个链接上的客户端群发消息</span><br>     NettyConfig.group.writeAndFlush(tws);<br><br> &#125;<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@Author</span>:xjc</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@Date</span>:2018/10/26</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@Description</span>: 处理客户端向服务端发起Http请求的业务</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-keyword">private</span>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">handHttpRequest</span><span class="hljs-params">(ChannelHandlerContext ctx,FullHttpRequest req)</span>&#123;<br>     <span class="hljs-keyword">if</span>(!req.getDecoderResult().isSuccess()||!<span class="hljs-string">&quot;websocket&quot;</span>.equals(req.headers().get(<span class="hljs-string">&quot;Upgrade&quot;</span>)))&#123;<br> <span class="hljs-comment">//        不是客户端向客户端发送的Http请求</span><br>         sendHttpRsponse(ctx,req,<span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultFullHttpResponse</span>(HttpVersion.HTTP_1_1, HttpResponseStatus.BAD_REQUEST));<br>         <span class="hljs-keyword">return</span> ;<br>     &#125;<br>     WebSocketServerHandshakerFactory wsFactory=<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketServerHandshakerFactory</span>(WEB_SOCKET_URL,<span class="hljs-literal">null</span>,<span class="hljs-literal">false</span>);<br><br>     handshake =wsFactory.newHandshaker(req);<br><br>     <span class="hljs-keyword">if</span>(handshake==<span class="hljs-literal">null</span>)&#123;<br>         WebSocketServerHandshakerFactory.sendUnsupportedWebSocketVersionResponse(ctx.channel());<br><br>     &#125;<span class="hljs-keyword">else</span>&#123;<br>         handshake.handshake(ctx.channel(),req);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><ol start="7"><li>实现 sendHttpRsponse()服务端向客户端发送请求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@Author</span>:xjc</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@Date</span>:2018/10/26</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@Description</span>:服务端向客户端发送数据</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendHttpRsponse</span><span class="hljs-params">(ChannelHandlerContext ctx, FullHttpRequest req, DefaultFullHttpResponse res)</span>&#123;<br>        <span class="hljs-keyword">if</span>(res.getStatus().code()!=<span class="hljs-number">200</span>)&#123;<br>            ByteBuf buf= Unpooled.copiedBuffer(res.getStatus().toString(), CharsetUtil.UTF_8);<br><br>            res.content().writeBytes(buf);<br><br>            buf.release();<br>        &#125;<br><span class="hljs-comment">//        服务端向客户端发送数据</span><br>        ChannelFuture f=ctx.channel().writeAndFlush(res);<br>        <span class="hljs-keyword">if</span>(res.getStatus().code()!=<span class="hljs-number">200</span>)&#123;<br>            f.addListener(ChannelFutureListener.CLOSE);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><ol start="8"><li>实现客户端</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mate</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>WebSocket客户端<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> socket;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">window</span>.<span class="hljs-property">WebSocket</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">window</span>.<span class="hljs-property">WebSocket</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-property">MozWebSocket</span>;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">WebSocket</span>) &#123;</span><br><span class="language-javascript">        socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(<span class="hljs-string">&#x27;ws://localhost:8080/websocket&#x27;</span>);</span><br><span class="language-javascript">        socket.<span class="hljs-property">onmessage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">var</span> ta = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;responseContent&#x27;</span>);</span><br><span class="language-javascript">          ta.<span class="hljs-property">value</span> += event.<span class="hljs-property">data</span> + <span class="hljs-string">&#x27;\r\n&#x27;</span>;</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        socket.<span class="hljs-property">onopen</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">var</span> ta = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;responseContent&#x27;</span>);</span><br><span class="language-javascript">          ta.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;您当前的浏览器支持webSocket,请进行后续操作 \r\n&#x27;</span>;</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        socket.<span class="hljs-property">onclose</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">var</span> ta = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;responseContent&#x27;</span>);</span><br><span class="language-javascript">          ta.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-javascript">          ta.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;WebSocket连接已经关闭 \n&#x27;</span>;</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;您的浏览器不支持websocket&#x27;</span>);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">message</span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">window</span>.<span class="hljs-property">WebSocket</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-keyword">return</span>;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">if</span> (socket.<span class="hljs-property">readyState</span> == <span class="hljs-title class_">WebSocket</span>.<span class="hljs-property">OPEN</span>) &#123;</span><br><span class="language-javascript">          socket.<span class="hljs-title function_">send</span>(message);</span><br><span class="language-javascript">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;socket连接没有成功&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&quot;return false;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span><br><span class="hljs-tag">        <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;发送WebSocekt请求消息&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">onClick</span>=<span class="hljs-string">&quot;send(this.form.message.value)&quot;</span></span><br><span class="hljs-tag">      /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span> /&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>客户端接收到服务端返回的应答消息<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span></span><br><span class="hljs-tag">        <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;responseContent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:1024px;height:300px;&quot;</span></span><br><span class="hljs-tag">      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="9"><li>启动服务器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: xjc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2018/10/26 22:28</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> 程序的入口,负责启动应用</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//        ----</span><br>        EventLoopGroup bossGroup=<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><span class="hljs-comment">//        ----</span><br>        EventLoopGroup workGroup=<span class="hljs-keyword">new</span> <span class="hljs-title class_">NioEventLoopGroup</span>();<br><span class="hljs-comment">//        ---</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            ServerBootstrap b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerBootstrap</span>();<br>            b.group(bossGroup,workGroup);<br>            b.channel(NioServerSocketChannel.class);<br>            b.childHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyWebSocketChannelHandler</span>());<br>            System.out.println(<span class="hljs-string">&quot;服务端开启等待客户端连接&quot;</span>);<br>            <span class="hljs-type">Channel</span> <span class="hljs-variable">ch</span> <span class="hljs-operator">=</span> b.bind(<span class="hljs-number">8080</span>).channel();<br>            ch.closeFuture().sync();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><img src="https://user-images.githubusercontent.com/34369858/47582249-6cdbf680-d986-11e8-98e4-a7919e0c6342.png" alt="image"></p><p>开启两个网页,实现群聊</p><ol><li><p><img src="https://user-images.githubusercontent.com/34369858/47582316-97c64a80-d986-11e8-91c2-5b61b972f4e4.png" alt="image"></p></li><li><p><img src="https://user-images.githubusercontent.com/34369858/47582332-a14fb280-d986-11e8-92c8-02f059e03183.png" alt="image"></p></li><li><p><img src="https://user-images.githubusercontent.com/34369858/47582340-a4e33980-d986-11e8-9c34-9db1bb1166f9.png" alt="image"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql主备复制与读写分离</title>
    <link href="/posts/27460/"/>
    <url>/posts/27460/</url>
    
    <content type="html"><![CDATA[<h1 id="实现两台mysql服务器主从复制"><a href="#实现两台mysql服务器主从复制" class="headerlink" title="实现两台mysql服务器主从复制"></a>实现两台mysql服务器主从复制</h1><h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><ol><li><p>准备两台服务器.<br><img src="https://user-images.githubusercontent.com/34369858/47266584-3740a300-d56b-11e8-85d8-ddcec6084cc7.png" alt="image"></p></li><li><p>修改<strong>主</strong>服务器 (master) <strong>my.cnf</strong>配置文件,设置服务器唯一ip<br><img src="https://user-images.githubusercontent.com/34369858/47266632-debdd580-d56b-11e8-876d-9ff2e263d876.png" alt="image"></p></li><li><p>主服务器开放账号<br>运行下面sql语句<br><img src="https://user-images.githubusercontent.com/34369858/47266652-247a9e00-d56c-11e8-9864-e26dab9f101e.png" alt="image"></p></li><li><p>修改<strong>从</strong>服务器(slave) 配置文件<br><img src="https://user-images.githubusercontent.com/34369858/47266687-a8348a80-d56c-11e8-8220-e6534b24f366.png" alt="image"></p></li></ol><h2 id="开启主备机同步"><a href="#开启主备机同步" class="headerlink" title="开启主备机同步"></a>开启主备机同步</h2><ol><li>查询master服务器状态.<br><strong>show master status;</strong><br><img src="https://user-images.githubusercontent.com/34369858/47266855-a2d83f80-d56e-11e8-96bf-788b23949aa7.png" alt="image"></li><li>在从服务器中链接主服务器 (注意服务器IP以及日志点位与主服务器对应)<br><img src="https://user-images.githubusercontent.com/34369858/47266870-e7fc7180-d56e-11e8-924f-d0663ef83c59.png" alt="image"></li><li>查看slave服务器状态(都为YES是,表示搭建成功).<br><img src="https://user-images.githubusercontent.com/34369858/47266929-740e9900-d56f-11e8-9571-d33ccba556f6.png" alt="image"></li></ol><h1 id="使用myCat实现数据库读写分离"><a href="#使用myCat实现数据库读写分离" class="headerlink" title="使用myCat实现数据库读写分离"></a>使用myCat实现数据库读写分离</h1><ol><li>使用myCat 中间件,在server.xml中添加两个用户,分别用来读与写;</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mycat&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>mycat<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;schemas&quot;</span>&gt;</span>mycat<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 添加user --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">user</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mycat_red&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span>mycat_red<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;schemas&quot;</span>&gt;</span>mycat<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;readOnly&quot;</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>修改scheme.xml 相关配置;</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mycat</span>:schema <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;schema.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mycat:schema</span> <span class="hljs-attr">xmlns:mycat</span>=<span class="hljs-string">&quot;http://org.opencloudb/&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 与server.xml中user的schemas名一致 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">schema</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mycat&quot;</span> <span class="hljs-attr">checkSQLschema</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">sqlMaxLimit</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_users&quot;</span> <span class="hljs-attr">primaryKey</span>=<span class="hljs-string">&quot;user_id&quot;</span> <span class="hljs-attr">dataNode</span>=<span class="hljs-string">&quot;dn1&quot;</span> <span class="hljs-attr">rule</span>=<span class="hljs-string">&quot;rule1&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;t_message&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;global&quot;</span> <span class="hljs-attr">primaryKey</span>=<span class="hljs-string">&quot;messages_id&quot;</span> <span class="hljs-attr">dataNode</span>=<span class="hljs-string">&quot;dn1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">schema</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dataNode</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;dn1&quot;</span> <span class="hljs-attr">dataHost</span>=<span class="hljs-string">&quot;jdbchost&quot;</span> <span class="hljs-attr">database</span>=<span class="hljs-string">&quot;weibo_simple&quot;</span> /&gt;</span> <span class="hljs-comment">&lt;!--数据库名称 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dataHost</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbchost&quot;</span> <span class="hljs-attr">maxCon</span>=<span class="hljs-string">&quot;1000&quot;</span> <span class="hljs-attr">minCon</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">balance</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">writeType</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">dbType</span>=<span class="hljs-string">&quot;mysql&quot;</span> <span class="hljs-attr">dbDriver</span>=<span class="hljs-string">&quot;native&quot;</span> <span class="hljs-attr">switchType</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">slaveThreshold</span>=<span class="hljs-string">&quot;100&quot;</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">heartbeat</span>&gt;</span>select user()<span class="hljs-tag">&lt;/<span class="hljs-name">heartbeat</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;hostMaster&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;192.168.25.134:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">writeHost</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">writeHost</span> <span class="hljs-attr">host</span>=<span class="hljs-string">&quot;hostSlave&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;192.168.25.135:3306&quot;</span> <span class="hljs-attr">user</span>=<span class="hljs-string">&quot;root&quot;</span> <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dataHost</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mycat:schema</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>修改rule.xml 相关配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-comment">&lt;!-- - - Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span><br><span class="hljs-comment">    - you may not use this file except in compliance with the License. - You</span><br><span class="hljs-comment">    may obtain a copy of the License at - - http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">    - - Unless required by applicable law or agreed to in writing, software -</span><br><span class="hljs-comment">    distributed under the License is distributed on an &quot;AS IS&quot; BASIS, - WITHOUT</span><br><span class="hljs-comment">    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. - See the</span><br><span class="hljs-comment">    License for the specific language governing permissions and - limitations</span><br><span class="hljs-comment">    under the License. --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mycat</span>:rule <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;rule.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mycat:rule</span> <span class="hljs-attr">xmlns:mycat</span>=<span class="hljs-string">&quot;http://org.opencloudb/&quot;</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">tableRule</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;rule1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rule</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">columns</span>&gt;</span>user_id<span class="hljs-tag">&lt;/<span class="hljs-name">columns</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">algorithm</span>&gt;</span>func1<span class="hljs-tag">&lt;/<span class="hljs-name">algorithm</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rule</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tableRule</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">function</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;func1&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.opencloudb.route.function.AutoPartitionByLong&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapFile&quot;</span>&gt;</span>autopartition-long.txt<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">function</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mycat:rule</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p>启动myCat服务器,查看日志文件<br><img src="https://user-images.githubusercontent.com/34369858/47267156-568efe80-d572-11e8-9d1e-fb6f60c18754.png" alt="image"></p></li><li><p>使用读权限账号与读写权限账号分别连接myCat,实现读写分离操作.<br><img src="https://user-images.githubusercontent.com/34369858/47267170-7d4d3500-d572-11e8-9488-750d050044a1.png" alt="image"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL调优</title>
    <link href="/posts/34131/"/>
    <url>/posts/34131/</url>
    
    <content type="html"><![CDATA[<h1 id="MySql如何优化"><a href="#MySql如何优化" class="headerlink" title="MySql如何优化"></a>MySql如何优化</h1><ol><li>表的设计合理化(符合3NF)</li><li>定位慢查询,添加适当索引(index) [四种: 普通索引、主键索引、唯一索引unique、全文索引]</li><li>SQL语句优化</li><li>分表技术(水平分割、垂直分割)</li><li>读写[写: update&#x2F;delete&#x2F;add]分离</li><li>使用存储过程 [模块化编程，可以提高速度]</li></ol><h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><h2 id="数据库三大范式"><a href="#数据库三大范式" class="headerlink" title="数据库三大范式"></a>数据库三大范式</h2><p>第一范式：1NF是对属性的<strong>原子性</strong>约束，要求属性(列)具有<strong>原子性</strong>，不可再分解；(只要是关系型数据库都满足1NF)<br>第二范式：2NF是对记录的<strong>惟一性</strong>约束，表中的记录是<strong>唯一</strong>的, 就满足2NF, 通常我们设计一个主键来实现，主键不能包含业务逻辑。<br>第三范式：3NF是对字段<strong>冗余性</strong>的约束，它要求字段没有<strong>冗余</strong>。 没有冗余的数据库设计可以做到。</p><p>但是，没有冗余的数据库未必是最好的数据库，有时为了提高运行效率，就必须降低范式标准，适当保留冗余数据。具体做法是： 在概念数据模型设计时遵守第三范式，降低范式标准的工作放到物理数据模型设计时考虑。降低范式就是增加字段，允许冗余。</p><h1 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h1><h2 id="定位慢查询"><a href="#定位慢查询" class="headerlink" title="定位慢查询"></a>定位慢查询</h2><p><strong><font color=#c00f >使用show status使用show status查看MySQL服务器状态信息</font></strong></p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table><thead><tr><th>mysql数据库启动了多少时间</th><th>show status like ‘uptime’;</th></tr></thead><tbody><tr><td>显示数据库的查询，更新，添加，删除的次数</td><td>show stauts like ‘com_select’ show stauts like ‘com_insert’…</td></tr><tr><td>显示到mysql数据库的连接数</td><td>show status like ‘connections ‘;</td></tr><tr><td>显示慢查询次数</td><td>show status like ‘slow_queries’;</td></tr><tr><td>查询慢查询时间</td><td>show variables like ‘long_query_time’;</td></tr><tr><td>修改慢查询时间</td><td>set long_query_time&#x3D;1; —但是重启mysql之后，long_query_time依然是my.ini中的值</td></tr></tbody></table><h2 id="使用索引"><a href="#使用索引" class="headerlink" title="使用索引"></a>使用索引</h2><h3 id="索引概述"><a href="#索引概述" class="headerlink" title="索引概述"></a>索引概述</h3><blockquote><p>索引用来快速地寻找那些具有特定值的记录，所有MySQL索引都以B-树的形式保存。如果没有索引，执行查询时MySQL必须从第一个记录开始扫描整个表的所有记录，直至找到符合要求的记录。表里面的记录数量越多，这个操作的代价就越高。如果作为搜索条件的列上已经创建了索引，MySQL无需扫描任何记录即可迅速得到目标记录所在的位置。如果表有1000个记录，通过索引查找记录至少要比顺序扫描记录快100倍。</p></blockquote><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><p>1、普通索引：create index on Tablename(列的列表)</p><p>alter table TableName add index (列的列表)</p><p>create table TableName([…], index [IndexName] (列的列表)</p><p>2、唯一性索引：create unique index</p><p>alter … add unique</p><p>主键：一种唯一性索引，必须指定为primary key</p><p>3、全文索引：从3.23.23版开始支持全文索引和全文检索，FULLTEXT，</p><p>可以在char、varchar或text类型的列上创建。</p><p>4、单列索引、多列索引：</p><p>多个单列索引与单个多列索引的查询效果不同，因为：</p><p>执行查询时，MySQL只能使用一个索引，会从多个索引中选择一个限制最为严格的索引。</p><p>5、最左前缀(Leftmost Prefixing)：多列索引，例如：fname_lname_age索引，以下的搜索条件MySQL都将使用</p><p>fname_lname_age索引：firstname,lastname,age；firstname,lastname；firstname，其他情况将不使用。</p><h2 id="explain执行计划解读"><a href="#explain执行计划解读" class="headerlink" title="explain执行计划解读"></a>explain执行计划解读</h2><p>当我们在查询前能否预先估计查询究竟要涉及多少行、使用哪些索引、运行时间呢？答案是能的，mysql提供了相应的功能和语法来实现该功能。<br>分析：<br>MySql提供了EXPLAIN语法用来进行查询分析，在SQL语句前加一个”EXPLAIN”即可。比如我们要分析如下SQL语句：<br>explain select * from table where table.id &#x3D; 1</p><p>运行上面的sql语句后你会看到，下面的表头信息：</p><p>table | type | possible_keys | key | key_len | ref | rows | Extra</p><h2 id="哪些列上适合添加索引"><a href="#哪些列上适合添加索引" class="headerlink" title="哪些列上适合添加索引"></a>哪些列上适合添加索引</h2><p>① 肯定在where条件经常使用<br>② 该字段的内容不是唯一的几个值<br>③ 字段内容不是频繁变化</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Mybatis</title>
    <link href="/posts/52799/"/>
    <url>/posts/52799/</url>
    
    <content type="html"><![CDATA[<h1 id="Springboot整合Mybatis"><a href="#Springboot整合Mybatis" class="headerlink" title="Springboot整合Mybatis"></a>Springboot整合Mybatis</h1><h2 id="1-添加依赖jar包"><a href="#1-添加依赖jar包" class="headerlink" title="1.添加依赖jar包"></a>1.添加依赖jar包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.41<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--mybatis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--mapper tk插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tk.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--pagehelper--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.generator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-generator-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件:"></a>2.配置文件:</h2><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs clean">############################################################<br>#<br># 配置数据源相关  使用阿里巴巴的 druid 数据源<br>#<br>############################################################<br>spring.datasource.url=jdbc:mysql:<span class="hljs-comment">//localhost:3306/springboot</span><br>spring.datasource.username=root<br>spring.datasource.password=root<br>spring.datasource.driver-<span class="hljs-keyword">class</span>-name=com.mysql.jdbc.Driver<br>spring.datasource.druid.initial-size=<span class="hljs-number">1</span><br>spring.datasource.druid.min-idle=<span class="hljs-number">1</span><br>spring.datasource.druid.max-active=<span class="hljs-number">20</span><br>spring.datasource.druid.test-on-borrow=true<br>spring.datasource.druid.stat-view-servlet.allow=true<br><br><br>############################################################<br>#<br># mybatis 配置<br>#<br>############################################################<br># mybatis 配置<br>mybatis.type-aliases-package=com.example.demo.entity<br>mybatis.mapper-locations=classpath:mapper<span class="hljs-comment">/*.xml</span><br><span class="hljs-comment"># 通用 Mapper 配置</span><br><span class="hljs-comment">mapper.mappers=com.example.demo.utils.MyMapper</span><br><span class="hljs-comment">mapper.not-empty=false</span><br><span class="hljs-comment">mapper.identity=MYSQL</span><br><span class="hljs-comment"># 分页插件配置</span><br><span class="hljs-comment">pagehelper.helperDialect=mysql</span><br><span class="hljs-comment">pagehelper.reasonable=true</span><br><span class="hljs-comment">pagehelper.supportMethodsArguments=true</span><br><span class="hljs-comment">pagehelper.params=count=countSql</span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><hr><h1 id="SpringBoot整合Mybatis逆向工程"><a href="#SpringBoot整合Mybatis逆向工程" class="headerlink" title="SpringBoot整合Mybatis逆向工程"></a>SpringBoot整合Mybatis逆向工程</h1><h2 id="使用mapper插件"><a href="#使用mapper插件" class="headerlink" title="使用mapper插件"></a>使用mapper插件</h2><p><a href="https://github.com/abel533/Mapper">git地址</a></p><h3 id="1-引入jar包"><a href="#1-引入jar包" class="headerlink" title="1.引入jar包:"></a>1.引入jar包:</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>tk.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-引入mybatis逆向工程文件"><a href="#2-引入mybatis逆向工程文件" class="headerlink" title="2.引入mybatis逆向工程文件"></a>2.引入mybatis逆向工程文件</h3><p><img src="https://user-images.githubusercontent.com/34369858/46140187-f5ca1a00-c282-11e8-858f-b71001c799da.png" alt="image"></p><h3 id="3-运行生成"><a href="#3-运行生成" class="headerlink" title="3.运行生成:"></a>3.运行生成:</h3><p>运行后会生成三个主要文件.</p><ul><li>MyMapper 插件接口;</li><li>SysUserMapper 与 SysUserMapper.xml都是表映射</li><li>表中映射的mapper会自动继承MaMapper</li></ul><p><img src="https://user-images.githubusercontent.com/34369858/46140398-97516b80-c283-11e8-9ee2-10d8ab500c70.png" alt="image"></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用:"></a>使用:</h3><p>在service中注入调用即可.<br><img src="https://user-images.githubusercontent.com/34369858/46140487-d5e72600-c283-11e8-8339-37d6bca0fdc4.png" alt="image"></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中Volatile关键字解析</title>
    <link href="/posts/1501/"/>
    <url>/posts/1501/</url>
    
    <content type="html"><![CDATA[<h1 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h1><p>先补充一下概念：Java 内存模型中的<strong>可见性</strong>、<strong>原子性</strong>和<strong>有序性</strong>。</p><h2 id="可见性："><a href="#可见性：" class="headerlink" title="可见性："></a>可见性：</h2><p>可见性是一种复杂的属性，因为可见性中的错误总是会违背我们的直觉。通常，我们无法确保执行读操作的线程能适时地看到其他线程写入的值，有时甚至是根本不可能的事情。为了确保多个线程之间对内存写入操作的可见性，必须使用同步机制。</p><p>可见性，是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的。也就是一个线程修改的结果。另一个线程马上就能看到。比如：用volatile修饰的变量，就会具有可见性。volatile修饰的变量不允许线程内部缓存和重排序，即直接修改内存。所以对其他线程是可见的。但是这里需要注意一个问题，volatile只能让被他修饰内容具有可见性，但不能保证它具有原子性。比如 volatile int a &#x3D; 0；之后有一个操作 a++；这个变量a具有可见性，但是a++ 依然是一个非原子操作，也就是这个操作同样存在线程安全问题。</p><p>在 Java 中 volatile、synchronized 和 final 实现可见性。</p><h2 id="原子性："><a href="#原子性：" class="headerlink" title="原子性："></a>原子性：</h2><p>原子是世界上的最小单位，具有不可分割性。比如 a&#x3D;0；（a非long和double类型） 这个操作是不可分割的，那么我们说这个操作时原子操作。再比如：a++； 这个操作实际是a &#x3D; a + 1；是可分割的，所以他不是一个原子操作。非原子操作都会存在线程安全问题，需要我们使用同步技术（sychronized）来让它变成一个原子操作。一个操作是原子操作，那么我们称它具有原子性。java的concurrent包下提供了一些原子类，我们可以通过阅读API来了解这些原子类的用法。比如：AtomicInteger、AtomicLong、AtomicReference等。</p><p>在 Java 中 synchronized 和在 lock、unlock 中操作保证原子性。</p><h2 id="有序性："><a href="#有序性：" class="headerlink" title="有序性："></a>有序性：</h2><p>Java 语言提供了 volatile 和 synchronized 两个关键字来保证线程之间操作的有序性，volatile 是因为其本身包含“禁止指令重排序”的语义，synchronized 是由“一个变量在同一个时刻只允许一条线程对其进行 lock 操作”这条规则获得的，此规则决定了持有同一个对象锁的两个同步块只能串行执行。</p><p>下面内容摘录自《Java Concurrency in Practice》：</p><p>下面一段代码在多线程环境下，将存在问题。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NoVisibility</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">boolean</span> ready;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> int <span class="hljs-built_in">number</span>;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReaderThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Thread</span> &#123;<br>       <span class="hljs-meta">@Override</span><br>       <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-keyword">while</span>(!ready) &#123;<br>              <span class="hljs-title class_">Thread</span>.<span class="hljs-title function_">yield</span>();<br>          &#125;<br>         <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-built_in">number</span>);<br>      &#125;<br>  &#125;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] args</span>) &#123;<br>     <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReaderThread</span>().<span class="hljs-title function_">start</span>();<br>     <span class="hljs-built_in">number</span> = <span class="hljs-number">42</span>;<br>     ready = <span class="hljs-literal">true</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>NoVisibility可能会持续循环下去，因为读线程可能永远都看不到ready的值。甚至NoVisibility可能会输出0，因为读线程可能看到了写入ready的值，但却没有看到之后写入number的值，这种现象被称为“重排序”。只要在某个线程中无法检测到重排序情况（即使在其他线程中可以明显地看到该线程中的重排序），那么就无法确保线程中的操作将按照程序中指定的顺序来执行。当主线程首先写入number，然后在没有同步的情况下写入ready，那么读线程看到的顺序可能与写入的顺序完全相反。</p><p>在没有同步的情况下，编译器、处理器以及运行时等都可能对操作的执行顺序进行一些意想不到的调整。在缺乏足够同步的多线程程序中，要想对内存操作的执行春旭进行判断，无法得到正确的结论。</p><p>这个看上去像是一个失败的设计，但却能使JVM充分地利用现代多核处理器的强大性能。例如，在缺少同步的情况下，Java内存模型允许编译器对操作顺序进行重排序，并将数值缓存在寄存器中。此外，它还允许CPU对操作顺序进行重排序，并将数值缓存在处理器特定的缓存中。</p><h1 id="二、Volatile原理"><a href="#二、Volatile原理" class="headerlink" title="二、Volatile原理"></a>二、Volatile原理</h1><p>Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其他线程。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其他内存操作一起重排序。volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取volatile类型的变量时总会返回最新写入的值。<br><font color=ready size=2 ><br>　　在访问volatile变量时不会执行加锁操作，因此也就不会使执行线程阻塞，因此volatile变量是一种比sychronized关键字更轻量级的同步机制。<br></font></p><p><img src="https://user-images.githubusercontent.com/34369858/46054500-1fe3e500-c17a-11e8-9513-019d95a6fac8.png"></p><p>当对非 volatile 变量进行读写的时候，每个线程先从内存拷贝变量到CPU缓存中。如果计算机有多个CPU，每个线程可能在不同的CPU上被处理，这意味着每个线程可以拷贝到不同的 CPU cache 中。</p><p>而声明变量是 volatile 的，JVM 保证了每次读变量都从内存中读，跳过 CPU cache 这一步。</p><h3 id="当一个变量定义为-volatile-之后，将具备两种特性："><a href="#当一个变量定义为-volatile-之后，将具备两种特性：" class="headerlink" title="当一个变量定义为 volatile 之后，将具备两种特性："></a>当一个变量定义为 volatile 之后，将具备两种特性：</h3><p>1.保证此变量对所有的线程的可见性，这里的“可见性”，如本文开头所述，当一个线程修改了这个变量的值，volatile 保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。但普通变量做不到这点，普通变量的值在线程间传递均需要通过主内存（详见：Java内存模型）来完成。</p><p>2.禁止指令重排序优化。有volatile修饰的变量，赋值后多执行了一个“load addl $0x0, (%esp)”操作，这个操作相当于一个内存屏障（指令重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障；（什么是指令重排序：是指CPU采用了允许将多条指令不按程序规定的顺序分开发送给各相应电路单元处理）。</p><p>volatile 性能：<br>　　volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础之多态</title>
    <link href="/posts/35718/"/>
    <url>/posts/35718/</url>
    
    <content type="html"><![CDATA[<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h2 id="什么是多态"><a href="#什么是多态" class="headerlink" title="什么是多态"></a>什么是多态</h2><ul><li><p>在面向对象的程序设计语言中,多态是继数据抽象和继承之后的第三种基本特征.</p><blockquote><p>多态通过分离做什么和怎么做,从另一角度将接口和实现类分离开来.它允许将多种类型(同一基类导出的)视为同一类型来处理.<br>多态方法调用允许一种类型表现出与其他类型相似之间的区别,只要他们都是从同一基类导出而来的<br><br/>&#8195;&#8195;&#8195;&#8195;—-<em>《java编程思想》</em></p></blockquote></li><li><p>运行时绑定对应类型的方法</p><blockquote><p>在JAVA中除了static方法和final方法(private方法属于final方法)之外,其他所有的方法都是后期绑定.<br> 后期绑定的含义就是在<strong>运行时</strong>根据对象的类型进行绑定方法.而<strong>多态</strong>就是基于这种机制而产生的.</p><p>接口(interface)就是多态的一种体现<br/></p></blockquote></li></ul><h2 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h2><p>在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的对系统设计人员来讲就不那么重要了；而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程我想就是指按照这种思想来编程吧！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&#8195; 多态意味着”不同的形式”.在面向对象的程序设计中,我门持有从基类继承而来的相同接口,以及使用该接口的不同形式:不同版本的动态绑定方法.</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LinkedList原理及实现</title>
    <link href="/posts/11961/"/>
    <url>/posts/11961/</url>
    
    <content type="html"><![CDATA[<h1 id="LinkedList原理及实现"><a href="#LinkedList原理及实现" class="headerlink" title="LinkedList原理及实现"></a>LinkedList原理及实现</h1><hr><ul><li>linkedList是一个双向链表结构,每一个节点中连接了前后节点.</li><li>初始化LinkedList,其中包含一个head头节点.头节点与自身连接.</li><li>LinkedList中维护着一个节点(Node)数据结构.</li></ul><hr><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图:"></a>结构图:</h2><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1537501437651&di=1da4658ca53003c4a14c904064d44ac6&imgtype=jpg&src=http://img0.imgtn.bdimg.com/it/u=3281801385,2142018450&fm=214&gp=0.jpg"></p><hr><h2 id="简单实现一个LinkedList"><a href="#简单实现一个LinkedList" class="headerlink" title="简单实现一个LinkedList:"></a>简单实现一个LinkedList:</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xjc.demo1;<br><br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>:xjc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>:2018/9/21</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:双向循环链表</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CricluarDoubleLinkedList</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>,Iterable&lt;T&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span>:xjc</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span>:2018/9/21</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span>:实现Iterable接口, 就可以使用for-Each循环</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Iterator</span>() &#123;<br>            <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> index=<span class="hljs-number">0</span>;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> getNode(index)==<span class="hljs-literal">null</span>?<span class="hljs-literal">false</span>:<span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> getValue(index++);<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;T&gt;&#123;<br>        <span class="hljs-keyword">private</span> T value;<br>        <span class="hljs-keyword">private</span> Node&lt;T&gt; prev;<br>        <span class="hljs-keyword">private</span> Node&lt;T&gt; prex;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Node&lt;T&gt; head;<br><br>    <span class="hljs-keyword">private</span> Integer size;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CricluarDoubleLinkedList</span><span class="hljs-params">()</span>&#123;<br><br>        Node&lt;T&gt; node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;();<br><br>        head=node;<br><br>        head.prex=head;<br>        head.prev=head;<br><br>        <span class="hljs-built_in">this</span>.size=<span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(T value)</span>&#123;<br>        <span class="hljs-keyword">if</span>(size==<span class="hljs-number">0</span>) &#123;<br>            Node&lt;T&gt; node = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;();<br>            node.prev=head;<br>            node.prex=head;<br>            node.value=value;<br><br>            head.prex=node;<br>            head.prev=node;<br><br>            size++;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//            从尾部添加</span><br>            Node&lt;T&gt; node=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;();<br>            node.prev=head.prev;<br>            node.prex=head;<br>            node.value=value;<br><br>            head.prev.prex=node;<br><br>            head.prev=node;<br><br>            size++;<br><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Node&lt;T&gt; <span class="hljs-title function_">getNode</span><span class="hljs-params">(Integer index)</span>&#123;<br>        <span class="hljs-keyword">if</span>(index&gt;size-<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">//        判断index是否大于size/2 决定从哪边开始取</span><br>        <span class="hljs-keyword">if</span>(index&gt;(size&lt;&lt;<span class="hljs-number">1</span>))&#123;<br><span class="hljs-comment">//            从尾部取</span><br>            Node cur=head.prev;<br><span class="hljs-comment">//            次数  为  size-index-1    为什么要-1  就是因为size永远比节点数大1,   (新增节点后size+1 留一个空位)</span><br>            Integer number=size-index-<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;number;i++)&#123;<br>                cur=cur.prev;<br>            &#125;<br>            <span class="hljs-keyword">return</span> cur;<br><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//            从头部取</span><br>            Node cur=head.prex;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;index;i++)&#123;<br>                cur=cur.prex;<br>            &#125;<br>            <span class="hljs-keyword">return</span> cur;<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">getValue</span><span class="hljs-params">(Integer index)</span>&#123;<br>        <span class="hljs-keyword">if</span>(index&gt;size-<span class="hljs-number">1</span>||index&lt;<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexOutOfBoundsException</span>();<br>        <span class="hljs-keyword">return</span> getNode(index).value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> size;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="分析-为什么LinkedList增删比ArrayList快"><a href="#分析-为什么LinkedList增删比ArrayList快" class="headerlink" title="分析:为什么LinkedList增删比ArrayList快"></a>分析:为什么LinkedList增删比ArrayList快</h2><blockquote><p>(可以看到,LinkedList中增也进行了遍历查询)</p></blockquote><h3 id="ArrayList中添加代码如下"><a href="#ArrayList中添加代码如下" class="headerlink" title="ArrayList中添加代码如下:"></a>ArrayList中添加代码如下:</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs axapta">    <span class="hljs-comment">// 将e添加到ArrayList的指定位置</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> add(<span class="hljs-built_in">int</span> <span class="hljs-keyword">index</span>, E element) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">index</span> &gt; size || <span class="hljs-keyword">index</span> &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IndexOutOfBoundsException(<br>        <span class="hljs-string">&quot;Index: &quot;</span>+<span class="hljs-keyword">index</span>+<span class="hljs-string">&quot;, Size: &quot;</span>+size);<br><br>    ensureCapacity(size+<span class="hljs-number">1</span>);  <span class="hljs-comment">// Increments modCount!!</span><br>    System.arraycopy(elementData, <span class="hljs-keyword">index</span>, elementData, <span class="hljs-keyword">index</span> + <span class="hljs-number">1</span>,<br>         size - <span class="hljs-keyword">index</span>);<br>    elementData[<span class="hljs-keyword">index</span>] = element;<br>    size++;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>ensureCapacity(size+1) 的作用是<strong>“确认ArrayList的容量，若容量不够，则增加容量。”</strong> <br/><br>真正耗时的操作是 <strong>System.arraycopy(elementData, index, elementData, index + 1, size - index);</strong></p></blockquote><blockquote><p>System.arraycopy(elementData, index, elementData, index + 1, size - index); 会移动index之后所有元素即可。这就意味着，ArrayList的add(int index, E element)函数，<strong>会引起index之后所有元素的改变</strong>！</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArrayList集合原理</title>
    <link href="/posts/24822/"/>
    <url>/posts/24822/</url>
    
    <content type="html"><![CDATA[<h1 id="ArrayList实现及其原理"><a href="#ArrayList实现及其原理" class="headerlink" title="ArrayList实现及其原理"></a>ArrayList实现及其原理</h1><hr><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>ArrayList实质上就是一个动态数组,其中维护了一个Object[]对象,ArrayList初始化时其大小为<code>10</code>.</li><li>其中维护了一个动态指针size表示当前数组使用大小</li><li>当调用add方法添加对象时,会比较实际大小与使用大小.</li><li>如果越界,则对object数组进行扩容, 调用**Arrays.conpyOf()**方法进行扩容 大小为原来的1.5倍</li></ul><hr><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1537461045651&di=735de99530262d05b9160a26592dc617&imgtype=0&src=http://static.codeceo.com/images/2016/05/ea1e09e22304881797834f030b98ad8b.png"></p><hr><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.xjc.demo1;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> MyArrayList&lt;T&gt;  &#123;<br><br>private <span class="hljs-keyword">Object</span>[] <span class="hljs-keyword">array</span>;<br><br>private <span class="hljs-type">Integer</span> size;<br><br><br><span class="hljs-built_in">public</span> MyArrayList()&#123;<br>   <span class="hljs-keyword">array</span>=<span class="hljs-built_in">new</span> T[<span class="hljs-number">10</span>];<br>    this.<span class="hljs-keyword">array</span>=<span class="hljs-built_in">new</span> <span class="hljs-keyword">Object</span>[<span class="hljs-number">10</span>];<br>    size=<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> <span class="hljs-keyword">add</span>(T t)&#123;<br>   //判断大小是否满足<br>    <span class="hljs-keyword">if</span>(size+<span class="hljs-number">1</span>&lt;<span class="hljs-keyword">array</span>.length)&#123;<br>        <span class="hljs-keyword">array</span>[size++]=t;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>       //扩容<br>        grow(size+<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">array</span>[size++]=t;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-built_in">public</span> T <span class="hljs-keyword">get</span>(<span class="hljs-type">Integer</span> <span class="hljs-keyword">index</span>)&#123;<br>    checkIndex(<span class="hljs-keyword">index</span>);<br><br>    <span class="hljs-keyword">return</span> (T) <span class="hljs-keyword">array</span>[<span class="hljs-keyword">index</span>];<br>&#125;<br><br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> checkIndex(<span class="hljs-type">Integer</span> <span class="hljs-keyword">index</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">index</span>&gt;size<span class="hljs-number">-1</span>||<span class="hljs-keyword">index</span>&lt;<span class="hljs-number">0</span>)<br>        throw <span class="hljs-built_in">new</span> IndexOutOfBoundsException();<br>&#125;<br><br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> grow(<span class="hljs-type">Integer</span> min)&#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-built_in">old</span>=<span class="hljs-keyword">array</span>.length;<br><br>    <span class="hljs-type">Integer</span> newCap=(<span class="hljs-built_in">old</span>&gt;&gt;<span class="hljs-number">1</span>)+<span class="hljs-built_in">old</span>;<br><br>    <span class="hljs-keyword">if</span>(newCap-min&lt;<span class="hljs-number">0</span>)<br>        newCap=min;<br><br>    <span class="hljs-keyword">array</span>= Arrays.copyOf(<span class="hljs-keyword">array</span>,newCap);<br><br>&#125;<br><br><span class="hljs-built_in">public</span> <span class="hljs-type">Integer</span> getSize()&#123;<br>    <span class="hljs-keyword">return</span> this.size;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
